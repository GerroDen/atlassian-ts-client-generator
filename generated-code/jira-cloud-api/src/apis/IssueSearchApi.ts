/* tslint:disable */
/* eslint-disable */
/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-006326f44f7f2ca50c1f9c8c88f70b27eb18a140
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  IdSearchRequestBean,
  IdSearchResults,
  IssueMatches,
  IssuePickerSuggestions,
  IssuesAndJQLQueries,
  JQLCountRequestBean,
  JQLCountResultsBean,
  SearchAndReconcileRequestBean,
  SearchAndReconcileResults,
  SearchRequestBean,
  SearchResults,
} from '../models/index';

export interface CountIssuesRequest {
    jQLCountRequestBean: JQLCountRequestBean;
}

export interface GetIssuePickerResourceRequest {
    query?: string;
    currentJQL?: string;
    currentIssueKey?: string;
    currentProjectId?: string;
    showSubTasks?: boolean;
    showSubTaskParent?: boolean;
}

export interface MatchIssuesRequest {
    issuesAndJQLQueries: IssuesAndJQLQueries;
}

export interface SearchAndReconsileIssuesUsingJqlRequest {
    jql?: string;
    nextPageToken?: string;
    maxResults?: number;
    fields?: Array<string>;
    expand?: string;
    properties?: Array<string>;
    fieldsByKeys?: boolean;
    failFast?: boolean;
    reconcileIssues?: Array<number>;
}

export interface SearchAndReconsileIssuesUsingJqlPostRequest {
    searchAndReconcileRequestBean: SearchAndReconcileRequestBean;
}

export interface SearchForIssuesIdsRequest {
    idSearchRequestBean: IdSearchRequestBean;
}

export interface SearchForIssuesUsingJqlRequest {
    jql?: string;
    startAt?: number;
    maxResults?: number;
    validateQuery?: SearchForIssuesUsingJqlValidateQueryEnum;
    fields?: Array<string>;
    expand?: string;
    properties?: Array<string>;
    fieldsByKeys?: boolean;
    failFast?: boolean;
}

export interface SearchForIssuesUsingJqlPostRequest {
    searchRequestBean: SearchRequestBean;
}

/**
 * 
 */
export class IssueSearchApi extends runtime.BaseAPI {

    /**
     * Provide an estimated count of the issues that match the [JQL](https://confluence.atlassian.com/x/egORLQ). Recent updates might not be immediately visible in the returned output. This endpoint requires JQL to be bounded.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Issues are included in the response where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * Count issues using JQL
     */
    async countIssuesRaw(requestParameters: CountIssuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JQLCountResultsBean>> {
        if (requestParameters['jQLCountRequestBean'] == null) {
            throw new runtime.RequiredError(
                'jQLCountRequestBean',
                'Required parameter "jQLCountRequestBean" was null or undefined when calling countIssues().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/search/approximate-count`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['jQLCountRequestBean'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Provide an estimated count of the issues that match the [JQL](https://confluence.atlassian.com/x/egORLQ). Recent updates might not be immediately visible in the returned output. This endpoint requires JQL to be bounded.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Issues are included in the response where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * Count issues using JQL
     */
    async countIssues(requestParameters: CountIssuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JQLCountResultsBean> {
        const response = await this.countIssuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns lists of issues matching a query string. Use this resource to provide auto-completion suggestions when the user is looking for an issue using a word or string.  This operation returns two lists:   *  `History Search` which includes issues from the user\'s history of created, edited, or viewed issues that contain the string in the `query` parameter.  *  `Current Search` which includes issues that match the JQL expression in `currentJQL` and contain the string in the `query` parameter.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     * Get issue picker suggestions
     */
    async getIssuePickerResourceRaw(requestParameters: GetIssuePickerResourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssuePickerSuggestions>> {
        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['currentJQL'] != null) {
            queryParameters['currentJQL'] = requestParameters['currentJQL'];
        }

        if (requestParameters['currentIssueKey'] != null) {
            queryParameters['currentIssueKey'] = requestParameters['currentIssueKey'];
        }

        if (requestParameters['currentProjectId'] != null) {
            queryParameters['currentProjectId'] = requestParameters['currentProjectId'];
        }

        if (requestParameters['showSubTasks'] != null) {
            queryParameters['showSubTasks'] = requestParameters['showSubTasks'];
        }

        if (requestParameters['showSubTaskParent'] != null) {
            queryParameters['showSubTaskParent'] = requestParameters['showSubTaskParent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/issue/picker`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns lists of issues matching a query string. Use this resource to provide auto-completion suggestions when the user is looking for an issue using a word or string.  This operation returns two lists:   *  `History Search` which includes issues from the user\'s history of created, edited, or viewed issues that contain the string in the `query` parameter.  *  `Current Search` which includes issues that match the JQL expression in `currentJQL` and contain the string in the `query` parameter.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     * Get issue picker suggestions
     */
    async getIssuePickerResource(requestParameters: GetIssuePickerResourceRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssuePickerSuggestions> {
        const response = await this.getIssuePickerResourceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Checks whether one or more issues would be returned by one or more JQL queries.  **[Permissions](#permissions) required:** None, however, issues are only matched against JQL queries where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * Check issues against JQL
     */
    async matchIssuesRaw(requestParameters: MatchIssuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssueMatches>> {
        if (requestParameters['issuesAndJQLQueries'] == null) {
            throw new runtime.RequiredError(
                'issuesAndJQLQueries',
                'Required parameter "issuesAndJQLQueries" was null or undefined when calling matchIssues().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/jql/match`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['issuesAndJQLQueries'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Checks whether one or more issues would be returned by one or more JQL queries.  **[Permissions](#permissions) required:** None, however, issues are only matched against JQL queries where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * Check issues against JQL
     */
    async matchIssues(requestParameters: MatchIssuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssueMatches> {
        const response = await this.matchIssuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ). Recent updates might not be immediately visible in the returned search results. If you need [read-after-write](https://developer.atlassian.com/cloud/jira/platform/search-and-reconcile/) consistency, you can utilize the `reconcileIssues` parameter to ensure stronger consistency assurances. This operation can be accessed anonymously.  If the JQL query expression is too large to be encoded as a query parameter, use the [POST](#api-rest-api-3-search-post) version of this resource.  **[Permissions](#permissions) required:** Issues are included in the response where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * Search for issues using JQL enhanced search (GET)
     */
    async searchAndReconsileIssuesUsingJqlRaw(requestParameters: SearchAndReconsileIssuesUsingJqlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchAndReconcileResults>> {
        const queryParameters: any = {};

        if (requestParameters['jql'] != null) {
            queryParameters['jql'] = requestParameters['jql'];
        }

        if (requestParameters['nextPageToken'] != null) {
            queryParameters['nextPageToken'] = requestParameters['nextPageToken'];
        }

        if (requestParameters['maxResults'] != null) {
            queryParameters['maxResults'] = requestParameters['maxResults'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand'];
        }

        if (requestParameters['properties'] != null) {
            queryParameters['properties'] = requestParameters['properties'];
        }

        if (requestParameters['fieldsByKeys'] != null) {
            queryParameters['fieldsByKeys'] = requestParameters['fieldsByKeys'];
        }

        if (requestParameters['failFast'] != null) {
            queryParameters['failFast'] = requestParameters['failFast'];
        }

        if (requestParameters['reconcileIssues'] != null) {
            queryParameters['reconcileIssues'] = requestParameters['reconcileIssues'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/search/jql`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ). Recent updates might not be immediately visible in the returned search results. If you need [read-after-write](https://developer.atlassian.com/cloud/jira/platform/search-and-reconcile/) consistency, you can utilize the `reconcileIssues` parameter to ensure stronger consistency assurances. This operation can be accessed anonymously.  If the JQL query expression is too large to be encoded as a query parameter, use the [POST](#api-rest-api-3-search-post) version of this resource.  **[Permissions](#permissions) required:** Issues are included in the response where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * Search for issues using JQL enhanced search (GET)
     */
    async searchAndReconsileIssuesUsingJql(requestParameters: SearchAndReconsileIssuesUsingJqlRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchAndReconcileResults> {
        const response = await this.searchAndReconsileIssuesUsingJqlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ). Recent updates might not be immediately visible in the returned search results. If you need [read-after-write](https://developer.atlassian.com/cloud/jira/platform/search-and-reconcile/) consistency, you can utilize the `reconcileIssues` parameter to ensure stronger consistency assurances. This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Issues are included in the response where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * Search for issues using JQL enhanced search (POST)
     */
    async searchAndReconsileIssuesUsingJqlPostRaw(requestParameters: SearchAndReconsileIssuesUsingJqlPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchAndReconcileResults>> {
        if (requestParameters['searchAndReconcileRequestBean'] == null) {
            throw new runtime.RequiredError(
                'searchAndReconcileRequestBean',
                'Required parameter "searchAndReconcileRequestBean" was null or undefined when calling searchAndReconsileIssuesUsingJqlPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/search/jql`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['searchAndReconcileRequestBean'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ). Recent updates might not be immediately visible in the returned search results. If you need [read-after-write](https://developer.atlassian.com/cloud/jira/platform/search-and-reconcile/) consistency, you can utilize the `reconcileIssues` parameter to ensure stronger consistency assurances. This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Issues are included in the response where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * Search for issues using JQL enhanced search (POST)
     */
    async searchAndReconsileIssuesUsingJqlPost(requestParameters: SearchAndReconsileIssuesUsingJqlPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchAndReconcileResults> {
        const response = await this.searchAndReconsileIssuesUsingJqlPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Searches for IDs of issues using [JQL](https://confluence.atlassian.com/x/egORLQ).  Use the [Search](#api-rest-api-3-search-post) endpoint if you need to fetch more than just issue IDs. The Search endpoint returns more information, but may take much longer to respond to requests. This is because it uses a different mechanism for ordering results than this endpoint and doesn\'t provide the total number of results for your query.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Issues are included in the response where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * Search issue IDs using JQL
     * @deprecated
     */
    async searchForIssuesIdsRaw(requestParameters: SearchForIssuesIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdSearchResults>> {
        if (requestParameters['idSearchRequestBean'] == null) {
            throw new runtime.RequiredError(
                'idSearchRequestBean',
                'Required parameter "idSearchRequestBean" was null or undefined when calling searchForIssuesIds().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/search/id`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['idSearchRequestBean'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Searches for IDs of issues using [JQL](https://confluence.atlassian.com/x/egORLQ).  Use the [Search](#api-rest-api-3-search-post) endpoint if you need to fetch more than just issue IDs. The Search endpoint returns more information, but may take much longer to respond to requests. This is because it uses a different mechanism for ordering results than this endpoint and doesn\'t provide the total number of results for your query.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Issues are included in the response where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * Search issue IDs using JQL
     * @deprecated
     */
    async searchForIssuesIds(requestParameters: SearchForIssuesIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdSearchResults> {
        const response = await this.searchForIssuesIdsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).  If the JQL query expression is too large to be encoded as a query parameter, use the [POST](#api-rest-api-3-search-post) version of this resource.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Issues are included in the response where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * Search for issues using JQL (GET)
     * @deprecated
     */
    async searchForIssuesUsingJqlRaw(requestParameters: SearchForIssuesUsingJqlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchResults>> {
        const queryParameters: any = {};

        if (requestParameters['jql'] != null) {
            queryParameters['jql'] = requestParameters['jql'];
        }

        if (requestParameters['startAt'] != null) {
            queryParameters['startAt'] = requestParameters['startAt'];
        }

        if (requestParameters['maxResults'] != null) {
            queryParameters['maxResults'] = requestParameters['maxResults'];
        }

        if (requestParameters['validateQuery'] != null) {
            queryParameters['validateQuery'] = requestParameters['validateQuery'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['fields'] = requestParameters['fields'];
        }

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand'];
        }

        if (requestParameters['properties'] != null) {
            queryParameters['properties'] = requestParameters['properties'];
        }

        if (requestParameters['fieldsByKeys'] != null) {
            queryParameters['fieldsByKeys'] = requestParameters['fieldsByKeys'];
        }

        if (requestParameters['failFast'] != null) {
            queryParameters['failFast'] = requestParameters['failFast'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).  If the JQL query expression is too large to be encoded as a query parameter, use the [POST](#api-rest-api-3-search-post) version of this resource.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Issues are included in the response where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * Search for issues using JQL (GET)
     * @deprecated
     */
    async searchForIssuesUsingJql(requestParameters: SearchForIssuesUsingJqlRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchResults> {
        const response = await this.searchForIssuesUsingJqlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).  There is a [GET](#api-rest-api-3-search-get) version of this resource that can be used for smaller JQL query expressions.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Issues are included in the response where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * Search for issues using JQL (POST)
     * @deprecated
     */
    async searchForIssuesUsingJqlPostRaw(requestParameters: SearchForIssuesUsingJqlPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchResults>> {
        if (requestParameters['searchRequestBean'] == null) {
            throw new runtime.RequiredError(
                'searchRequestBean',
                'Required parameter "searchRequestBean" was null or undefined when calling searchForIssuesUsingJqlPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['searchRequestBean'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).  There is a [GET](#api-rest-api-3-search-get) version of this resource that can be used for smaller JQL query expressions.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Issues are included in the response where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * Search for issues using JQL (POST)
     * @deprecated
     */
    async searchForIssuesUsingJqlPost(requestParameters: SearchForIssuesUsingJqlPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchResults> {
        const response = await this.searchForIssuesUsingJqlPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const SearchForIssuesUsingJqlValidateQueryEnum = {
    Strict: 'strict',
    Warn: 'warn',
    None: 'none',
    True: 'true',
    False: 'false'
} as const;
export type SearchForIssuesUsingJqlValidateQueryEnum = typeof SearchForIssuesUsingJqlValidateQueryEnum[keyof typeof SearchForIssuesUsingJqlValidateQueryEnum];
