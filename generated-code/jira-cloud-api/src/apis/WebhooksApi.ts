/* tslint:disable */
/* eslint-disable */
/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-006326f44f7f2ca50c1f9c8c88f70b27eb18a140
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ContainerForRegisteredWebhooks,
  ContainerForWebhookIDs,
  ErrorCollection,
  FailedWebhooks,
  PageBeanWebhook,
  WebhookRegistrationDetails,
  WebhooksExpirationDate,
} from '../models/index';

export interface DeleteWebhookByIdRequest {
    containerForWebhookIDs: ContainerForWebhookIDs;
}

export interface GetDynamicWebhooksForAppRequest {
    startAt?: number;
    maxResults?: number;
}

export interface GetFailedWebhooksRequest {
    maxResults?: number;
    after?: number;
}

export interface RefreshWebhooksRequest {
    containerForWebhookIDs: ContainerForWebhookIDs;
}

export interface RegisterDynamicWebhooksRequest {
    webhookRegistrationDetails: WebhookRegistrationDetails;
}

/**
 * 
 */
export class WebhooksApi extends runtime.BaseAPI {

    /**
     * Removes webhooks by ID. Only webhooks registered by the calling app are removed. If webhooks created by other apps are specified, they are ignored.  **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.
     * Delete webhooks by ID
     */
    async deleteWebhookByIdRaw(requestParameters: DeleteWebhookByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['containerForWebhookIDs'] == null) {
            throw new runtime.RequiredError(
                'containerForWebhookIDs',
                'Required parameter "containerForWebhookIDs" was null or undefined when calling deleteWebhookById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work", "manage:jira-webhook"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/webhook`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['containerForWebhookIDs'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes webhooks by ID. Only webhooks registered by the calling app are removed. If webhooks created by other apps are specified, they are ignored.  **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.
     * Delete webhooks by ID
     */
    async deleteWebhookById(requestParameters: DeleteWebhookByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteWebhookByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a [paginated](#pagination) list of the webhooks registered by the calling app.  **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.
     * Get dynamic webhooks for app
     */
    async getDynamicWebhooksForAppRaw(requestParameters: GetDynamicWebhooksForAppRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageBeanWebhook>> {
        const queryParameters: any = {};

        if (requestParameters['startAt'] != null) {
            queryParameters['startAt'] = requestParameters['startAt'];
        }

        if (requestParameters['maxResults'] != null) {
            queryParameters['maxResults'] = requestParameters['maxResults'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work", "manage:jira-webhook"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/webhook`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a [paginated](#pagination) list of the webhooks registered by the calling app.  **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.
     * Get dynamic webhooks for app
     */
    async getDynamicWebhooksForApp(requestParameters: GetDynamicWebhooksForAppRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageBeanWebhook> {
        const response = await this.getDynamicWebhooksForAppRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns webhooks that have recently failed to be delivered to the requesting app after the maximum number of retries.  After 72 hours the failure may no longer be returned by this operation.  The oldest failure is returned first.  This method uses a cursor-based pagination. To request the next page use the failure time of the last webhook on the list as the `failedAfter` value or use the URL provided in `next`.  **[Permissions](#permissions) required:** Only [Connect apps](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) can use this operation.
     * Get failed webhooks
     */
    async getFailedWebhooksRaw(requestParameters: GetFailedWebhooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FailedWebhooks>> {
        const queryParameters: any = {};

        if (requestParameters['maxResults'] != null) {
            queryParameters['maxResults'] = requestParameters['maxResults'];
        }

        if (requestParameters['after'] != null) {
            queryParameters['after'] = requestParameters['after'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work", "manage:jira-webhook"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/webhook/failed`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns webhooks that have recently failed to be delivered to the requesting app after the maximum number of retries.  After 72 hours the failure may no longer be returned by this operation.  The oldest failure is returned first.  This method uses a cursor-based pagination. To request the next page use the failure time of the last webhook on the list as the `failedAfter` value or use the URL provided in `next`.  **[Permissions](#permissions) required:** Only [Connect apps](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) can use this operation.
     * Get failed webhooks
     */
    async getFailedWebhooks(requestParameters: GetFailedWebhooksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FailedWebhooks> {
        const response = await this.getFailedWebhooksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Extends the life of webhook. Webhooks registered through the REST API expire after 30 days. Call this operation to keep them alive.  Unrecognized webhook IDs (those that are not found or belong to other apps) are ignored.  **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.
     * Extend webhook life
     */
    async refreshWebhooksRaw(requestParameters: RefreshWebhooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WebhooksExpirationDate>> {
        if (requestParameters['containerForWebhookIDs'] == null) {
            throw new runtime.RequiredError(
                'containerForWebhookIDs',
                'Required parameter "containerForWebhookIDs" was null or undefined when calling refreshWebhooks().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work", "manage:jira-webhook"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/webhook/refresh`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['containerForWebhookIDs'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Extends the life of webhook. Webhooks registered through the REST API expire after 30 days. Call this operation to keep them alive.  Unrecognized webhook IDs (those that are not found or belong to other apps) are ignored.  **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.
     * Extend webhook life
     */
    async refreshWebhooks(requestParameters: RefreshWebhooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WebhooksExpirationDate> {
        const response = await this.refreshWebhooksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Registers webhooks.  **NOTE:** for non-public OAuth apps, webhooks are delivered only if there is a match between the app owner and the user who registered a dynamic webhook.  **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.
     * Register dynamic webhooks
     */
    async registerDynamicWebhooksRaw(requestParameters: RegisterDynamicWebhooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContainerForRegisteredWebhooks>> {
        if (requestParameters['webhookRegistrationDetails'] == null) {
            throw new runtime.RequiredError(
                'webhookRegistrationDetails',
                'Required parameter "webhookRegistrationDetails" was null or undefined when calling registerDynamicWebhooks().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work", "manage:jira-webhook"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/webhook`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['webhookRegistrationDetails'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Registers webhooks.  **NOTE:** for non-public OAuth apps, webhooks are delivered only if there is a match between the app owner and the user who registered a dynamic webhook.  **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.
     * Register dynamic webhooks
     */
    async registerDynamicWebhooks(requestParameters: RegisterDynamicWebhooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContainerForRegisteredWebhooks> {
        const response = await this.registerDynamicWebhooksRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
