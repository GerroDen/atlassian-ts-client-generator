/* tslint:disable */
/* eslint-disable */
/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-006326f44f7f2ca50c1f9c8c88f70b27eb18a140
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EntityProperty,
  OperationMessage,
  PropertyKeys,
} from '../models/index';

export interface AddonPropertiesResourceDeleteAddonPropertyDeleteRequest {
    addonKey: string;
    propertyKey: string;
}

export interface AddonPropertiesResourceGetAddonPropertiesGetRequest {
    addonKey: string;
}

export interface AddonPropertiesResourceGetAddonPropertyGetRequest {
    addonKey: string;
    propertyKey: string;
}

export interface AddonPropertiesResourcePutAddonPropertyPutRequest {
    addonKey: string;
    propertyKey: string;
    body: any | null;
}

export interface DeleteForgeAppPropertyRequest {
    propertyKey: string;
}

export interface PutForgeAppPropertyRequest {
    propertyKey: string;
    body: any | null;
}

/**
 * 
 */
export class AppPropertiesApi extends runtime.BaseAPI {

    /**
     * Deletes an app\'s property.  **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request. Additionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).
     * Delete app property
     */
    async addonPropertiesResourceDeleteAddonPropertyDeleteRaw(requestParameters: AddonPropertiesResourceDeleteAddonPropertyDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['addonKey'] == null) {
            throw new runtime.RequiredError(
                'addonKey',
                'Required parameter "addonKey" was null or undefined when calling addonPropertiesResourceDeleteAddonPropertyDelete().'
            );
        }

        if (requestParameters['propertyKey'] == null) {
            throw new runtime.RequiredError(
                'propertyKey',
                'Required parameter "propertyKey" was null or undefined when calling addonPropertiesResourceDeleteAddonPropertyDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}`.replace(`{${"addonKey"}}`, encodeURIComponent(String(requestParameters['addonKey']))).replace(`{${"propertyKey"}}`, encodeURIComponent(String(requestParameters['propertyKey']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an app\'s property.  **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request. Additionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).
     * Delete app property
     */
    async addonPropertiesResourceDeleteAddonPropertyDelete(requestParameters: AddonPropertiesResourceDeleteAddonPropertyDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addonPropertiesResourceDeleteAddonPropertyDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Gets all the properties of an app.  **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request. Additionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).
     * Get app properties
     */
    async addonPropertiesResourceGetAddonPropertiesGetRaw(requestParameters: AddonPropertiesResourceGetAddonPropertiesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PropertyKeys>> {
        if (requestParameters['addonKey'] == null) {
            throw new runtime.RequiredError(
                'addonKey',
                'Required parameter "addonKey" was null or undefined when calling addonPropertiesResourceGetAddonPropertiesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/atlassian-connect/1/addons/{addonKey}/properties`.replace(`{${"addonKey"}}`, encodeURIComponent(String(requestParameters['addonKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Gets all the properties of an app.  **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request. Additionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).
     * Get app properties
     */
    async addonPropertiesResourceGetAddonPropertiesGet(requestParameters: AddonPropertiesResourceGetAddonPropertiesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PropertyKeys> {
        const response = await this.addonPropertiesResourceGetAddonPropertiesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the key and value of an app\'s property.  **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request. Additionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).
     * Get app property
     */
    async addonPropertiesResourceGetAddonPropertyGetRaw(requestParameters: AddonPropertiesResourceGetAddonPropertyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntityProperty>> {
        if (requestParameters['addonKey'] == null) {
            throw new runtime.RequiredError(
                'addonKey',
                'Required parameter "addonKey" was null or undefined when calling addonPropertiesResourceGetAddonPropertyGet().'
            );
        }

        if (requestParameters['propertyKey'] == null) {
            throw new runtime.RequiredError(
                'propertyKey',
                'Required parameter "propertyKey" was null or undefined when calling addonPropertiesResourceGetAddonPropertyGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}`.replace(`{${"addonKey"}}`, encodeURIComponent(String(requestParameters['addonKey']))).replace(`{${"propertyKey"}}`, encodeURIComponent(String(requestParameters['propertyKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the key and value of an app\'s property.  **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request. Additionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).
     * Get app property
     */
    async addonPropertiesResourceGetAddonPropertyGet(requestParameters: AddonPropertiesResourceGetAddonPropertyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntityProperty> {
        const response = await this.addonPropertiesResourceGetAddonPropertyGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sets the value of an app\'s property. Use this resource to store custom data for your app.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request. Additionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).
     * Set app property
     */
    async addonPropertiesResourcePutAddonPropertyPutRaw(requestParameters: AddonPropertiesResourcePutAddonPropertyPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationMessage>> {
        if (requestParameters['addonKey'] == null) {
            throw new runtime.RequiredError(
                'addonKey',
                'Required parameter "addonKey" was null or undefined when calling addonPropertiesResourcePutAddonPropertyPut().'
            );
        }

        if (requestParameters['propertyKey'] == null) {
            throw new runtime.RequiredError(
                'propertyKey',
                'Required parameter "propertyKey" was null or undefined when calling addonPropertiesResourcePutAddonPropertyPut().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling addonPropertiesResourcePutAddonPropertyPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}`.replace(`{${"addonKey"}}`, encodeURIComponent(String(requestParameters['addonKey']))).replace(`{${"propertyKey"}}`, encodeURIComponent(String(requestParameters['propertyKey']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Sets the value of an app\'s property. Use this resource to store custom data for your app.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request. Additionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).
     * Set app property
     */
    async addonPropertiesResourcePutAddonPropertyPut(requestParameters: AddonPropertiesResourcePutAddonPropertyPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationMessage> {
        const response = await this.addonPropertiesResourcePutAddonPropertyPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a Forge app\'s property.  **[Permissions](#permissions) required:** Only Forge apps can make this request.  The new `write:app-data:jira` OAuth scope is 100% optional now, and not using it won\'t break your app. However, we recommend adding it to your app\'s scope list because we will eventually make it mandatory.
     * Delete app property (Forge)
     */
    async deleteForgeAppPropertyRaw(requestParameters: DeleteForgeAppPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['propertyKey'] == null) {
            throw new runtime.RequiredError(
                'propertyKey',
                'Required parameter "propertyKey" was null or undefined when calling deleteForgeAppProperty().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/forge/1/app/properties/{propertyKey}`.replace(`{${"propertyKey"}}`, encodeURIComponent(String(requestParameters['propertyKey']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a Forge app\'s property.  **[Permissions](#permissions) required:** Only Forge apps can make this request.  The new `write:app-data:jira` OAuth scope is 100% optional now, and not using it won\'t break your app. However, we recommend adding it to your app\'s scope list because we will eventually make it mandatory.
     * Delete app property (Forge)
     */
    async deleteForgeAppProperty(requestParameters: DeleteForgeAppPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteForgeAppPropertyRaw(requestParameters, initOverrides);
    }

    /**
     * Sets the value of a Forge app\'s property. These values can be retrieved in [Jira expressions](/cloud/jira/platform/jira-expressions/) through the `app` [context variable](/cloud/jira/platform/jira-expressions/#context-variables). They are also available in [entity property display conditions](/platform/forge/manifest-reference/display-conditions/entity-property-conditions/).  For other use cases, use the [Storage API](/platform/forge/runtime-reference/storage-api/).  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  **[Permissions](#permissions) required:** Only Forge apps can make this request.  The new `write:app-data:jira` OAuth scope is 100% optional now, and not using it won\'t break your app. However, we recommend adding it to your app\'s scope list because we will eventually make it mandatory.
     * Set app property (Forge)
     */
    async putForgeAppPropertyRaw(requestParameters: PutForgeAppPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationMessage>> {
        if (requestParameters['propertyKey'] == null) {
            throw new runtime.RequiredError(
                'propertyKey',
                'Required parameter "propertyKey" was null or undefined when calling putForgeAppProperty().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling putForgeAppProperty().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/forge/1/app/properties/{propertyKey}`.replace(`{${"propertyKey"}}`, encodeURIComponent(String(requestParameters['propertyKey']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Sets the value of a Forge app\'s property. These values can be retrieved in [Jira expressions](/cloud/jira/platform/jira-expressions/) through the `app` [context variable](/cloud/jira/platform/jira-expressions/#context-variables). They are also available in [entity property display conditions](/platform/forge/manifest-reference/display-conditions/entity-property-conditions/).  For other use cases, use the [Storage API](/platform/forge/runtime-reference/storage-api/).  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  **[Permissions](#permissions) required:** Only Forge apps can make this request.  The new `write:app-data:jira` OAuth scope is 100% optional now, and not using it won\'t break your app. However, we recommend adding it to your app\'s scope list because we will eventually make it mandatory.
     * Set app property (Forge)
     */
    async putForgeAppProperty(requestParameters: PutForgeAppPropertyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationMessage> {
        const response = await this.putForgeAppPropertyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
