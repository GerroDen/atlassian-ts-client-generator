/* tslint:disable */
/* eslint-disable */
/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-006326f44f7f2ca50c1f9c8c88f70b27eb18a140
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChangedWorklogs,
  PageOfWorklogs,
  Worklog,
  WorklogIdsRequestBean,
  WorklogsMoveRequestBean,
} from '../models/index';

export interface AddWorklogRequest {
    issueIdOrKey: string;
    worklog: Omit<Worklog, 'author'|'created'|'id'|'issueId'|'self'|'updateAuthor'|'updated'>;
    notifyUsers?: boolean;
    adjustEstimate?: AddWorklogAdjustEstimateEnum;
    newEstimate?: string;
    reduceBy?: string;
    expand?: string;
    overrideEditableFlag?: boolean;
}

export interface BulkDeleteWorklogsRequest {
    issueIdOrKey: string;
    worklogIdsRequestBean: WorklogIdsRequestBean;
    adjustEstimate?: BulkDeleteWorklogsAdjustEstimateEnum;
    overrideEditableFlag?: boolean;
}

export interface BulkMoveWorklogsRequest {
    issueIdOrKey: string;
    worklogsMoveRequestBean: WorklogsMoveRequestBean;
    adjustEstimate?: BulkMoveWorklogsAdjustEstimateEnum;
    overrideEditableFlag?: boolean;
}

export interface DeleteWorklogRequest {
    issueIdOrKey: string;
    id: string;
    notifyUsers?: boolean;
    adjustEstimate?: DeleteWorklogAdjustEstimateEnum;
    newEstimate?: string;
    increaseBy?: string;
    overrideEditableFlag?: boolean;
}

export interface GetIdsOfWorklogsDeletedSinceRequest {
    since?: number;
}

export interface GetIdsOfWorklogsModifiedSinceRequest {
    since?: number;
    expand?: string;
}

export interface GetIssueWorklogRequest {
    issueIdOrKey: string;
    startAt?: number;
    maxResults?: number;
    startedAfter?: number;
    startedBefore?: number;
    expand?: string;
}

export interface GetWorklogRequest {
    issueIdOrKey: string;
    id: string;
    expand?: string;
}

export interface GetWorklogsForIdsRequest {
    worklogIdsRequestBean: WorklogIdsRequestBean;
    expand?: string;
}

export interface UpdateWorklogRequest {
    issueIdOrKey: string;
    id: string;
    worklog: Omit<Worklog, 'author'|'created'|'id'|'issueId'|'self'|'updateAuthor'|'updated'>;
    notifyUsers?: boolean;
    adjustEstimate?: UpdateWorklogAdjustEstimateEnum;
    newEstimate?: string;
    expand?: string;
    overrideEditableFlag?: boolean;
}

/**
 * 
 */
export class IssueWorklogsApi extends runtime.BaseAPI {

    /**
     * Adds a worklog to an issue.  Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* and *Work on issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * Add worklog
     */
    async addWorklogRaw(requestParameters: AddWorklogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Worklog>> {
        if (requestParameters['issueIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'issueIdOrKey',
                'Required parameter "issueIdOrKey" was null or undefined when calling addWorklog().'
            );
        }

        if (requestParameters['worklog'] == null) {
            throw new runtime.RequiredError(
                'worklog',
                'Required parameter "worklog" was null or undefined when calling addWorklog().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['notifyUsers'] != null) {
            queryParameters['notifyUsers'] = requestParameters['notifyUsers'];
        }

        if (requestParameters['adjustEstimate'] != null) {
            queryParameters['adjustEstimate'] = requestParameters['adjustEstimate'];
        }

        if (requestParameters['newEstimate'] != null) {
            queryParameters['newEstimate'] = requestParameters['newEstimate'];
        }

        if (requestParameters['reduceBy'] != null) {
            queryParameters['reduceBy'] = requestParameters['reduceBy'];
        }

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand'];
        }

        if (requestParameters['overrideEditableFlag'] != null) {
            queryParameters['overrideEditableFlag'] = requestParameters['overrideEditableFlag'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/issue/{issueIdOrKey}/worklog`.replace(`{${"issueIdOrKey"}}`, encodeURIComponent(String(requestParameters['issueIdOrKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['worklog'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Adds a worklog to an issue.  Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* and *Work on issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     * Add worklog
     */
    async addWorklog(requestParameters: AddWorklogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Worklog> {
        const response = await this.addWorklogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a list of worklogs from an issue. This is an experimental API with limitations:   *  You can\'t delete more than 5000 worklogs at once.  *  No notifications will be sent for deleted worklogs.  Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  *Delete all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any worklog.  *  If any worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     * Bulk delete worklogs
     */
    async bulkDeleteWorklogsRaw(requestParameters: BulkDeleteWorklogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['issueIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'issueIdOrKey',
                'Required parameter "issueIdOrKey" was null or undefined when calling bulkDeleteWorklogs().'
            );
        }

        if (requestParameters['worklogIdsRequestBean'] == null) {
            throw new runtime.RequiredError(
                'worklogIdsRequestBean',
                'Required parameter "worklogIdsRequestBean" was null or undefined when calling bulkDeleteWorklogs().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['adjustEstimate'] != null) {
            queryParameters['adjustEstimate'] = requestParameters['adjustEstimate'];
        }

        if (requestParameters['overrideEditableFlag'] != null) {
            queryParameters['overrideEditableFlag'] = requestParameters['overrideEditableFlag'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/issue/{issueIdOrKey}/worklog`.replace(`{${"issueIdOrKey"}}`, encodeURIComponent(String(requestParameters['issueIdOrKey']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['worklogIdsRequestBean'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a list of worklogs from an issue. This is an experimental API with limitations:   *  You can\'t delete more than 5000 worklogs at once.  *  No notifications will be sent for deleted worklogs.  Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  *Delete all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any worklog.  *  If any worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     * Bulk delete worklogs
     */
    async bulkDeleteWorklogs(requestParameters: BulkDeleteWorklogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.bulkDeleteWorklogsRaw(requestParameters, initOverrides);
    }

    /**
     * Moves a list of worklogs from one issue to another. This is an experimental API with several limitations:   *  You can\'t move more than 5000 worklogs at once.  *  You can\'t move worklogs containing an attachment.  *  You can\'t move worklogs restricted by project roles.  *  No notifications will be sent for moved worklogs.  *  No webhooks or events will be sent for moved worklogs.  *  No issue history will be recorded for moved worklogs.  Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the projects containing the source and destination issues.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  *Delete all worklogs*[ and *Edit all worklogs*](https://confluence.atlassian.com/x/yodKLg)[project permission](https://confluence.atlassian.com/x/yodKLg)  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     * Bulk move worklogs
     */
    async bulkMoveWorklogsRaw(requestParameters: BulkMoveWorklogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['issueIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'issueIdOrKey',
                'Required parameter "issueIdOrKey" was null or undefined when calling bulkMoveWorklogs().'
            );
        }

        if (requestParameters['worklogsMoveRequestBean'] == null) {
            throw new runtime.RequiredError(
                'worklogsMoveRequestBean',
                'Required parameter "worklogsMoveRequestBean" was null or undefined when calling bulkMoveWorklogs().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['adjustEstimate'] != null) {
            queryParameters['adjustEstimate'] = requestParameters['adjustEstimate'];
        }

        if (requestParameters['overrideEditableFlag'] != null) {
            queryParameters['overrideEditableFlag'] = requestParameters['overrideEditableFlag'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/issue/{issueIdOrKey}/worklog/move`.replace(`{${"issueIdOrKey"}}`, encodeURIComponent(String(requestParameters['issueIdOrKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['worklogsMoveRequestBean'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Moves a list of worklogs from one issue to another. This is an experimental API with several limitations:   *  You can\'t move more than 5000 worklogs at once.  *  You can\'t move worklogs containing an attachment.  *  You can\'t move worklogs restricted by project roles.  *  No notifications will be sent for moved worklogs.  *  No webhooks or events will be sent for moved worklogs.  *  No issue history will be recorded for moved worklogs.  Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the projects containing the source and destination issues.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  *Delete all worklogs*[ and *Edit all worklogs*](https://confluence.atlassian.com/x/yodKLg)[project permission](https://confluence.atlassian.com/x/yodKLg)  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     * Bulk move worklogs
     */
    async bulkMoveWorklogs(requestParameters: BulkMoveWorklogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.bulkMoveWorklogsRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a worklog from an issue.  Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  *Delete all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any worklog or *Delete own worklogs* to delete worklogs created by the user,  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     * Delete worklog
     */
    async deleteWorklogRaw(requestParameters: DeleteWorklogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['issueIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'issueIdOrKey',
                'Required parameter "issueIdOrKey" was null or undefined when calling deleteWorklog().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteWorklog().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['notifyUsers'] != null) {
            queryParameters['notifyUsers'] = requestParameters['notifyUsers'];
        }

        if (requestParameters['adjustEstimate'] != null) {
            queryParameters['adjustEstimate'] = requestParameters['adjustEstimate'];
        }

        if (requestParameters['newEstimate'] != null) {
            queryParameters['newEstimate'] = requestParameters['newEstimate'];
        }

        if (requestParameters['increaseBy'] != null) {
            queryParameters['increaseBy'] = requestParameters['increaseBy'];
        }

        if (requestParameters['overrideEditableFlag'] != null) {
            queryParameters['overrideEditableFlag'] = requestParameters['overrideEditableFlag'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/issue/{issueIdOrKey}/worklog/{id}`.replace(`{${"issueIdOrKey"}}`, encodeURIComponent(String(requestParameters['issueIdOrKey']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a worklog from an issue.  Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  *Delete all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any worklog or *Delete own worklogs* to delete worklogs created by the user,  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     * Delete worklog
     */
    async deleteWorklog(requestParameters: DeleteWorklogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteWorklogRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a list of IDs and delete timestamps for worklogs deleted after a date and time.  This resource is paginated, with a limit of 1000 worklogs per page. Each page lists worklogs from oldest to youngest. If the number of items in the date range exceeds 1000, `until` indicates the timestamp of the youngest item on the page. Also, `nextPage` provides the URL for the next page of worklogs. The `lastPage` parameter is set to true on the last page of worklogs.  This resource does not return worklogs deleted during the minute preceding the request.  **[Permissions](#permissions) required:** Permission to access Jira.
     * Get IDs of deleted worklogs
     */
    async getIdsOfWorklogsDeletedSinceRaw(requestParameters: GetIdsOfWorklogsDeletedSinceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedWorklogs>> {
        const queryParameters: any = {};

        if (requestParameters['since'] != null) {
            queryParameters['since'] = requestParameters['since'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/worklog/deleted`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a list of IDs and delete timestamps for worklogs deleted after a date and time.  This resource is paginated, with a limit of 1000 worklogs per page. Each page lists worklogs from oldest to youngest. If the number of items in the date range exceeds 1000, `until` indicates the timestamp of the youngest item on the page. Also, `nextPage` provides the URL for the next page of worklogs. The `lastPage` parameter is set to true on the last page of worklogs.  This resource does not return worklogs deleted during the minute preceding the request.  **[Permissions](#permissions) required:** Permission to access Jira.
     * Get IDs of deleted worklogs
     */
    async getIdsOfWorklogsDeletedSince(requestParameters: GetIdsOfWorklogsDeletedSinceRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedWorklogs> {
        const response = await this.getIdsOfWorklogsDeletedSinceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of IDs and update timestamps for worklogs updated after a date and time.  This resource is paginated, with a limit of 1000 worklogs per page. Each page lists worklogs from oldest to youngest. If the number of items in the date range exceeds 1000, `until` indicates the timestamp of the youngest item on the page. Also, `nextPage` provides the URL for the next page of worklogs. The `lastPage` parameter is set to true on the last page of worklogs.  This resource does not return worklogs updated during the minute preceding the request.  **[Permissions](#permissions) required:** Permission to access Jira, however, worklogs are only returned where either of the following is true:   *  the worklog is set as *Viewable by All Users*.  *  the user is a member of a project role or group with permission to view the worklog.
     * Get IDs of updated worklogs
     */
    async getIdsOfWorklogsModifiedSinceRaw(requestParameters: GetIdsOfWorklogsModifiedSinceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedWorklogs>> {
        const queryParameters: any = {};

        if (requestParameters['since'] != null) {
            queryParameters['since'] = requestParameters['since'];
        }

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/worklog/updated`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a list of IDs and update timestamps for worklogs updated after a date and time.  This resource is paginated, with a limit of 1000 worklogs per page. Each page lists worklogs from oldest to youngest. If the number of items in the date range exceeds 1000, `until` indicates the timestamp of the youngest item on the page. Also, `nextPage` provides the URL for the next page of worklogs. The `lastPage` parameter is set to true on the last page of worklogs.  This resource does not return worklogs updated during the minute preceding the request.  **[Permissions](#permissions) required:** Permission to access Jira, however, worklogs are only returned where either of the following is true:   *  the worklog is set as *Viewable by All Users*.  *  the user is a member of a project role or group with permission to view the worklog.
     * Get IDs of updated worklogs
     */
    async getIdsOfWorklogsModifiedSince(requestParameters: GetIdsOfWorklogsModifiedSinceRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedWorklogs> {
        const response = await this.getIdsOfWorklogsModifiedSinceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns worklogs for an issue (ordered by created time), starting from the oldest worklog or from the worklog started on or after a date and time.  Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Workloads are only returned where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     * Get issue worklogs
     */
    async getIssueWorklogRaw(requestParameters: GetIssueWorklogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageOfWorklogs>> {
        if (requestParameters['issueIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'issueIdOrKey',
                'Required parameter "issueIdOrKey" was null or undefined when calling getIssueWorklog().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startAt'] != null) {
            queryParameters['startAt'] = requestParameters['startAt'];
        }

        if (requestParameters['maxResults'] != null) {
            queryParameters['maxResults'] = requestParameters['maxResults'];
        }

        if (requestParameters['startedAfter'] != null) {
            queryParameters['startedAfter'] = requestParameters['startedAfter'];
        }

        if (requestParameters['startedBefore'] != null) {
            queryParameters['startedBefore'] = requestParameters['startedBefore'];
        }

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/issue/{issueIdOrKey}/worklog`.replace(`{${"issueIdOrKey"}}`, encodeURIComponent(String(requestParameters['issueIdOrKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns worklogs for an issue (ordered by created time), starting from the oldest worklog or from the worklog started on or after a date and time.  Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Workloads are only returned where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     * Get issue worklogs
     */
    async getIssueWorklog(requestParameters: GetIssueWorklogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageOfWorklogs> {
        const response = await this.getIssueWorklogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a worklog.  Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     * Get worklog
     */
    async getWorklogRaw(requestParameters: GetWorklogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Worklog>> {
        if (requestParameters['issueIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'issueIdOrKey',
                'Required parameter "issueIdOrKey" was null or undefined when calling getWorklog().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getWorklog().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/issue/{issueIdOrKey}/worklog/{id}`.replace(`{${"issueIdOrKey"}}`, encodeURIComponent(String(requestParameters['issueIdOrKey']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a worklog.  Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     * Get worklog
     */
    async getWorklog(requestParameters: GetWorklogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Worklog> {
        const response = await this.getWorklogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns worklog details for a list of worklog IDs.  The returned list of worklogs is limited to 1000 items.  **[Permissions](#permissions) required:** Permission to access Jira, however, worklogs are only returned where either of the following is true:   *  the worklog is set as *Viewable by All Users*.  *  the user is a member of a project role or group with permission to view the worklog.
     * Get worklogs
     */
    async getWorklogsForIdsRaw(requestParameters: GetWorklogsForIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Worklog>>> {
        if (requestParameters['worklogIdsRequestBean'] == null) {
            throw new runtime.RequiredError(
                'worklogIdsRequestBean',
                'Required parameter "worklogIdsRequestBean" was null or undefined when calling getWorklogsForIds().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/worklog/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['worklogIdsRequestBean'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns worklog details for a list of worklog IDs.  The returned list of worklogs is limited to 1000 items.  **[Permissions](#permissions) required:** Permission to access Jira, however, worklogs are only returned where either of the following is true:   *  the worklog is set as *Viewable by All Users*.  *  the user is a member of a project role or group with permission to view the worklog.
     * Get worklogs
     */
    async getWorklogsForIds(requestParameters: GetWorklogsForIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Worklog>> {
        const response = await this.getWorklogsForIdsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a worklog.  Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  *Edit all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any worklog or *Edit own worklogs* to update worklogs created by the user.  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     * Update worklog
     */
    async updateWorklogRaw(requestParameters: UpdateWorklogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Worklog>> {
        if (requestParameters['issueIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'issueIdOrKey',
                'Required parameter "issueIdOrKey" was null or undefined when calling updateWorklog().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateWorklog().'
            );
        }

        if (requestParameters['worklog'] == null) {
            throw new runtime.RequiredError(
                'worklog',
                'Required parameter "worklog" was null or undefined when calling updateWorklog().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['notifyUsers'] != null) {
            queryParameters['notifyUsers'] = requestParameters['notifyUsers'];
        }

        if (requestParameters['adjustEstimate'] != null) {
            queryParameters['adjustEstimate'] = requestParameters['adjustEstimate'];
        }

        if (requestParameters['newEstimate'] != null) {
            queryParameters['newEstimate'] = requestParameters['newEstimate'];
        }

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand'];
        }

        if (requestParameters['overrideEditableFlag'] != null) {
            queryParameters['overrideEditableFlag'] = requestParameters['overrideEditableFlag'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/issue/{issueIdOrKey}/worklog/{id}`.replace(`{${"issueIdOrKey"}}`, encodeURIComponent(String(requestParameters['issueIdOrKey']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['worklog'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates a worklog.  Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  *Edit all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any worklog or *Edit own worklogs* to update worklogs created by the user.  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     * Update worklog
     */
    async updateWorklog(requestParameters: UpdateWorklogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Worklog> {
        const response = await this.updateWorklogRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AddWorklogAdjustEstimateEnum = {
    New: 'new',
    Leave: 'leave',
    Manual: 'manual',
    Auto: 'auto'
} as const;
export type AddWorklogAdjustEstimateEnum = typeof AddWorklogAdjustEstimateEnum[keyof typeof AddWorklogAdjustEstimateEnum];
/**
 * @export
 */
export const BulkDeleteWorklogsAdjustEstimateEnum = {
    Leave: 'leave',
    Auto: 'auto'
} as const;
export type BulkDeleteWorklogsAdjustEstimateEnum = typeof BulkDeleteWorklogsAdjustEstimateEnum[keyof typeof BulkDeleteWorklogsAdjustEstimateEnum];
/**
 * @export
 */
export const BulkMoveWorklogsAdjustEstimateEnum = {
    Leave: 'leave',
    Auto: 'auto'
} as const;
export type BulkMoveWorklogsAdjustEstimateEnum = typeof BulkMoveWorklogsAdjustEstimateEnum[keyof typeof BulkMoveWorklogsAdjustEstimateEnum];
/**
 * @export
 */
export const DeleteWorklogAdjustEstimateEnum = {
    New: 'new',
    Leave: 'leave',
    Manual: 'manual',
    Auto: 'auto'
} as const;
export type DeleteWorklogAdjustEstimateEnum = typeof DeleteWorklogAdjustEstimateEnum[keyof typeof DeleteWorklogAdjustEstimateEnum];
/**
 * @export
 */
export const UpdateWorklogAdjustEstimateEnum = {
    New: 'new',
    Leave: 'leave',
    Manual: 'manual',
    Auto: 'auto'
} as const;
export type UpdateWorklogAdjustEstimateEnum = typeof UpdateWorklogAdjustEstimateEnum[keyof typeof UpdateWorklogAdjustEstimateEnum];
