/* tslint:disable */
/* eslint-disable */
/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-006326f44f7f2ca50c1f9c8c88f70b27eb18a140
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  StatusCategory,
} from '../models/index';

export interface GetStatusCategoryRequest {
    idOrKey: string;
}

/**
 * 
 */
export class WorkflowStatusCategoriesApi extends runtime.BaseAPI {

    /**
     * Returns a list of all status categories.  **[Permissions](#permissions) required:** Permission to access Jira.
     * Get all status categories
     */
    async getStatusCategoriesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StatusCategory>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/statuscategory`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a list of all status categories.  **[Permissions](#permissions) required:** Permission to access Jira.
     * Get all status categories
     */
    async getStatusCategories(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StatusCategory>> {
        const response = await this.getStatusCategoriesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns a status category. Status categories provided a mechanism for categorizing [statuses](#api-rest-api-3-status-idOrName-get).  **[Permissions](#permissions) required:** Permission to access Jira.
     * Get status category
     */
    async getStatusCategoryRaw(requestParameters: GetStatusCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StatusCategory>> {
        if (requestParameters['idOrKey'] == null) {
            throw new runtime.RequiredError(
                'idOrKey',
                'Required parameter "idOrKey" was null or undefined when calling getStatusCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/statuscategory/{idOrKey}`.replace(`{${"idOrKey"}}`, encodeURIComponent(String(requestParameters['idOrKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a status category. Status categories provided a mechanism for categorizing [statuses](#api-rest-api-3-status-idOrName-get).  **[Permissions](#permissions) required:** Permission to access Jira.
     * Get status category
     */
    async getStatusCategory(requestParameters: GetStatusCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StatusCategory> {
        const response = await this.getStatusCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
