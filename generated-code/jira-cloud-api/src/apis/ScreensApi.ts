/* tslint:disable */
/* eslint-disable */
/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-006326f44f7f2ca50c1f9c8c88f70b27eb18a140
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PageBeanScreen,
  PageBeanScreenWithTab,
  Screen,
  ScreenDetails,
  ScreenableField,
  UpdateScreenDetails,
} from '../models/index';

export interface AddFieldToDefaultScreenRequest {
    fieldId: string;
}

export interface CreateScreenRequest {
    screenDetails: ScreenDetails;
}

export interface DeleteScreenRequest {
    screenId: number;
}

export interface GetAvailableScreenFieldsRequest {
    screenId: number;
}

export interface GetScreensRequest {
    startAt?: number;
    maxResults?: number;
    id?: Array<number>;
    queryString?: string;
    scope?: Array<GetScreensScopeEnum>;
    orderBy?: GetScreensOrderByEnum;
}

export interface GetScreensForFieldRequest {
    fieldId: string;
    startAt?: number;
    maxResults?: number;
    expand?: string;
}

export interface UpdateScreenRequest {
    screenId: number;
    updateScreenDetails: UpdateScreenDetails;
}

/**
 * 
 */
export class ScreensApi extends runtime.BaseAPI {

    /**
     * Adds a field to the default tab of the default screen.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Add field to default screen
     */
    async addFieldToDefaultScreenRaw(requestParameters: AddFieldToDefaultScreenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['fieldId'] == null) {
            throw new runtime.RequiredError(
                'fieldId',
                'Required parameter "fieldId" was null or undefined when calling addFieldToDefaultScreen().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-project"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/screens/addToDefault/{fieldId}`.replace(`{${"fieldId"}}`, encodeURIComponent(String(requestParameters['fieldId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Adds a field to the default tab of the default screen.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Add field to default screen
     */
    async addFieldToDefaultScreen(requestParameters: AddFieldToDefaultScreenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.addFieldToDefaultScreenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a screen with a default field tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Create screen
     */
    async createScreenRaw(requestParameters: CreateScreenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Screen>> {
        if (requestParameters['screenDetails'] == null) {
            throw new runtime.RequiredError(
                'screenDetails',
                'Required parameter "screenDetails" was null or undefined when calling createScreen().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-project"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/screens`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['screenDetails'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a screen with a default field tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Create screen
     */
    async createScreen(requestParameters: CreateScreenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Screen> {
        const response = await this.createScreenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a screen. A screen cannot be deleted if it is used in a screen scheme, workflow, or workflow draft.  Only screens used in classic projects can be deleted.
     * Delete screen
     */
    async deleteScreenRaw(requestParameters: DeleteScreenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['screenId'] == null) {
            throw new runtime.RequiredError(
                'screenId',
                'Required parameter "screenId" was null or undefined when calling deleteScreen().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-project"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/screens/{screenId}`.replace(`{${"screenId"}}`, encodeURIComponent(String(requestParameters['screenId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a screen. A screen cannot be deleted if it is used in a screen scheme, workflow, or workflow draft.  Only screens used in classic projects can be deleted.
     * Delete screen
     */
    async deleteScreen(requestParameters: DeleteScreenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteScreenRaw(requestParameters, initOverrides);
    }

    /**
     * Returns the fields that can be added to a tab on a screen.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get available screen fields
     */
    async getAvailableScreenFieldsRaw(requestParameters: GetAvailableScreenFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ScreenableField>>> {
        if (requestParameters['screenId'] == null) {
            throw new runtime.RequiredError(
                'screenId',
                'Required parameter "screenId" was null or undefined when calling getAvailableScreenFields().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-project"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/screens/{screenId}/availableFields`.replace(`{${"screenId"}}`, encodeURIComponent(String(requestParameters['screenId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the fields that can be added to a tab on a screen.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get available screen fields
     */
    async getAvailableScreenFields(requestParameters: GetAvailableScreenFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ScreenableField>> {
        const response = await this.getAvailableScreenFieldsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a [paginated](#pagination) list of all screens or those specified by one or more screen IDs.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get screens
     */
    async getScreensRaw(requestParameters: GetScreensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageBeanScreen>> {
        const queryParameters: any = {};

        if (requestParameters['startAt'] != null) {
            queryParameters['startAt'] = requestParameters['startAt'];
        }

        if (requestParameters['maxResults'] != null) {
            queryParameters['maxResults'] = requestParameters['maxResults'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['queryString'] != null) {
            queryParameters['queryString'] = requestParameters['queryString'];
        }

        if (requestParameters['scope'] != null) {
            queryParameters['scope'] = requestParameters['scope'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-project"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/screens`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a [paginated](#pagination) list of all screens or those specified by one or more screen IDs.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get screens
     */
    async getScreens(requestParameters: GetScreensRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageBeanScreen> {
        const response = await this.getScreensRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a [paginated](#pagination) list of the screens a field is used in.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get screens for a field
     */
    async getScreensForFieldRaw(requestParameters: GetScreensForFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageBeanScreenWithTab>> {
        if (requestParameters['fieldId'] == null) {
            throw new runtime.RequiredError(
                'fieldId',
                'Required parameter "fieldId" was null or undefined when calling getScreensForField().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startAt'] != null) {
            queryParameters['startAt'] = requestParameters['startAt'];
        }

        if (requestParameters['maxResults'] != null) {
            queryParameters['maxResults'] = requestParameters['maxResults'];
        }

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-project"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/field/{fieldId}/screens`.replace(`{${"fieldId"}}`, encodeURIComponent(String(requestParameters['fieldId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a [paginated](#pagination) list of the screens a field is used in.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get screens for a field
     */
    async getScreensForField(requestParameters: GetScreensForFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageBeanScreenWithTab> {
        const response = await this.getScreensForFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a screen. Only screens used in classic projects can be updated.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Update screen
     */
    async updateScreenRaw(requestParameters: UpdateScreenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Screen>> {
        if (requestParameters['screenId'] == null) {
            throw new runtime.RequiredError(
                'screenId',
                'Required parameter "screenId" was null or undefined when calling updateScreen().'
            );
        }

        if (requestParameters['updateScreenDetails'] == null) {
            throw new runtime.RequiredError(
                'updateScreenDetails',
                'Required parameter "updateScreenDetails" was null or undefined when calling updateScreen().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-project"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/screens/{screenId}`.replace(`{${"screenId"}}`, encodeURIComponent(String(requestParameters['screenId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['updateScreenDetails'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates a screen. Only screens used in classic projects can be updated.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Update screen
     */
    async updateScreen(requestParameters: UpdateScreenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Screen> {
        const response = await this.updateScreenRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetScreensScopeEnum = {
    Global: 'GLOBAL',
    Template: 'TEMPLATE',
    Project: 'PROJECT'
} as const;
export type GetScreensScopeEnum = typeof GetScreensScopeEnum[keyof typeof GetScreensScopeEnum];
/**
 * @export
 */
export const GetScreensOrderByEnum = {
    Name: 'name',
    Name2Desc: '-name',
    Name3Asc: '+name',
    Id: 'id',
    Id2Desc: '-id',
    Id3Asc: '+id'
} as const;
export type GetScreensOrderByEnum = typeof GetScreensOrderByEnum[keyof typeof GetScreensOrderByEnum];
