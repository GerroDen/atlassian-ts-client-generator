/* tslint:disable */
/* eslint-disable */
/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-006326f44f7f2ca50c1f9c8c88f70b27eb18a140
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateCustomFieldContext,
  CustomFieldContextDefaultValueUpdate,
  CustomFieldContextUpdateDetails,
  IssueTypeIds,
  PageBeanContextForProjectAndIssueType,
  PageBeanCustomFieldContext,
  PageBeanCustomFieldContextDefaultValue,
  PageBeanCustomFieldContextProjectMapping,
  PageBeanIssueTypeToContextMapping,
  ProjectIds,
  ProjectIssueTypeMappings,
} from '../models/index';

export interface AddIssueTypesToContextRequest {
    fieldId: string;
    contextId: number;
    issueTypeIds: IssueTypeIds;
}

export interface AssignProjectsToCustomFieldContextRequest {
    fieldId: string;
    contextId: number;
    projectIds: ProjectIds;
}

export interface CreateCustomFieldContextRequest {
    fieldId: string;
    createCustomFieldContext: Omit<CreateCustomFieldContext, 'id'>;
}

export interface DeleteCustomFieldContextRequest {
    fieldId: string;
    contextId: number;
}

export interface GetContextsForFieldRequest {
    fieldId: string;
    isAnyIssueType?: boolean;
    isGlobalContext?: boolean;
    contextId?: Array<number>;
    startAt?: number;
    maxResults?: number;
}

export interface GetCustomFieldContextsForProjectsAndIssueTypesRequest {
    fieldId: string;
    projectIssueTypeMappings: ProjectIssueTypeMappings;
    startAt?: number;
    maxResults?: number;
}

export interface GetDefaultValuesRequest {
    fieldId: string;
    contextId?: Array<number>;
    startAt?: number;
    maxResults?: number;
}

export interface GetIssueTypeMappingsForContextsRequest {
    fieldId: string;
    contextId?: Array<number>;
    startAt?: number;
    maxResults?: number;
}

export interface GetProjectContextMappingRequest {
    fieldId: string;
    contextId?: Array<number>;
    startAt?: number;
    maxResults?: number;
}

export interface RemoveCustomFieldContextFromProjectsRequest {
    fieldId: string;
    contextId: number;
    projectIds: ProjectIds;
}

export interface RemoveIssueTypesFromContextRequest {
    fieldId: string;
    contextId: number;
    issueTypeIds: IssueTypeIds;
}

export interface SetDefaultValuesRequest {
    fieldId: string;
    customFieldContextDefaultValueUpdate: CustomFieldContextDefaultValueUpdate;
}

export interface UpdateCustomFieldContextRequest {
    fieldId: string;
    contextId: number;
    customFieldContextUpdateDetails: CustomFieldContextUpdateDetails;
}

/**
 * 
 */
export class IssueCustomFieldContextsApi extends runtime.BaseAPI {

    /**
     * Adds issue types to a custom field context, appending the issue types to the issue types list.  A custom field context without any issue types applies to all issue types. Adding issue types to such a custom field context would result in it applying to only the listed issue types.  If any of the issue types exists in the custom field context, the operation fails and no issue types are added.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Add issue types to context
     */
    async addIssueTypesToContextRaw(requestParameters: AddIssueTypesToContextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['fieldId'] == null) {
            throw new runtime.RequiredError(
                'fieldId',
                'Required parameter "fieldId" was null or undefined when calling addIssueTypesToContext().'
            );
        }

        if (requestParameters['contextId'] == null) {
            throw new runtime.RequiredError(
                'contextId',
                'Required parameter "contextId" was null or undefined when calling addIssueTypesToContext().'
            );
        }

        if (requestParameters['issueTypeIds'] == null) {
            throw new runtime.RequiredError(
                'issueTypeIds',
                'Required parameter "issueTypeIds" was null or undefined when calling addIssueTypesToContext().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/field/{fieldId}/context/{contextId}/issuetype`.replace(`{${"fieldId"}}`, encodeURIComponent(String(requestParameters['fieldId']))).replace(`{${"contextId"}}`, encodeURIComponent(String(requestParameters['contextId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['issueTypeIds'],
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Adds issue types to a custom field context, appending the issue types to the issue types list.  A custom field context without any issue types applies to all issue types. Adding issue types to such a custom field context would result in it applying to only the listed issue types.  If any of the issue types exists in the custom field context, the operation fails and no issue types are added.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Add issue types to context
     */
    async addIssueTypesToContext(requestParameters: AddIssueTypesToContextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.addIssueTypesToContextRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assigns a custom field context to projects.  If any project in the request is assigned to any context of the custom field, the operation fails.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Assign custom field context to projects
     */
    async assignProjectsToCustomFieldContextRaw(requestParameters: AssignProjectsToCustomFieldContextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['fieldId'] == null) {
            throw new runtime.RequiredError(
                'fieldId',
                'Required parameter "fieldId" was null or undefined when calling assignProjectsToCustomFieldContext().'
            );
        }

        if (requestParameters['contextId'] == null) {
            throw new runtime.RequiredError(
                'contextId',
                'Required parameter "contextId" was null or undefined when calling assignProjectsToCustomFieldContext().'
            );
        }

        if (requestParameters['projectIds'] == null) {
            throw new runtime.RequiredError(
                'projectIds',
                'Required parameter "projectIds" was null or undefined when calling assignProjectsToCustomFieldContext().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/field/{fieldId}/context/{contextId}/project`.replace(`{${"fieldId"}}`, encodeURIComponent(String(requestParameters['fieldId']))).replace(`{${"contextId"}}`, encodeURIComponent(String(requestParameters['contextId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['projectIds'],
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Assigns a custom field context to projects.  If any project in the request is assigned to any context of the custom field, the operation fails.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Assign custom field context to projects
     */
    async assignProjectsToCustomFieldContext(requestParameters: AssignProjectsToCustomFieldContextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.assignProjectsToCustomFieldContextRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a custom field context.  If `projectIds` is empty, a global context is created. A global context is one that applies to all project. If `issueTypeIds` is empty, the context applies to all issue types.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Create custom field context
     */
    async createCustomFieldContextRaw(requestParameters: CreateCustomFieldContextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateCustomFieldContext>> {
        if (requestParameters['fieldId'] == null) {
            throw new runtime.RequiredError(
                'fieldId',
                'Required parameter "fieldId" was null or undefined when calling createCustomFieldContext().'
            );
        }

        if (requestParameters['createCustomFieldContext'] == null) {
            throw new runtime.RequiredError(
                'createCustomFieldContext',
                'Required parameter "createCustomFieldContext" was null or undefined when calling createCustomFieldContext().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/field/{fieldId}/context`.replace(`{${"fieldId"}}`, encodeURIComponent(String(requestParameters['fieldId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['createCustomFieldContext'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a custom field context.  If `projectIds` is empty, a global context is created. A global context is one that applies to all project. If `issueTypeIds` is empty, the context applies to all issue types.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Create custom field context
     */
    async createCustomFieldContext(requestParameters: CreateCustomFieldContextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateCustomFieldContext> {
        const response = await this.createCustomFieldContextRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a [ custom field context](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Delete custom field context
     */
    async deleteCustomFieldContextRaw(requestParameters: DeleteCustomFieldContextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['fieldId'] == null) {
            throw new runtime.RequiredError(
                'fieldId',
                'Required parameter "fieldId" was null or undefined when calling deleteCustomFieldContext().'
            );
        }

        if (requestParameters['contextId'] == null) {
            throw new runtime.RequiredError(
                'contextId',
                'Required parameter "contextId" was null or undefined when calling deleteCustomFieldContext().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/field/{fieldId}/context/{contextId}`.replace(`{${"fieldId"}}`, encodeURIComponent(String(requestParameters['fieldId']))).replace(`{${"contextId"}}`, encodeURIComponent(String(requestParameters['contextId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Deletes a [ custom field context](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Delete custom field context
     */
    async deleteCustomFieldContext(requestParameters: DeleteCustomFieldContextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteCustomFieldContextRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a [paginated](#pagination) list of [ contexts](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html) for a custom field. Contexts can be returned as follows:   *  With no other parameters set, all contexts.  *  By defining `id` only, all contexts from the list of IDs.  *  By defining `isAnyIssueType`, limit the list of contexts returned to either those that apply to all issue types (true) or those that apply to only a subset of issue types (false)  *  By defining `isGlobalContext`, limit the list of contexts return to either those that apply to all projects (global contexts) (true) or those that apply to only a subset of projects (false).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get custom field contexts
     */
    async getContextsForFieldRaw(requestParameters: GetContextsForFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageBeanCustomFieldContext>> {
        if (requestParameters['fieldId'] == null) {
            throw new runtime.RequiredError(
                'fieldId',
                'Required parameter "fieldId" was null or undefined when calling getContextsForField().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['isAnyIssueType'] != null) {
            queryParameters['isAnyIssueType'] = requestParameters['isAnyIssueType'];
        }

        if (requestParameters['isGlobalContext'] != null) {
            queryParameters['isGlobalContext'] = requestParameters['isGlobalContext'];
        }

        if (requestParameters['contextId'] != null) {
            queryParameters['contextId'] = requestParameters['contextId'];
        }

        if (requestParameters['startAt'] != null) {
            queryParameters['startAt'] = requestParameters['startAt'];
        }

        if (requestParameters['maxResults'] != null) {
            queryParameters['maxResults'] = requestParameters['maxResults'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/field/{fieldId}/context`.replace(`{${"fieldId"}}`, encodeURIComponent(String(requestParameters['fieldId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a [paginated](#pagination) list of [ contexts](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html) for a custom field. Contexts can be returned as follows:   *  With no other parameters set, all contexts.  *  By defining `id` only, all contexts from the list of IDs.  *  By defining `isAnyIssueType`, limit the list of contexts returned to either those that apply to all issue types (true) or those that apply to only a subset of issue types (false)  *  By defining `isGlobalContext`, limit the list of contexts return to either those that apply to all projects (global contexts) (true) or those that apply to only a subset of projects (false).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get custom field contexts
     */
    async getContextsForField(requestParameters: GetContextsForFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageBeanCustomFieldContext> {
        const response = await this.getContextsForFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a [paginated](#pagination) list of project and issue type mappings and, for each mapping, the ID of a [custom field context](https://confluence.atlassian.com/x/k44fOw) that applies to the project and issue type.  If there is no custom field context assigned to the project then, if present, the custom field context that applies to all projects is returned if it also applies to the issue type or all issue types. If a custom field context is not found, the returned custom field context ID is `null`.  Duplicate project and issue type mappings cannot be provided in the request.  The order of the returned values is the same as provided in the request.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get custom field contexts for projects and issue types
     */
    async getCustomFieldContextsForProjectsAndIssueTypesRaw(requestParameters: GetCustomFieldContextsForProjectsAndIssueTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageBeanContextForProjectAndIssueType>> {
        if (requestParameters['fieldId'] == null) {
            throw new runtime.RequiredError(
                'fieldId',
                'Required parameter "fieldId" was null or undefined when calling getCustomFieldContextsForProjectsAndIssueTypes().'
            );
        }

        if (requestParameters['projectIssueTypeMappings'] == null) {
            throw new runtime.RequiredError(
                'projectIssueTypeMappings',
                'Required parameter "projectIssueTypeMappings" was null or undefined when calling getCustomFieldContextsForProjectsAndIssueTypes().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startAt'] != null) {
            queryParameters['startAt'] = requestParameters['startAt'];
        }

        if (requestParameters['maxResults'] != null) {
            queryParameters['maxResults'] = requestParameters['maxResults'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/field/{fieldId}/context/mapping`.replace(`{${"fieldId"}}`, encodeURIComponent(String(requestParameters['fieldId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['projectIssueTypeMappings'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a [paginated](#pagination) list of project and issue type mappings and, for each mapping, the ID of a [custom field context](https://confluence.atlassian.com/x/k44fOw) that applies to the project and issue type.  If there is no custom field context assigned to the project then, if present, the custom field context that applies to all projects is returned if it also applies to the issue type or all issue types. If a custom field context is not found, the returned custom field context ID is `null`.  Duplicate project and issue type mappings cannot be provided in the request.  The order of the returned values is the same as provided in the request.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get custom field contexts for projects and issue types
     */
    async getCustomFieldContextsForProjectsAndIssueTypes(requestParameters: GetCustomFieldContextsForProjectsAndIssueTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageBeanContextForProjectAndIssueType> {
        const response = await this.getCustomFieldContextsForProjectsAndIssueTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a [paginated](#pagination) list of defaults for a custom field. The results can be filtered by `contextId`, otherwise all values are returned. If no defaults are set for a context, nothing is returned.   The returned object depends on type of the custom field:   *  `CustomFieldContextDefaultValueDate` (type `datepicker`) for date fields.  *  `CustomFieldContextDefaultValueDateTime` (type `datetimepicker`) for date-time fields.  *  `CustomFieldContextDefaultValueSingleOption` (type `option.single`) for single choice select lists and radio buttons.  *  `CustomFieldContextDefaultValueMultipleOption` (type `option.multiple`) for multiple choice select lists and checkboxes.  *  `CustomFieldContextDefaultValueCascadingOption` (type `option.cascading`) for cascading select lists.  *  `CustomFieldContextSingleUserPickerDefaults` (type `single.user.select`) for single users.  *  `CustomFieldContextDefaultValueMultiUserPicker` (type `multi.user.select`) for user lists.  *  `CustomFieldContextDefaultValueSingleGroupPicker` (type `grouppicker.single`) for single choice group pickers.  *  `CustomFieldContextDefaultValueMultipleGroupPicker` (type `grouppicker.multiple`) for multiple choice group pickers.  *  `CustomFieldContextDefaultValueURL` (type `url`) for URLs.  *  `CustomFieldContextDefaultValueProject` (type `project`) for project pickers.  *  `CustomFieldContextDefaultValueFloat` (type `float`) for floats (floating-point numbers).  *  `CustomFieldContextDefaultValueLabels` (type `labels`) for labels.  *  `CustomFieldContextDefaultValueTextField` (type `textfield`) for text fields.  *  `CustomFieldContextDefaultValueTextArea` (type `textarea`) for text area fields.  *  `CustomFieldContextDefaultValueReadOnly` (type `readonly`) for read only (text) fields.  *  `CustomFieldContextDefaultValueMultipleVersion` (type `version.multiple`) for single choice version pickers.  *  `CustomFieldContextDefaultValueSingleVersion` (type `version.single`) for multiple choice version pickers.  Forge custom fields [types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/#data-types) are also supported, returning:   *  `CustomFieldContextDefaultValueForgeStringFieldBean` (type `forge.string`) for Forge string fields.  *  `CustomFieldContextDefaultValueForgeMultiStringFieldBean` (type `forge.string.list`) for Forge string collection fields.  *  `CustomFieldContextDefaultValueForgeObjectFieldBean` (type `forge.object`) for Forge object fields.  *  `CustomFieldContextDefaultValueForgeDateTimeFieldBean` (type `forge.datetime`) for Forge date-time fields.  *  `CustomFieldContextDefaultValueForgeGroupFieldBean` (type `forge.group`) for Forge group fields.  *  `CustomFieldContextDefaultValueForgeMultiGroupFieldBean` (type `forge.group.list`) for Forge group collection fields.  *  `CustomFieldContextDefaultValueForgeNumberFieldBean` (type `forge.number`) for Forge number fields.  *  `CustomFieldContextDefaultValueForgeUserFieldBean` (type `forge.user`) for Forge user fields.  *  `CustomFieldContextDefaultValueForgeMultiUserFieldBean` (type `forge.user.list`) for Forge user collection fields.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get custom field contexts default values
     */
    async getDefaultValuesRaw(requestParameters: GetDefaultValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageBeanCustomFieldContextDefaultValue>> {
        if (requestParameters['fieldId'] == null) {
            throw new runtime.RequiredError(
                'fieldId',
                'Required parameter "fieldId" was null or undefined when calling getDefaultValues().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['contextId'] != null) {
            queryParameters['contextId'] = requestParameters['contextId'];
        }

        if (requestParameters['startAt'] != null) {
            queryParameters['startAt'] = requestParameters['startAt'];
        }

        if (requestParameters['maxResults'] != null) {
            queryParameters['maxResults'] = requestParameters['maxResults'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/field/{fieldId}/context/defaultValue`.replace(`{${"fieldId"}}`, encodeURIComponent(String(requestParameters['fieldId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a [paginated](#pagination) list of defaults for a custom field. The results can be filtered by `contextId`, otherwise all values are returned. If no defaults are set for a context, nothing is returned.   The returned object depends on type of the custom field:   *  `CustomFieldContextDefaultValueDate` (type `datepicker`) for date fields.  *  `CustomFieldContextDefaultValueDateTime` (type `datetimepicker`) for date-time fields.  *  `CustomFieldContextDefaultValueSingleOption` (type `option.single`) for single choice select lists and radio buttons.  *  `CustomFieldContextDefaultValueMultipleOption` (type `option.multiple`) for multiple choice select lists and checkboxes.  *  `CustomFieldContextDefaultValueCascadingOption` (type `option.cascading`) for cascading select lists.  *  `CustomFieldContextSingleUserPickerDefaults` (type `single.user.select`) for single users.  *  `CustomFieldContextDefaultValueMultiUserPicker` (type `multi.user.select`) for user lists.  *  `CustomFieldContextDefaultValueSingleGroupPicker` (type `grouppicker.single`) for single choice group pickers.  *  `CustomFieldContextDefaultValueMultipleGroupPicker` (type `grouppicker.multiple`) for multiple choice group pickers.  *  `CustomFieldContextDefaultValueURL` (type `url`) for URLs.  *  `CustomFieldContextDefaultValueProject` (type `project`) for project pickers.  *  `CustomFieldContextDefaultValueFloat` (type `float`) for floats (floating-point numbers).  *  `CustomFieldContextDefaultValueLabels` (type `labels`) for labels.  *  `CustomFieldContextDefaultValueTextField` (type `textfield`) for text fields.  *  `CustomFieldContextDefaultValueTextArea` (type `textarea`) for text area fields.  *  `CustomFieldContextDefaultValueReadOnly` (type `readonly`) for read only (text) fields.  *  `CustomFieldContextDefaultValueMultipleVersion` (type `version.multiple`) for single choice version pickers.  *  `CustomFieldContextDefaultValueSingleVersion` (type `version.single`) for multiple choice version pickers.  Forge custom fields [types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/#data-types) are also supported, returning:   *  `CustomFieldContextDefaultValueForgeStringFieldBean` (type `forge.string`) for Forge string fields.  *  `CustomFieldContextDefaultValueForgeMultiStringFieldBean` (type `forge.string.list`) for Forge string collection fields.  *  `CustomFieldContextDefaultValueForgeObjectFieldBean` (type `forge.object`) for Forge object fields.  *  `CustomFieldContextDefaultValueForgeDateTimeFieldBean` (type `forge.datetime`) for Forge date-time fields.  *  `CustomFieldContextDefaultValueForgeGroupFieldBean` (type `forge.group`) for Forge group fields.  *  `CustomFieldContextDefaultValueForgeMultiGroupFieldBean` (type `forge.group.list`) for Forge group collection fields.  *  `CustomFieldContextDefaultValueForgeNumberFieldBean` (type `forge.number`) for Forge number fields.  *  `CustomFieldContextDefaultValueForgeUserFieldBean` (type `forge.user`) for Forge user fields.  *  `CustomFieldContextDefaultValueForgeMultiUserFieldBean` (type `forge.user.list`) for Forge user collection fields.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get custom field contexts default values
     */
    async getDefaultValues(requestParameters: GetDefaultValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageBeanCustomFieldContextDefaultValue> {
        const response = await this.getDefaultValuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a [paginated](#pagination) list of context to issue type mappings for a custom field. Mappings are returned for all contexts or a list of contexts. Mappings are ordered first by context ID and then by issue type ID.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get issue types for custom field context
     */
    async getIssueTypeMappingsForContextsRaw(requestParameters: GetIssueTypeMappingsForContextsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageBeanIssueTypeToContextMapping>> {
        if (requestParameters['fieldId'] == null) {
            throw new runtime.RequiredError(
                'fieldId',
                'Required parameter "fieldId" was null or undefined when calling getIssueTypeMappingsForContexts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['contextId'] != null) {
            queryParameters['contextId'] = requestParameters['contextId'];
        }

        if (requestParameters['startAt'] != null) {
            queryParameters['startAt'] = requestParameters['startAt'];
        }

        if (requestParameters['maxResults'] != null) {
            queryParameters['maxResults'] = requestParameters['maxResults'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/field/{fieldId}/context/issuetypemapping`.replace(`{${"fieldId"}}`, encodeURIComponent(String(requestParameters['fieldId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a [paginated](#pagination) list of context to issue type mappings for a custom field. Mappings are returned for all contexts or a list of contexts. Mappings are ordered first by context ID and then by issue type ID.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get issue types for custom field context
     */
    async getIssueTypeMappingsForContexts(requestParameters: GetIssueTypeMappingsForContextsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageBeanIssueTypeToContextMapping> {
        const response = await this.getIssueTypeMappingsForContextsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a [paginated](#pagination) list of context to project mappings for a custom field. The result can be filtered by `contextId`. Otherwise, all mappings are returned. Invalid IDs are ignored.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get project mappings for custom field context
     */
    async getProjectContextMappingRaw(requestParameters: GetProjectContextMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageBeanCustomFieldContextProjectMapping>> {
        if (requestParameters['fieldId'] == null) {
            throw new runtime.RequiredError(
                'fieldId',
                'Required parameter "fieldId" was null or undefined when calling getProjectContextMapping().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['contextId'] != null) {
            queryParameters['contextId'] = requestParameters['contextId'];
        }

        if (requestParameters['startAt'] != null) {
            queryParameters['startAt'] = requestParameters['startAt'];
        }

        if (requestParameters['maxResults'] != null) {
            queryParameters['maxResults'] = requestParameters['maxResults'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/field/{fieldId}/context/projectmapping`.replace(`{${"fieldId"}}`, encodeURIComponent(String(requestParameters['fieldId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a [paginated](#pagination) list of context to project mappings for a custom field. The result can be filtered by `contextId`. Otherwise, all mappings are returned. Invalid IDs are ignored.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get project mappings for custom field context
     */
    async getProjectContextMapping(requestParameters: GetProjectContextMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageBeanCustomFieldContextProjectMapping> {
        const response = await this.getProjectContextMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a custom field context from projects.  A custom field context without any projects applies to all projects. Removing all projects from a custom field context would result in it applying to all projects.  If any project in the request is not assigned to the context, or the operation would result in two global contexts for the field, the operation fails.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Remove custom field context from projects
     */
    async removeCustomFieldContextFromProjectsRaw(requestParameters: RemoveCustomFieldContextFromProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['fieldId'] == null) {
            throw new runtime.RequiredError(
                'fieldId',
                'Required parameter "fieldId" was null or undefined when calling removeCustomFieldContextFromProjects().'
            );
        }

        if (requestParameters['contextId'] == null) {
            throw new runtime.RequiredError(
                'contextId',
                'Required parameter "contextId" was null or undefined when calling removeCustomFieldContextFromProjects().'
            );
        }

        if (requestParameters['projectIds'] == null) {
            throw new runtime.RequiredError(
                'projectIds',
                'Required parameter "projectIds" was null or undefined when calling removeCustomFieldContextFromProjects().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/field/{fieldId}/context/{contextId}/project/remove`.replace(`{${"fieldId"}}`, encodeURIComponent(String(requestParameters['fieldId']))).replace(`{${"contextId"}}`, encodeURIComponent(String(requestParameters['contextId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['projectIds'],
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Removes a custom field context from projects.  A custom field context without any projects applies to all projects. Removing all projects from a custom field context would result in it applying to all projects.  If any project in the request is not assigned to the context, or the operation would result in two global contexts for the field, the operation fails.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Remove custom field context from projects
     */
    async removeCustomFieldContextFromProjects(requestParameters: RemoveCustomFieldContextFromProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.removeCustomFieldContextFromProjectsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes issue types from a custom field context.  A custom field context without any issue types applies to all issue types.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Remove issue types from context
     */
    async removeIssueTypesFromContextRaw(requestParameters: RemoveIssueTypesFromContextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['fieldId'] == null) {
            throw new runtime.RequiredError(
                'fieldId',
                'Required parameter "fieldId" was null or undefined when calling removeIssueTypesFromContext().'
            );
        }

        if (requestParameters['contextId'] == null) {
            throw new runtime.RequiredError(
                'contextId',
                'Required parameter "contextId" was null or undefined when calling removeIssueTypesFromContext().'
            );
        }

        if (requestParameters['issueTypeIds'] == null) {
            throw new runtime.RequiredError(
                'issueTypeIds',
                'Required parameter "issueTypeIds" was null or undefined when calling removeIssueTypesFromContext().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/field/{fieldId}/context/{contextId}/issuetype/remove`.replace(`{${"fieldId"}}`, encodeURIComponent(String(requestParameters['fieldId']))).replace(`{${"contextId"}}`, encodeURIComponent(String(requestParameters['contextId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['issueTypeIds'],
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Removes issue types from a custom field context.  A custom field context without any issue types applies to all issue types.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Remove issue types from context
     */
    async removeIssueTypesFromContext(requestParameters: RemoveIssueTypesFromContextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.removeIssueTypesFromContextRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sets default for contexts of a custom field. Default are defined using these objects:   *  `CustomFieldContextDefaultValueDate` (type `datepicker`) for date fields.  *  `CustomFieldContextDefaultValueDateTime` (type `datetimepicker`) for date-time fields.  *  `CustomFieldContextDefaultValueSingleOption` (type `option.single`) for single choice select lists and radio buttons.  *  `CustomFieldContextDefaultValueMultipleOption` (type `option.multiple`) for multiple choice select lists and checkboxes.  *  `CustomFieldContextDefaultValueCascadingOption` (type `option.cascading`) for cascading select lists.  *  `CustomFieldContextSingleUserPickerDefaults` (type `single.user.select`) for single users.  *  `CustomFieldContextDefaultValueMultiUserPicker` (type `multi.user.select`) for user lists.  *  `CustomFieldContextDefaultValueSingleGroupPicker` (type `grouppicker.single`) for single choice group pickers.  *  `CustomFieldContextDefaultValueMultipleGroupPicker` (type `grouppicker.multiple`) for multiple choice group pickers.  *  `CustomFieldContextDefaultValueURL` (type `url`) for URLs.  *  `CustomFieldContextDefaultValueProject` (type `project`) for project pickers.  *  `CustomFieldContextDefaultValueFloat` (type `float`) for floats (floating-point numbers).  *  `CustomFieldContextDefaultValueLabels` (type `labels`) for labels.  *  `CustomFieldContextDefaultValueTextField` (type `textfield`) for text fields.  *  `CustomFieldContextDefaultValueTextArea` (type `textarea`) for text area fields.  *  `CustomFieldContextDefaultValueReadOnly` (type `readonly`) for read only (text) fields.  *  `CustomFieldContextDefaultValueMultipleVersion` (type `version.multiple`) for single choice version pickers.  *  `CustomFieldContextDefaultValueSingleVersion` (type `version.single`) for multiple choice version pickers.  Forge custom fields [types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/#data-types) are also supported, returning:   *  `CustomFieldContextDefaultValueForgeStringFieldBean` (type `forge.string`) for Forge string fields.  *  `CustomFieldContextDefaultValueForgeMultiStringFieldBean` (type `forge.string.list`) for Forge string collection fields.  *  `CustomFieldContextDefaultValueForgeObjectFieldBean` (type `forge.object`) for Forge object fields.  *  `CustomFieldContextDefaultValueForgeDateTimeFieldBean` (type `forge.datetime`) for Forge date-time fields.  *  `CustomFieldContextDefaultValueForgeGroupFieldBean` (type `forge.group`) for Forge group fields.  *  `CustomFieldContextDefaultValueForgeMultiGroupFieldBean` (type `forge.group.list`) for Forge group collection fields.  *  `CustomFieldContextDefaultValueForgeNumberFieldBean` (type `forge.number`) for Forge number fields.  *  `CustomFieldContextDefaultValueForgeUserFieldBean` (type `forge.user`) for Forge user fields.  *  `CustomFieldContextDefaultValueForgeMultiUserFieldBean` (type `forge.user.list`) for Forge user collection fields.  Only one type of default object can be included in a request. To remove a default for a context, set the default parameter to `null`.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Set custom field contexts default values
     */
    async setDefaultValuesRaw(requestParameters: SetDefaultValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['fieldId'] == null) {
            throw new runtime.RequiredError(
                'fieldId',
                'Required parameter "fieldId" was null or undefined when calling setDefaultValues().'
            );
        }

        if (requestParameters['customFieldContextDefaultValueUpdate'] == null) {
            throw new runtime.RequiredError(
                'customFieldContextDefaultValueUpdate',
                'Required parameter "customFieldContextDefaultValueUpdate" was null or undefined when calling setDefaultValues().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/field/{fieldId}/context/defaultValue`.replace(`{${"fieldId"}}`, encodeURIComponent(String(requestParameters['fieldId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['customFieldContextDefaultValueUpdate'],
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Sets default for contexts of a custom field. Default are defined using these objects:   *  `CustomFieldContextDefaultValueDate` (type `datepicker`) for date fields.  *  `CustomFieldContextDefaultValueDateTime` (type `datetimepicker`) for date-time fields.  *  `CustomFieldContextDefaultValueSingleOption` (type `option.single`) for single choice select lists and radio buttons.  *  `CustomFieldContextDefaultValueMultipleOption` (type `option.multiple`) for multiple choice select lists and checkboxes.  *  `CustomFieldContextDefaultValueCascadingOption` (type `option.cascading`) for cascading select lists.  *  `CustomFieldContextSingleUserPickerDefaults` (type `single.user.select`) for single users.  *  `CustomFieldContextDefaultValueMultiUserPicker` (type `multi.user.select`) for user lists.  *  `CustomFieldContextDefaultValueSingleGroupPicker` (type `grouppicker.single`) for single choice group pickers.  *  `CustomFieldContextDefaultValueMultipleGroupPicker` (type `grouppicker.multiple`) for multiple choice group pickers.  *  `CustomFieldContextDefaultValueURL` (type `url`) for URLs.  *  `CustomFieldContextDefaultValueProject` (type `project`) for project pickers.  *  `CustomFieldContextDefaultValueFloat` (type `float`) for floats (floating-point numbers).  *  `CustomFieldContextDefaultValueLabels` (type `labels`) for labels.  *  `CustomFieldContextDefaultValueTextField` (type `textfield`) for text fields.  *  `CustomFieldContextDefaultValueTextArea` (type `textarea`) for text area fields.  *  `CustomFieldContextDefaultValueReadOnly` (type `readonly`) for read only (text) fields.  *  `CustomFieldContextDefaultValueMultipleVersion` (type `version.multiple`) for single choice version pickers.  *  `CustomFieldContextDefaultValueSingleVersion` (type `version.single`) for multiple choice version pickers.  Forge custom fields [types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/#data-types) are also supported, returning:   *  `CustomFieldContextDefaultValueForgeStringFieldBean` (type `forge.string`) for Forge string fields.  *  `CustomFieldContextDefaultValueForgeMultiStringFieldBean` (type `forge.string.list`) for Forge string collection fields.  *  `CustomFieldContextDefaultValueForgeObjectFieldBean` (type `forge.object`) for Forge object fields.  *  `CustomFieldContextDefaultValueForgeDateTimeFieldBean` (type `forge.datetime`) for Forge date-time fields.  *  `CustomFieldContextDefaultValueForgeGroupFieldBean` (type `forge.group`) for Forge group fields.  *  `CustomFieldContextDefaultValueForgeMultiGroupFieldBean` (type `forge.group.list`) for Forge group collection fields.  *  `CustomFieldContextDefaultValueForgeNumberFieldBean` (type `forge.number`) for Forge number fields.  *  `CustomFieldContextDefaultValueForgeUserFieldBean` (type `forge.user`) for Forge user fields.  *  `CustomFieldContextDefaultValueForgeMultiUserFieldBean` (type `forge.user.list`) for Forge user collection fields.  Only one type of default object can be included in a request. To remove a default for a context, set the default parameter to `null`.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Set custom field contexts default values
     */
    async setDefaultValues(requestParameters: SetDefaultValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.setDefaultValuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a [ custom field context](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Update custom field context
     */
    async updateCustomFieldContextRaw(requestParameters: UpdateCustomFieldContextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['fieldId'] == null) {
            throw new runtime.RequiredError(
                'fieldId',
                'Required parameter "fieldId" was null or undefined when calling updateCustomFieldContext().'
            );
        }

        if (requestParameters['contextId'] == null) {
            throw new runtime.RequiredError(
                'contextId',
                'Required parameter "contextId" was null or undefined when calling updateCustomFieldContext().'
            );
        }

        if (requestParameters['customFieldContextUpdateDetails'] == null) {
            throw new runtime.RequiredError(
                'customFieldContextUpdateDetails',
                'Required parameter "customFieldContextUpdateDetails" was null or undefined when calling updateCustomFieldContext().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/field/{fieldId}/context/{contextId}`.replace(`{${"fieldId"}}`, encodeURIComponent(String(requestParameters['fieldId']))).replace(`{${"contextId"}}`, encodeURIComponent(String(requestParameters['contextId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['customFieldContextUpdateDetails'],
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Updates a [ custom field context](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Update custom field context
     */
    async updateCustomFieldContext(requestParameters: UpdateCustomFieldContextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.updateCustomFieldContextRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
