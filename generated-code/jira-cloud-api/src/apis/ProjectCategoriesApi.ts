/* tslint:disable */
/* eslint-disable */
/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-006326f44f7f2ca50c1f9c8c88f70b27eb18a140
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ProjectCategory,
  UpdatedProjectCategory,
} from '../models/index';

export interface CreateProjectCategoryRequest {
    projectCategory: Omit<ProjectCategory, 'id'|'self'>;
}

export interface GetProjectCategoryByIdRequest {
    id: number;
}

export interface RemoveProjectCategoryRequest {
    id: number;
}

export interface UpdateProjectCategoryRequest {
    id: number;
    projectCategory: Omit<ProjectCategory, 'id'|'self'>;
}

/**
 * 
 */
export class ProjectCategoriesApi extends runtime.BaseAPI {

    /**
     * Creates a project category.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Create project category
     */
    async createProjectCategoryRaw(requestParameters: CreateProjectCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectCategory>> {
        if (requestParameters['projectCategory'] == null) {
            throw new runtime.RequiredError(
                'projectCategory',
                'Required parameter "projectCategory" was null or undefined when calling createProjectCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-project"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/projectCategory`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['projectCategory'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a project category.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Create project category
     */
    async createProjectCategory(requestParameters: CreateProjectCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectCategory> {
        const response = await this.createProjectCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all project categories.  **[Permissions](#permissions) required:** Permission to access Jira.
     * Get all project categories
     */
    async getAllProjectCategoriesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProjectCategory>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/projectCategory`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns all project categories.  **[Permissions](#permissions) required:** Permission to access Jira.
     * Get all project categories
     */
    async getAllProjectCategories(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProjectCategory>> {
        const response = await this.getAllProjectCategoriesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns a project category.  **[Permissions](#permissions) required:** Permission to access Jira.
     * Get project category by ID
     */
    async getProjectCategoryByIdRaw(requestParameters: GetProjectCategoryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectCategory>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getProjectCategoryById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/projectCategory/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a project category.  **[Permissions](#permissions) required:** Permission to access Jira.
     * Get project category by ID
     */
    async getProjectCategoryById(requestParameters: GetProjectCategoryByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectCategory> {
        const response = await this.getProjectCategoryByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a project category.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Delete project category
     */
    async removeProjectCategoryRaw(requestParameters: RemoveProjectCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeProjectCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-project"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/projectCategory/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a project category.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Delete project category
     */
    async removeProjectCategory(requestParameters: RemoveProjectCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeProjectCategoryRaw(requestParameters, initOverrides);
    }

    /**
     * Updates a project category.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Update project category
     */
    async updateProjectCategoryRaw(requestParameters: UpdateProjectCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdatedProjectCategory>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateProjectCategory().'
            );
        }

        if (requestParameters['projectCategory'] == null) {
            throw new runtime.RequiredError(
                'projectCategory',
                'Required parameter "projectCategory" was null or undefined when calling updateProjectCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-project"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/projectCategory/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['projectCategory'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates a project category.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Update project category
     */
    async updateProjectCategory(requestParameters: UpdateProjectCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdatedProjectCategory> {
        const response = await this.updateProjectCategoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
