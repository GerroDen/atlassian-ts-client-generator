/* tslint:disable */
/* eslint-disable */
/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-006326f44f7f2ca50c1f9c8c88f70b27eb18a140
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreatePrioritySchemeDetails,
  PageBeanPrioritySchemeWithPaginatedPrioritiesAndProjects,
  PageBeanPriorityWithSequence,
  PageBeanProject,
  PrioritySchemeId,
  SuggestedMappingsRequestBean,
  UpdatePrioritySchemeRequestBean,
  UpdatePrioritySchemeResponseBean,
} from '../models/index';

export interface CreatePrioritySchemeRequest {
    createPrioritySchemeDetails: CreatePrioritySchemeDetails;
}

export interface DeletePrioritySchemeRequest {
    schemeId: number;
}

export interface GetAvailablePrioritiesByPrioritySchemeRequest {
    schemeId: string;
    startAt?: string;
    maxResults?: string;
    query?: string;
    exclude?: Array<string>;
}

export interface GetPrioritiesByPrioritySchemeRequest {
    schemeId: string;
    startAt?: string;
    maxResults?: string;
}

export interface GetPrioritySchemesRequest {
    startAt?: string;
    maxResults?: string;
    priorityId?: Array<number>;
    schemeId?: Array<number>;
    schemeName?: string;
    onlyDefault?: boolean;
    orderBy?: GetPrioritySchemesOrderByEnum;
    expand?: string;
}

export interface GetProjectsByPrioritySchemeRequest {
    schemeId: string;
    startAt?: string;
    maxResults?: string;
    projectId?: Array<number>;
    query?: string;
}

export interface SuggestedPrioritiesForMappingsRequest {
    suggestedMappingsRequestBean: SuggestedMappingsRequestBean;
}

export interface UpdatePrioritySchemeRequest {
    schemeId: number;
    updatePrioritySchemeRequestBean: UpdatePrioritySchemeRequestBean;
}

/**
 * 
 */
export class PrioritySchemesApi extends runtime.BaseAPI {

    /**
     * Creates a new priority scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Create priority scheme
     */
    async createPrioritySchemeRaw(requestParameters: CreatePrioritySchemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrioritySchemeId>> {
        if (requestParameters['createPrioritySchemeDetails'] == null) {
            throw new runtime.RequiredError(
                'createPrioritySchemeDetails',
                'Required parameter "createPrioritySchemeDetails" was null or undefined when calling createPriorityScheme().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/priorityscheme`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['createPrioritySchemeDetails'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new priority scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Create priority scheme
     */
    async createPriorityScheme(requestParameters: CreatePrioritySchemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrioritySchemeId> {
        const response = await this.createPrioritySchemeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a priority scheme.  This operation is only available for priority schemes without any associated projects. Any associated projects must be removed from the priority scheme before this operation can be performed.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Delete priority scheme
     */
    async deletePrioritySchemeRaw(requestParameters: DeletePrioritySchemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['schemeId'] == null) {
            throw new runtime.RequiredError(
                'schemeId',
                'Required parameter "schemeId" was null or undefined when calling deletePriorityScheme().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/priorityscheme/{schemeId}`.replace(`{${"schemeId"}}`, encodeURIComponent(String(requestParameters['schemeId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Deletes a priority scheme.  This operation is only available for priority schemes without any associated projects. Any associated projects must be removed from the priority scheme before this operation can be performed.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Delete priority scheme
     */
    async deletePriorityScheme(requestParameters: DeletePrioritySchemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deletePrioritySchemeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a [paginated](#pagination) list of priorities available for adding to a priority scheme.  **[Permissions](#permissions) required:** Permission to access Jira.
     * Get available priorities by priority scheme
     */
    async getAvailablePrioritiesByPrioritySchemeRaw(requestParameters: GetAvailablePrioritiesByPrioritySchemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageBeanPriorityWithSequence>> {
        if (requestParameters['schemeId'] == null) {
            throw new runtime.RequiredError(
                'schemeId',
                'Required parameter "schemeId" was null or undefined when calling getAvailablePrioritiesByPriorityScheme().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startAt'] != null) {
            queryParameters['startAt'] = requestParameters['startAt'];
        }

        if (requestParameters['maxResults'] != null) {
            queryParameters['maxResults'] = requestParameters['maxResults'];
        }

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['schemeId'] != null) {
            queryParameters['schemeId'] = requestParameters['schemeId'];
        }

        if (requestParameters['exclude'] != null) {
            queryParameters['exclude'] = requestParameters['exclude'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/priorityscheme/priorities/available`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a [paginated](#pagination) list of priorities available for adding to a priority scheme.  **[Permissions](#permissions) required:** Permission to access Jira.
     * Get available priorities by priority scheme
     */
    async getAvailablePrioritiesByPriorityScheme(requestParameters: GetAvailablePrioritiesByPrioritySchemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageBeanPriorityWithSequence> {
        const response = await this.getAvailablePrioritiesByPrioritySchemeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a [paginated](#pagination) list of priorities by scheme.  **[Permissions](#permissions) required:** Permission to access Jira.
     * Get priorities by priority scheme
     */
    async getPrioritiesByPrioritySchemeRaw(requestParameters: GetPrioritiesByPrioritySchemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageBeanPriorityWithSequence>> {
        if (requestParameters['schemeId'] == null) {
            throw new runtime.RequiredError(
                'schemeId',
                'Required parameter "schemeId" was null or undefined when calling getPrioritiesByPriorityScheme().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startAt'] != null) {
            queryParameters['startAt'] = requestParameters['startAt'];
        }

        if (requestParameters['maxResults'] != null) {
            queryParameters['maxResults'] = requestParameters['maxResults'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/priorityscheme/{schemeId}/priorities`.replace(`{${"schemeId"}}`, encodeURIComponent(String(requestParameters['schemeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a [paginated](#pagination) list of priorities by scheme.  **[Permissions](#permissions) required:** Permission to access Jira.
     * Get priorities by priority scheme
     */
    async getPrioritiesByPriorityScheme(requestParameters: GetPrioritiesByPrioritySchemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageBeanPriorityWithSequence> {
        const response = await this.getPrioritiesByPrioritySchemeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a [paginated](#pagination) list of priority schemes.  **[Permissions](#permissions) required:** Permission to access Jira.
     * Get priority schemes
     */
    async getPrioritySchemesRaw(requestParameters: GetPrioritySchemesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageBeanPrioritySchemeWithPaginatedPrioritiesAndProjects>> {
        const queryParameters: any = {};

        if (requestParameters['startAt'] != null) {
            queryParameters['startAt'] = requestParameters['startAt'];
        }

        if (requestParameters['maxResults'] != null) {
            queryParameters['maxResults'] = requestParameters['maxResults'];
        }

        if (requestParameters['priorityId'] != null) {
            queryParameters['priorityId'] = requestParameters['priorityId'];
        }

        if (requestParameters['schemeId'] != null) {
            queryParameters['schemeId'] = requestParameters['schemeId'];
        }

        if (requestParameters['schemeName'] != null) {
            queryParameters['schemeName'] = requestParameters['schemeName'];
        }

        if (requestParameters['onlyDefault'] != null) {
            queryParameters['onlyDefault'] = requestParameters['onlyDefault'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/priorityscheme`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a [paginated](#pagination) list of priority schemes.  **[Permissions](#permissions) required:** Permission to access Jira.
     * Get priority schemes
     */
    async getPrioritySchemes(requestParameters: GetPrioritySchemesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageBeanPrioritySchemeWithPaginatedPrioritiesAndProjects> {
        const response = await this.getPrioritySchemesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a [paginated](#pagination) list of projects by scheme.  **[Permissions](#permissions) required:** Permission to access Jira.
     * Get projects by priority scheme
     */
    async getProjectsByPrioritySchemeRaw(requestParameters: GetProjectsByPrioritySchemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageBeanProject>> {
        if (requestParameters['schemeId'] == null) {
            throw new runtime.RequiredError(
                'schemeId',
                'Required parameter "schemeId" was null or undefined when calling getProjectsByPriorityScheme().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startAt'] != null) {
            queryParameters['startAt'] = requestParameters['startAt'];
        }

        if (requestParameters['maxResults'] != null) {
            queryParameters['maxResults'] = requestParameters['maxResults'];
        }

        if (requestParameters['projectId'] != null) {
            queryParameters['projectId'] = requestParameters['projectId'];
        }

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/priorityscheme/{schemeId}/projects`.replace(`{${"schemeId"}}`, encodeURIComponent(String(requestParameters['schemeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a [paginated](#pagination) list of projects by scheme.  **[Permissions](#permissions) required:** Permission to access Jira.
     * Get projects by priority scheme
     */
    async getProjectsByPriorityScheme(requestParameters: GetProjectsByPrioritySchemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageBeanProject> {
        const response = await this.getProjectsByPrioritySchemeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a [paginated](#pagination) list of priorities that would require mapping, given a change in priorities or projects associated with a priority scheme.  **[Permissions](#permissions) required:** Permission to access Jira.
     * Suggested priorities for mappings
     */
    async suggestedPrioritiesForMappingsRaw(requestParameters: SuggestedPrioritiesForMappingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageBeanPriorityWithSequence>> {
        if (requestParameters['suggestedMappingsRequestBean'] == null) {
            throw new runtime.RequiredError(
                'suggestedMappingsRequestBean',
                'Required parameter "suggestedMappingsRequestBean" was null or undefined when calling suggestedPrioritiesForMappings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/priorityscheme/mappings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['suggestedMappingsRequestBean'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a [paginated](#pagination) list of priorities that would require mapping, given a change in priorities or projects associated with a priority scheme.  **[Permissions](#permissions) required:** Permission to access Jira.
     * Suggested priorities for mappings
     */
    async suggestedPrioritiesForMappings(requestParameters: SuggestedPrioritiesForMappingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageBeanPriorityWithSequence> {
        const response = await this.suggestedPrioritiesForMappingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a priority scheme. This includes its details, the lists of priorities and projects in it  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Update priority scheme
     */
    async updatePrioritySchemeRaw(requestParameters: UpdatePrioritySchemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdatePrioritySchemeResponseBean>> {
        if (requestParameters['schemeId'] == null) {
            throw new runtime.RequiredError(
                'schemeId',
                'Required parameter "schemeId" was null or undefined when calling updatePriorityScheme().'
            );
        }

        if (requestParameters['updatePrioritySchemeRequestBean'] == null) {
            throw new runtime.RequiredError(
                'updatePrioritySchemeRequestBean',
                'Required parameter "updatePrioritySchemeRequestBean" was null or undefined when calling updatePriorityScheme().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/priorityscheme/{schemeId}`.replace(`{${"schemeId"}}`, encodeURIComponent(String(requestParameters['schemeId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['updatePrioritySchemeRequestBean'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates a priority scheme. This includes its details, the lists of priorities and projects in it  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Update priority scheme
     */
    async updatePriorityScheme(requestParameters: UpdatePrioritySchemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdatePrioritySchemeResponseBean> {
        const response = await this.updatePrioritySchemeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetPrioritySchemesOrderByEnum = {
    Name: 'name',
    Name2Asc: '+name',
    Name3Desc: '-name'
} as const;
export type GetPrioritySchemesOrderByEnum = typeof GetPrioritySchemesOrderByEnum[keyof typeof GetPrioritySchemesOrderByEnum];
