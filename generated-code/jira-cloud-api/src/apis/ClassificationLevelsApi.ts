/* tslint:disable */
/* eslint-disable */
/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-006326f44f7f2ca50c1f9c8c88f70b27eb18a140
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DataClassificationLevelsBean,
} from '../models/index';

export interface GetAllUserDataClassificationLevelsRequest {
    status?: Array<GetAllUserDataClassificationLevelsStatusEnum>;
    orderBy?: GetAllUserDataClassificationLevelsOrderByEnum;
}

/**
 * 
 */
export class ClassificationLevelsApi extends runtime.BaseAPI {

    /**
     * Returns all classification levels.  **[Permissions](#permissions) required:** None.
     * Get all classification levels
     */
    async getAllUserDataClassificationLevelsRaw(requestParameters: GetAllUserDataClassificationLevelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DataClassificationLevelsBean>> {
        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/classification-levels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns all classification levels.  **[Permissions](#permissions) required:** None.
     * Get all classification levels
     */
    async getAllUserDataClassificationLevels(requestParameters: GetAllUserDataClassificationLevelsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DataClassificationLevelsBean> {
        const response = await this.getAllUserDataClassificationLevelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetAllUserDataClassificationLevelsStatusEnum = {
    Published: 'PUBLISHED',
    Archived: 'ARCHIVED',
    Draft: 'DRAFT'
} as const;
export type GetAllUserDataClassificationLevelsStatusEnum = typeof GetAllUserDataClassificationLevelsStatusEnum[keyof typeof GetAllUserDataClassificationLevelsStatusEnum];
/**
 * @export
 */
export const GetAllUserDataClassificationLevelsOrderByEnum = {
    Rank: 'rank',
    Rank2Desc: '-rank',
    Rank3Asc: '+rank'
} as const;
export type GetAllUserDataClassificationLevelsOrderByEnum = typeof GetAllUserDataClassificationLevelsOrderByEnum[keyof typeof GetAllUserDataClassificationLevelsOrderByEnum];
