/* tslint:disable */
/* eslint-disable */
/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-006326f44f7f2ca50c1f9c8c88f70b27eb18a140
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DefaultWorkflow,
  IssueTypeWorkflowMapping,
  IssueTypesWorkflowMapping,
  PublishDraftWorkflowScheme,
  TaskProgressBeanObject,
  WorkflowScheme,
} from '../models/index';

export interface CreateWorkflowSchemeDraftFromParentRequest {
    id: number;
}

export interface DeleteDraftDefaultWorkflowRequest {
    id: number;
}

export interface DeleteDraftWorkflowMappingRequest {
    id: number;
    workflowName: string;
}

export interface DeleteWorkflowSchemeDraftRequest {
    id: number;
}

export interface DeleteWorkflowSchemeDraftIssueTypeRequest {
    id: number;
    issueType: string;
}

export interface GetDraftDefaultWorkflowRequest {
    id: number;
}

export interface GetDraftWorkflowRequest {
    id: number;
    workflowName?: string;
}

export interface GetWorkflowSchemeDraftRequest {
    id: number;
}

export interface GetWorkflowSchemeDraftIssueTypeRequest {
    id: number;
    issueType: string;
}

export interface PublishDraftWorkflowSchemeRequest {
    id: number;
    publishDraftWorkflowScheme: PublishDraftWorkflowScheme;
    validateOnly?: boolean;
}

export interface SetWorkflowSchemeDraftIssueTypeRequest {
    id: number;
    issueType: string;
    issueTypeWorkflowMapping: IssueTypeWorkflowMapping;
}

export interface UpdateDraftDefaultWorkflowRequest {
    id: number;
    defaultWorkflow: DefaultWorkflow;
}

export interface UpdateDraftWorkflowMappingRequest {
    id: number;
    workflowName: string;
    issueTypesWorkflowMapping: IssueTypesWorkflowMapping;
}

export interface UpdateWorkflowSchemeDraftRequest {
    id: number;
    workflowScheme: Omit<WorkflowScheme, 'draft'|'id'|'issueTypes'|'lastModified'|'lastModifiedUser'|'originalDefaultWorkflow'|'originalIssueTypeMappings'|'self'>;
}

/**
 * 
 */
export class WorkflowSchemeDraftsApi extends runtime.BaseAPI {

    /**
     * Create a draft workflow scheme from an active workflow scheme, by copying the active workflow scheme. Note that an active workflow scheme can only have one draft workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Create draft workflow scheme
     */
    async createWorkflowSchemeDraftFromParentRaw(requestParameters: CreateWorkflowSchemeDraftFromParentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowScheme>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling createWorkflowSchemeDraftFromParent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/workflowscheme/{id}/createdraft`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create a draft workflow scheme from an active workflow scheme, by copying the active workflow scheme. Note that an active workflow scheme can only have one draft workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Create draft workflow scheme
     */
    async createWorkflowSchemeDraftFromParent(requestParameters: CreateWorkflowSchemeDraftFromParentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowScheme> {
        const response = await this.createWorkflowSchemeDraftFromParentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resets the default workflow for a workflow scheme\'s draft. That is, the default workflow is set to Jira\'s system workflow (the *jira* workflow).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Delete draft default workflow
     */
    async deleteDraftDefaultWorkflowRaw(requestParameters: DeleteDraftDefaultWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowScheme>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteDraftDefaultWorkflow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/workflowscheme/{id}/draft/default`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Resets the default workflow for a workflow scheme\'s draft. That is, the default workflow is set to Jira\'s system workflow (the *jira* workflow).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Delete draft default workflow
     */
    async deleteDraftDefaultWorkflow(requestParameters: DeleteDraftDefaultWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowScheme> {
        const response = await this.deleteDraftDefaultWorkflowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the workflow-issue type mapping for a workflow in a workflow scheme\'s draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Delete issue types for workflow in draft workflow scheme
     */
    async deleteDraftWorkflowMappingRaw(requestParameters: DeleteDraftWorkflowMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteDraftWorkflowMapping().'
            );
        }

        if (requestParameters['workflowName'] == null) {
            throw new runtime.RequiredError(
                'workflowName',
                'Required parameter "workflowName" was null or undefined when calling deleteDraftWorkflowMapping().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['workflowName'] != null) {
            queryParameters['workflowName'] = requestParameters['workflowName'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/workflowscheme/{id}/draft/workflow`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the workflow-issue type mapping for a workflow in a workflow scheme\'s draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Delete issue types for workflow in draft workflow scheme
     */
    async deleteDraftWorkflowMapping(requestParameters: DeleteDraftWorkflowMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDraftWorkflowMappingRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a draft workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Delete draft workflow scheme
     */
    async deleteWorkflowSchemeDraftRaw(requestParameters: DeleteWorkflowSchemeDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteWorkflowSchemeDraft().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/workflowscheme/{id}/draft`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a draft workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Delete draft workflow scheme
     */
    async deleteWorkflowSchemeDraft(requestParameters: DeleteWorkflowSchemeDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteWorkflowSchemeDraftRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes the issue type-workflow mapping for an issue type in a workflow scheme\'s draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Delete workflow for issue type in draft workflow scheme
     */
    async deleteWorkflowSchemeDraftIssueTypeRaw(requestParameters: DeleteWorkflowSchemeDraftIssueTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowScheme>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteWorkflowSchemeDraftIssueType().'
            );
        }

        if (requestParameters['issueType'] == null) {
            throw new runtime.RequiredError(
                'issueType',
                'Required parameter "issueType" was null or undefined when calling deleteWorkflowSchemeDraftIssueType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"issueType"}}`, encodeURIComponent(String(requestParameters['issueType']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Deletes the issue type-workflow mapping for an issue type in a workflow scheme\'s draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Delete workflow for issue type in draft workflow scheme
     */
    async deleteWorkflowSchemeDraftIssueType(requestParameters: DeleteWorkflowSchemeDraftIssueTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowScheme> {
        const response = await this.deleteWorkflowSchemeDraftIssueTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the default workflow for a workflow scheme\'s draft. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get draft default workflow
     */
    async getDraftDefaultWorkflowRaw(requestParameters: GetDraftDefaultWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DefaultWorkflow>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDraftDefaultWorkflow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/workflowscheme/{id}/draft/default`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the default workflow for a workflow scheme\'s draft. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get draft default workflow
     */
    async getDraftDefaultWorkflow(requestParameters: GetDraftDefaultWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DefaultWorkflow> {
        const response = await this.getDraftDefaultWorkflowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the workflow-issue type mappings for a workflow scheme\'s draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get issue types for workflows in draft workflow scheme
     */
    async getDraftWorkflowRaw(requestParameters: GetDraftWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssueTypesWorkflowMapping>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDraftWorkflow().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['workflowName'] != null) {
            queryParameters['workflowName'] = requestParameters['workflowName'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/workflowscheme/{id}/draft/workflow`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the workflow-issue type mappings for a workflow scheme\'s draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get issue types for workflows in draft workflow scheme
     */
    async getDraftWorkflow(requestParameters: GetDraftWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssueTypesWorkflowMapping> {
        const response = await this.getDraftWorkflowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the draft workflow scheme for an active workflow scheme. Draft workflow schemes allow changes to be made to the active workflow schemes: When an active workflow scheme is updated, a draft copy is created. The draft is modified, then the changes in the draft are copied back to the active workflow scheme. See [Configuring workflow schemes](https://confluence.atlassian.com/x/tohKLg) for more information.   Note that:   *  Only active workflow schemes can have draft workflow schemes.  *  An active workflow scheme can only have one draft workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get draft workflow scheme
     */
    async getWorkflowSchemeDraftRaw(requestParameters: GetWorkflowSchemeDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowScheme>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getWorkflowSchemeDraft().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/workflowscheme/{id}/draft`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the draft workflow scheme for an active workflow scheme. Draft workflow schemes allow changes to be made to the active workflow schemes: When an active workflow scheme is updated, a draft copy is created. The draft is modified, then the changes in the draft are copied back to the active workflow scheme. See [Configuring workflow schemes](https://confluence.atlassian.com/x/tohKLg) for more information.   Note that:   *  Only active workflow schemes can have draft workflow schemes.  *  An active workflow scheme can only have one draft workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get draft workflow scheme
     */
    async getWorkflowSchemeDraft(requestParameters: GetWorkflowSchemeDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowScheme> {
        const response = await this.getWorkflowSchemeDraftRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the issue type-workflow mapping for an issue type in a workflow scheme\'s draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get workflow for issue type in draft workflow scheme
     */
    async getWorkflowSchemeDraftIssueTypeRaw(requestParameters: GetWorkflowSchemeDraftIssueTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssueTypeWorkflowMapping>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getWorkflowSchemeDraftIssueType().'
            );
        }

        if (requestParameters['issueType'] == null) {
            throw new runtime.RequiredError(
                'issueType',
                'Required parameter "issueType" was null or undefined when calling getWorkflowSchemeDraftIssueType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"issueType"}}`, encodeURIComponent(String(requestParameters['issueType']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the issue type-workflow mapping for an issue type in a workflow scheme\'s draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get workflow for issue type in draft workflow scheme
     */
    async getWorkflowSchemeDraftIssueType(requestParameters: GetWorkflowSchemeDraftIssueTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssueTypeWorkflowMapping> {
        const response = await this.getWorkflowSchemeDraftIssueTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Publishes a draft workflow scheme.  Where the draft workflow includes new workflow statuses for an issue type, mappings are provided to update issues with the original workflow status to the new workflow status.  This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain updates.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Publish draft workflow scheme
     */
    async publishDraftWorkflowSchemeRaw(requestParameters: PublishDraftWorkflowSchemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling publishDraftWorkflowScheme().'
            );
        }

        if (requestParameters['publishDraftWorkflowScheme'] == null) {
            throw new runtime.RequiredError(
                'publishDraftWorkflowScheme',
                'Required parameter "publishDraftWorkflowScheme" was null or undefined when calling publishDraftWorkflowScheme().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['validateOnly'] != null) {
            queryParameters['validateOnly'] = requestParameters['validateOnly'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/workflowscheme/{id}/draft/publish`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['publishDraftWorkflowScheme'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Publishes a draft workflow scheme.  Where the draft workflow includes new workflow statuses for an issue type, mappings are provided to update issues with the original workflow status to the new workflow status.  This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain updates.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Publish draft workflow scheme
     */
    async publishDraftWorkflowScheme(requestParameters: PublishDraftWorkflowSchemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.publishDraftWorkflowSchemeRaw(requestParameters, initOverrides);
    }

    /**
     * Sets the workflow for an issue type in a workflow scheme\'s draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Set workflow for issue type in draft workflow scheme
     */
    async setWorkflowSchemeDraftIssueTypeRaw(requestParameters: SetWorkflowSchemeDraftIssueTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowScheme>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling setWorkflowSchemeDraftIssueType().'
            );
        }

        if (requestParameters['issueType'] == null) {
            throw new runtime.RequiredError(
                'issueType',
                'Required parameter "issueType" was null or undefined when calling setWorkflowSchemeDraftIssueType().'
            );
        }

        if (requestParameters['issueTypeWorkflowMapping'] == null) {
            throw new runtime.RequiredError(
                'issueTypeWorkflowMapping',
                'Required parameter "issueTypeWorkflowMapping" was null or undefined when calling setWorkflowSchemeDraftIssueType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"issueType"}}`, encodeURIComponent(String(requestParameters['issueType']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['issueTypeWorkflowMapping'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Sets the workflow for an issue type in a workflow scheme\'s draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Set workflow for issue type in draft workflow scheme
     */
    async setWorkflowSchemeDraftIssueType(requestParameters: SetWorkflowSchemeDraftIssueTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowScheme> {
        const response = await this.setWorkflowSchemeDraftIssueTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sets the default workflow for a workflow scheme\'s draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Update draft default workflow
     */
    async updateDraftDefaultWorkflowRaw(requestParameters: UpdateDraftDefaultWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowScheme>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateDraftDefaultWorkflow().'
            );
        }

        if (requestParameters['defaultWorkflow'] == null) {
            throw new runtime.RequiredError(
                'defaultWorkflow',
                'Required parameter "defaultWorkflow" was null or undefined when calling updateDraftDefaultWorkflow().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/workflowscheme/{id}/draft/default`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['defaultWorkflow'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Sets the default workflow for a workflow scheme\'s draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Update draft default workflow
     */
    async updateDraftDefaultWorkflow(requestParameters: UpdateDraftDefaultWorkflowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowScheme> {
        const response = await this.updateDraftDefaultWorkflowRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sets the issue types for a workflow in a workflow scheme\'s draft. The workflow can also be set as the default workflow for the draft workflow scheme. Unmapped issues types are mapped to the default workflow.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Set issue types for workflow in workflow scheme
     */
    async updateDraftWorkflowMappingRaw(requestParameters: UpdateDraftWorkflowMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowScheme>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateDraftWorkflowMapping().'
            );
        }

        if (requestParameters['workflowName'] == null) {
            throw new runtime.RequiredError(
                'workflowName',
                'Required parameter "workflowName" was null or undefined when calling updateDraftWorkflowMapping().'
            );
        }

        if (requestParameters['issueTypesWorkflowMapping'] == null) {
            throw new runtime.RequiredError(
                'issueTypesWorkflowMapping',
                'Required parameter "issueTypesWorkflowMapping" was null or undefined when calling updateDraftWorkflowMapping().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['workflowName'] != null) {
            queryParameters['workflowName'] = requestParameters['workflowName'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/workflowscheme/{id}/draft/workflow`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['issueTypesWorkflowMapping'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Sets the issue types for a workflow in a workflow scheme\'s draft. The workflow can also be set as the default workflow for the draft workflow scheme. Unmapped issues types are mapped to the default workflow.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Set issue types for workflow in workflow scheme
     */
    async updateDraftWorkflowMapping(requestParameters: UpdateDraftWorkflowMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowScheme> {
        const response = await this.updateDraftWorkflowMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a draft workflow scheme. If a draft workflow scheme does not exist for the active workflow scheme, then a draft is created. Note that an active workflow scheme can only have one draft workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Update draft workflow scheme
     */
    async updateWorkflowSchemeDraftRaw(requestParameters: UpdateWorkflowSchemeDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowScheme>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateWorkflowSchemeDraft().'
            );
        }

        if (requestParameters['workflowScheme'] == null) {
            throw new runtime.RequiredError(
                'workflowScheme',
                'Required parameter "workflowScheme" was null or undefined when calling updateWorkflowSchemeDraft().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/workflowscheme/{id}/draft`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['workflowScheme'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates a draft workflow scheme. If a draft workflow scheme does not exist for the active workflow scheme, then a draft is created. Note that an active workflow scheme can only have one draft workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Update draft workflow scheme
     */
    async updateWorkflowSchemeDraft(requestParameters: UpdateWorkflowSchemeDraftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowScheme> {
        const response = await this.updateWorkflowSchemeDraftRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
