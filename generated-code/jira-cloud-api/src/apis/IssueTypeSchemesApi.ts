/* tslint:disable */
/* eslint-disable */
/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-006326f44f7f2ca50c1f9c8c88f70b27eb18a140
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  IssueTypeIds,
  IssueTypeSchemeDetails,
  IssueTypeSchemeID,
  IssueTypeSchemeProjectAssociation,
  IssueTypeSchemeUpdateDetails,
  OrderOfIssueTypes,
  PageBeanIssueTypeScheme,
  PageBeanIssueTypeSchemeMapping,
  PageBeanIssueTypeSchemeProjects,
} from '../models/index';

export interface AddIssueTypesToIssueTypeSchemeRequest {
    issueTypeSchemeId: number;
    issueTypeIds: IssueTypeIds;
}

export interface AssignIssueTypeSchemeToProjectRequest {
    issueTypeSchemeProjectAssociation: IssueTypeSchemeProjectAssociation;
}

export interface CreateIssueTypeSchemeRequest {
    issueTypeSchemeDetails: IssueTypeSchemeDetails;
}

export interface DeleteIssueTypeSchemeRequest {
    issueTypeSchemeId: number;
}

export interface GetAllIssueTypeSchemesRequest {
    startAt?: number;
    maxResults?: number;
    id?: Array<number>;
    orderBy?: GetAllIssueTypeSchemesOrderByEnum;
    expand?: string;
    queryString?: string;
}

export interface GetIssueTypeSchemeForProjectsRequest {
    projectId: Array<number>;
    startAt?: number;
    maxResults?: number;
}

export interface GetIssueTypeSchemesMappingRequest {
    startAt?: number;
    maxResults?: number;
    issueTypeSchemeId?: Array<number>;
}

export interface RemoveIssueTypeFromIssueTypeSchemeRequest {
    issueTypeSchemeId: number;
    issueTypeId: number;
}

export interface ReorderIssueTypesInIssueTypeSchemeRequest {
    issueTypeSchemeId: number;
    orderOfIssueTypes: OrderOfIssueTypes;
}

export interface UpdateIssueTypeSchemeRequest {
    issueTypeSchemeId: number;
    issueTypeSchemeUpdateDetails: IssueTypeSchemeUpdateDetails;
}

/**
 * 
 */
export class IssueTypeSchemesApi extends runtime.BaseAPI {

    /**
     * Adds issue types to an issue type scheme.  The added issue types are appended to the issue types list.  If any of the issue types exist in the issue type scheme, the operation fails and no issue types are added.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Add issue types to issue type scheme
     */
    async addIssueTypesToIssueTypeSchemeRaw(requestParameters: AddIssueTypesToIssueTypeSchemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['issueTypeSchemeId'] == null) {
            throw new runtime.RequiredError(
                'issueTypeSchemeId',
                'Required parameter "issueTypeSchemeId" was null or undefined when calling addIssueTypesToIssueTypeScheme().'
            );
        }

        if (requestParameters['issueTypeIds'] == null) {
            throw new runtime.RequiredError(
                'issueTypeIds',
                'Required parameter "issueTypeIds" was null or undefined when calling addIssueTypesToIssueTypeScheme().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype`.replace(`{${"issueTypeSchemeId"}}`, encodeURIComponent(String(requestParameters['issueTypeSchemeId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['issueTypeIds'],
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Adds issue types to an issue type scheme.  The added issue types are appended to the issue types list.  If any of the issue types exist in the issue type scheme, the operation fails and no issue types are added.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Add issue types to issue type scheme
     */
    async addIssueTypesToIssueTypeScheme(requestParameters: AddIssueTypesToIssueTypeSchemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.addIssueTypesToIssueTypeSchemeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assigns an issue type scheme to a project.  If any issues in the project are assigned issue types not present in the new scheme, the operation will fail. To complete the assignment those issues must be updated to use issue types in the new scheme.  Issue type schemes can only be assigned to classic projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Assign issue type scheme to project
     */
    async assignIssueTypeSchemeToProjectRaw(requestParameters: AssignIssueTypeSchemeToProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['issueTypeSchemeProjectAssociation'] == null) {
            throw new runtime.RequiredError(
                'issueTypeSchemeProjectAssociation',
                'Required parameter "issueTypeSchemeProjectAssociation" was null or undefined when calling assignIssueTypeSchemeToProject().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/issuetypescheme/project`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['issueTypeSchemeProjectAssociation'],
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Assigns an issue type scheme to a project.  If any issues in the project are assigned issue types not present in the new scheme, the operation will fail. To complete the assignment those issues must be updated to use issue types in the new scheme.  Issue type schemes can only be assigned to classic projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Assign issue type scheme to project
     */
    async assignIssueTypeSchemeToProject(requestParameters: AssignIssueTypeSchemeToProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.assignIssueTypeSchemeToProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates an issue type scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Create issue type scheme
     */
    async createIssueTypeSchemeRaw(requestParameters: CreateIssueTypeSchemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssueTypeSchemeID>> {
        if (requestParameters['issueTypeSchemeDetails'] == null) {
            throw new runtime.RequiredError(
                'issueTypeSchemeDetails',
                'Required parameter "issueTypeSchemeDetails" was null or undefined when calling createIssueTypeScheme().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/issuetypescheme`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['issueTypeSchemeDetails'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates an issue type scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Create issue type scheme
     */
    async createIssueTypeScheme(requestParameters: CreateIssueTypeSchemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssueTypeSchemeID> {
        const response = await this.createIssueTypeSchemeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes an issue type scheme.  Only issue type schemes used in classic projects can be deleted.  Any projects assigned to the scheme are reassigned to the default issue type scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Delete issue type scheme
     */
    async deleteIssueTypeSchemeRaw(requestParameters: DeleteIssueTypeSchemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['issueTypeSchemeId'] == null) {
            throw new runtime.RequiredError(
                'issueTypeSchemeId',
                'Required parameter "issueTypeSchemeId" was null or undefined when calling deleteIssueTypeScheme().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/issuetypescheme/{issueTypeSchemeId}`.replace(`{${"issueTypeSchemeId"}}`, encodeURIComponent(String(requestParameters['issueTypeSchemeId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Deletes an issue type scheme.  Only issue type schemes used in classic projects can be deleted.  Any projects assigned to the scheme are reassigned to the default issue type scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Delete issue type scheme
     */
    async deleteIssueTypeScheme(requestParameters: DeleteIssueTypeSchemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteIssueTypeSchemeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a [paginated](#pagination) list of issue type schemes.  Only issue type schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get all issue type schemes
     */
    async getAllIssueTypeSchemesRaw(requestParameters: GetAllIssueTypeSchemesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageBeanIssueTypeScheme>> {
        const queryParameters: any = {};

        if (requestParameters['startAt'] != null) {
            queryParameters['startAt'] = requestParameters['startAt'];
        }

        if (requestParameters['maxResults'] != null) {
            queryParameters['maxResults'] = requestParameters['maxResults'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        if (requestParameters['expand'] != null) {
            queryParameters['expand'] = requestParameters['expand'];
        }

        if (requestParameters['queryString'] != null) {
            queryParameters['queryString'] = requestParameters['queryString'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/issuetypescheme`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a [paginated](#pagination) list of issue type schemes.  Only issue type schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get all issue type schemes
     */
    async getAllIssueTypeSchemes(requestParameters: GetAllIssueTypeSchemesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageBeanIssueTypeScheme> {
        const response = await this.getAllIssueTypeSchemesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a [paginated](#pagination) list of issue type schemes and, for each issue type scheme, a list of the projects that use it.  Only issue type schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get issue type schemes for projects
     */
    async getIssueTypeSchemeForProjectsRaw(requestParameters: GetIssueTypeSchemeForProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageBeanIssueTypeSchemeProjects>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getIssueTypeSchemeForProjects().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startAt'] != null) {
            queryParameters['startAt'] = requestParameters['startAt'];
        }

        if (requestParameters['maxResults'] != null) {
            queryParameters['maxResults'] = requestParameters['maxResults'];
        }

        if (requestParameters['projectId'] != null) {
            queryParameters['projectId'] = requestParameters['projectId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/issuetypescheme/project`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a [paginated](#pagination) list of issue type schemes and, for each issue type scheme, a list of the projects that use it.  Only issue type schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get issue type schemes for projects
     */
    async getIssueTypeSchemeForProjects(requestParameters: GetIssueTypeSchemeForProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageBeanIssueTypeSchemeProjects> {
        const response = await this.getIssueTypeSchemeForProjectsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a [paginated](#pagination) list of issue type scheme items.  Only issue type scheme items used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get issue type scheme items
     */
    async getIssueTypeSchemesMappingRaw(requestParameters: GetIssueTypeSchemesMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageBeanIssueTypeSchemeMapping>> {
        const queryParameters: any = {};

        if (requestParameters['startAt'] != null) {
            queryParameters['startAt'] = requestParameters['startAt'];
        }

        if (requestParameters['maxResults'] != null) {
            queryParameters['maxResults'] = requestParameters['maxResults'];
        }

        if (requestParameters['issueTypeSchemeId'] != null) {
            queryParameters['issueTypeSchemeId'] = requestParameters['issueTypeSchemeId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/issuetypescheme/mapping`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a [paginated](#pagination) list of issue type scheme items.  Only issue type scheme items used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get issue type scheme items
     */
    async getIssueTypeSchemesMapping(requestParameters: GetIssueTypeSchemesMappingRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageBeanIssueTypeSchemeMapping> {
        const response = await this.getIssueTypeSchemesMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes an issue type from an issue type scheme.  This operation cannot remove:   *  any issue type used by issues.  *  any issue types from the default issue type scheme.  *  the last standard issue type from an issue type scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Remove issue type from issue type scheme
     */
    async removeIssueTypeFromIssueTypeSchemeRaw(requestParameters: RemoveIssueTypeFromIssueTypeSchemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['issueTypeSchemeId'] == null) {
            throw new runtime.RequiredError(
                'issueTypeSchemeId',
                'Required parameter "issueTypeSchemeId" was null or undefined when calling removeIssueTypeFromIssueTypeScheme().'
            );
        }

        if (requestParameters['issueTypeId'] == null) {
            throw new runtime.RequiredError(
                'issueTypeId',
                'Required parameter "issueTypeId" was null or undefined when calling removeIssueTypeFromIssueTypeScheme().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/{issueTypeId}`.replace(`{${"issueTypeSchemeId"}}`, encodeURIComponent(String(requestParameters['issueTypeSchemeId']))).replace(`{${"issueTypeId"}}`, encodeURIComponent(String(requestParameters['issueTypeId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Removes an issue type from an issue type scheme.  This operation cannot remove:   *  any issue type used by issues.  *  any issue types from the default issue type scheme.  *  the last standard issue type from an issue type scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Remove issue type from issue type scheme
     */
    async removeIssueTypeFromIssueTypeScheme(requestParameters: RemoveIssueTypeFromIssueTypeSchemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.removeIssueTypeFromIssueTypeSchemeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Changes the order of issue types in an issue type scheme.  The request body parameters must meet the following requirements:   *  all of the issue types must belong to the issue type scheme.  *  either `after` or `position` must be provided.  *  the issue type in `after` must not be in the issue type list.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Change order of issue types
     */
    async reorderIssueTypesInIssueTypeSchemeRaw(requestParameters: ReorderIssueTypesInIssueTypeSchemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['issueTypeSchemeId'] == null) {
            throw new runtime.RequiredError(
                'issueTypeSchemeId',
                'Required parameter "issueTypeSchemeId" was null or undefined when calling reorderIssueTypesInIssueTypeScheme().'
            );
        }

        if (requestParameters['orderOfIssueTypes'] == null) {
            throw new runtime.RequiredError(
                'orderOfIssueTypes',
                'Required parameter "orderOfIssueTypes" was null or undefined when calling reorderIssueTypesInIssueTypeScheme().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/move`.replace(`{${"issueTypeSchemeId"}}`, encodeURIComponent(String(requestParameters['issueTypeSchemeId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['orderOfIssueTypes'],
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Changes the order of issue types in an issue type scheme.  The request body parameters must meet the following requirements:   *  all of the issue types must belong to the issue type scheme.  *  either `after` or `position` must be provided.  *  the issue type in `after` must not be in the issue type list.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Change order of issue types
     */
    async reorderIssueTypesInIssueTypeScheme(requestParameters: ReorderIssueTypesInIssueTypeSchemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.reorderIssueTypesInIssueTypeSchemeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an issue type scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Update issue type scheme
     */
    async updateIssueTypeSchemeRaw(requestParameters: UpdateIssueTypeSchemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['issueTypeSchemeId'] == null) {
            throw new runtime.RequiredError(
                'issueTypeSchemeId',
                'Required parameter "issueTypeSchemeId" was null or undefined when calling updateIssueTypeScheme().'
            );
        }

        if (requestParameters['issueTypeSchemeUpdateDetails'] == null) {
            throw new runtime.RequiredError(
                'issueTypeSchemeUpdateDetails',
                'Required parameter "issueTypeSchemeUpdateDetails" was null or undefined when calling updateIssueTypeScheme().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/issuetypescheme/{issueTypeSchemeId}`.replace(`{${"issueTypeSchemeId"}}`, encodeURIComponent(String(requestParameters['issueTypeSchemeId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['issueTypeSchemeUpdateDetails'],
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Updates an issue type scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Update issue type scheme
     */
    async updateIssueTypeScheme(requestParameters: UpdateIssueTypeSchemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.updateIssueTypeSchemeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetAllIssueTypeSchemesOrderByEnum = {
    Name: 'name',
    Name2Desc: '-name',
    Name3Asc: '+name',
    Id: 'id',
    Id2Desc: '-id',
    Id3Asc: '+id'
} as const;
export type GetAllIssueTypeSchemesOrderByEnum = typeof GetAllIssueTypeSchemesOrderByEnum[keyof typeof GetAllIssueTypeSchemesOrderByEnum];
