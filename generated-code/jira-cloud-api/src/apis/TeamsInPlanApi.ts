/* tslint:disable */
/* eslint-disable */
/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-006326f44f7f2ca50c1f9c8c88f70b27eb18a140
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddAtlassianTeamRequest,
  CreatePlanOnlyTeamRequest,
  ErrorCollection,
  GetAtlassianTeamResponse,
  GetPlanOnlyTeamResponse,
  PageWithCursorGetTeamResponseForPage,
} from '../models/index';

export interface AddAtlassianTeamOperationRequest {
    planId: number;
    addAtlassianTeamRequest: AddAtlassianTeamRequest;
}

export interface CreatePlanOnlyTeamOperationRequest {
    planId: number;
    createPlanOnlyTeamRequest: CreatePlanOnlyTeamRequest;
}

export interface DeletePlanOnlyTeamRequest {
    planId: number;
    planOnlyTeamId: number;
}

export interface GetAtlassianTeamRequest {
    planId: number;
    atlassianTeamId: string;
}

export interface GetPlanOnlyTeamRequest {
    planId: number;
    planOnlyTeamId: number;
}

export interface GetTeamsRequest {
    planId: number;
    cursor?: string;
    maxResults?: number;
}

export interface RemoveAtlassianTeamRequest {
    planId: number;
    atlassianTeamId: string;
}

export interface UpdateAtlassianTeamRequest {
    planId: number;
    atlassianTeamId: string;
    body: object;
}

export interface UpdatePlanOnlyTeamRequest {
    planId: number;
    planOnlyTeamId: number;
    body: object;
}

/**
 * 
 */
export class TeamsInPlanApi extends runtime.BaseAPI {

    /**
     * Adds an existing Atlassian team to a plan and configures their plannning settings.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Add Atlassian team to plan
     */
    async addAtlassianTeamRaw(requestParameters: AddAtlassianTeamOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['planId'] == null) {
            throw new runtime.RequiredError(
                'planId',
                'Required parameter "planId" was null or undefined when calling addAtlassianTeam().'
            );
        }

        if (requestParameters['addAtlassianTeamRequest'] == null) {
            throw new runtime.RequiredError(
                'addAtlassianTeamRequest',
                'Required parameter "addAtlassianTeamRequest" was null or undefined when calling addAtlassianTeam().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/plans/plan/{planId}/team/atlassian`.replace(`{${"planId"}}`, encodeURIComponent(String(requestParameters['planId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['addAtlassianTeamRequest'],
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Adds an existing Atlassian team to a plan and configures their plannning settings.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Add Atlassian team to plan
     */
    async addAtlassianTeam(requestParameters: AddAtlassianTeamOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.addAtlassianTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a plan-only team and configures their planning settings.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Create plan-only team
     */
    async createPlanOnlyTeamRaw(requestParameters: CreatePlanOnlyTeamOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters['planId'] == null) {
            throw new runtime.RequiredError(
                'planId',
                'Required parameter "planId" was null or undefined when calling createPlanOnlyTeam().'
            );
        }

        if (requestParameters['createPlanOnlyTeamRequest'] == null) {
            throw new runtime.RequiredError(
                'createPlanOnlyTeamRequest',
                'Required parameter "createPlanOnlyTeamRequest" was null or undefined when calling createPlanOnlyTeam().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/plans/plan/{planId}/team/planonly`.replace(`{${"planId"}}`, encodeURIComponent(String(requestParameters['planId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['createPlanOnlyTeamRequest'],
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Creates a plan-only team and configures their planning settings.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Create plan-only team
     */
    async createPlanOnlyTeam(requestParameters: CreatePlanOnlyTeamOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.createPlanOnlyTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a plan-only team and their planning settings.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Delete plan-only team
     */
    async deletePlanOnlyTeamRaw(requestParameters: DeletePlanOnlyTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['planId'] == null) {
            throw new runtime.RequiredError(
                'planId',
                'Required parameter "planId" was null or undefined when calling deletePlanOnlyTeam().'
            );
        }

        if (requestParameters['planOnlyTeamId'] == null) {
            throw new runtime.RequiredError(
                'planOnlyTeamId',
                'Required parameter "planOnlyTeamId" was null or undefined when calling deletePlanOnlyTeam().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/plans/plan/{planId}/team/planonly/{planOnlyTeamId}`.replace(`{${"planId"}}`, encodeURIComponent(String(requestParameters['planId']))).replace(`{${"planOnlyTeamId"}}`, encodeURIComponent(String(requestParameters['planOnlyTeamId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Deletes a plan-only team and their planning settings.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Delete plan-only team
     */
    async deletePlanOnlyTeam(requestParameters: DeletePlanOnlyTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deletePlanOnlyTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns planning settings for an Atlassian team in a plan.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get Atlassian team in plan
     */
    async getAtlassianTeamRaw(requestParameters: GetAtlassianTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAtlassianTeamResponse>> {
        if (requestParameters['planId'] == null) {
            throw new runtime.RequiredError(
                'planId',
                'Required parameter "planId" was null or undefined when calling getAtlassianTeam().'
            );
        }

        if (requestParameters['atlassianTeamId'] == null) {
            throw new runtime.RequiredError(
                'atlassianTeamId',
                'Required parameter "atlassianTeamId" was null or undefined when calling getAtlassianTeam().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/plans/plan/{planId}/team/atlassian/{atlassianTeamId}`.replace(`{${"planId"}}`, encodeURIComponent(String(requestParameters['planId']))).replace(`{${"atlassianTeamId"}}`, encodeURIComponent(String(requestParameters['atlassianTeamId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns planning settings for an Atlassian team in a plan.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get Atlassian team in plan
     */
    async getAtlassianTeam(requestParameters: GetAtlassianTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAtlassianTeamResponse> {
        const response = await this.getAtlassianTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns planning settings for a plan-only team.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get plan-only team
     */
    async getPlanOnlyTeamRaw(requestParameters: GetPlanOnlyTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPlanOnlyTeamResponse>> {
        if (requestParameters['planId'] == null) {
            throw new runtime.RequiredError(
                'planId',
                'Required parameter "planId" was null or undefined when calling getPlanOnlyTeam().'
            );
        }

        if (requestParameters['planOnlyTeamId'] == null) {
            throw new runtime.RequiredError(
                'planOnlyTeamId',
                'Required parameter "planOnlyTeamId" was null or undefined when calling getPlanOnlyTeam().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/plans/plan/{planId}/team/planonly/{planOnlyTeamId}`.replace(`{${"planId"}}`, encodeURIComponent(String(requestParameters['planId']))).replace(`{${"planOnlyTeamId"}}`, encodeURIComponent(String(requestParameters['planOnlyTeamId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns planning settings for a plan-only team.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get plan-only team
     */
    async getPlanOnlyTeam(requestParameters: GetPlanOnlyTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPlanOnlyTeamResponse> {
        const response = await this.getPlanOnlyTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a [paginated](#pagination) list of plan-only and Atlassian teams in a plan.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get teams in plan paginated
     */
    async getTeamsRaw(requestParameters: GetTeamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageWithCursorGetTeamResponseForPage>> {
        if (requestParameters['planId'] == null) {
            throw new runtime.RequiredError(
                'planId',
                'Required parameter "planId" was null or undefined when calling getTeams().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['maxResults'] != null) {
            queryParameters['maxResults'] = requestParameters['maxResults'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/plans/plan/{planId}/team`.replace(`{${"planId"}}`, encodeURIComponent(String(requestParameters['planId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a [paginated](#pagination) list of plan-only and Atlassian teams in a plan.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get teams in plan paginated
     */
    async getTeams(requestParameters: GetTeamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageWithCursorGetTeamResponseForPage> {
        const response = await this.getTeamsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes an Atlassian team from a plan and deletes their planning settings.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Remove Atlassian team from plan
     */
    async removeAtlassianTeamRaw(requestParameters: RemoveAtlassianTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['planId'] == null) {
            throw new runtime.RequiredError(
                'planId',
                'Required parameter "planId" was null or undefined when calling removeAtlassianTeam().'
            );
        }

        if (requestParameters['atlassianTeamId'] == null) {
            throw new runtime.RequiredError(
                'atlassianTeamId',
                'Required parameter "atlassianTeamId" was null or undefined when calling removeAtlassianTeam().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/plans/plan/{planId}/team/atlassian/{atlassianTeamId}`.replace(`{${"planId"}}`, encodeURIComponent(String(requestParameters['planId']))).replace(`{${"atlassianTeamId"}}`, encodeURIComponent(String(requestParameters['atlassianTeamId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Removes an Atlassian team from a plan and deletes their planning settings.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Remove Atlassian team from plan
     */
    async removeAtlassianTeam(requestParameters: RemoveAtlassianTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.removeAtlassianTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates any of the following planning settings of an Atlassian team in a plan using [JSON Patch](https://datatracker.ietf.org/doc/html/rfc6902).   *  planningStyle  *  issueSourceId  *  sprintLength  *  capacity  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *Note that \"add\" operations do not respect array indexes in target locations. Call the \"Get Atlassian team in plan\" endpoint to find out the order of array elements.*
     * Update Atlassian team in plan
     */
    async updateAtlassianTeamRaw(requestParameters: UpdateAtlassianTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['planId'] == null) {
            throw new runtime.RequiredError(
                'planId',
                'Required parameter "planId" was null or undefined when calling updateAtlassianTeam().'
            );
        }

        if (requestParameters['atlassianTeamId'] == null) {
            throw new runtime.RequiredError(
                'atlassianTeamId',
                'Required parameter "atlassianTeamId" was null or undefined when calling updateAtlassianTeam().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling updateAtlassianTeam().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/plans/plan/{planId}/team/atlassian/{atlassianTeamId}`.replace(`{${"planId"}}`, encodeURIComponent(String(requestParameters['planId']))).replace(`{${"atlassianTeamId"}}`, encodeURIComponent(String(requestParameters['atlassianTeamId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Updates any of the following planning settings of an Atlassian team in a plan using [JSON Patch](https://datatracker.ietf.org/doc/html/rfc6902).   *  planningStyle  *  issueSourceId  *  sprintLength  *  capacity  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *Note that \"add\" operations do not respect array indexes in target locations. Call the \"Get Atlassian team in plan\" endpoint to find out the order of array elements.*
     * Update Atlassian team in plan
     */
    async updateAtlassianTeam(requestParameters: UpdateAtlassianTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.updateAtlassianTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates any of the following planning settings of a plan-only team using [JSON Patch](https://datatracker.ietf.org/doc/html/rfc6902).   *  name  *  planningStyle  *  issueSourceId  *  sprintLength  *  capacity  *  memberAccountIds  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *Note that \"add\" operations do not respect array indexes in target locations. Call the \"Get plan-only team\" endpoint to find out the order of array elements.*
     * Update plan-only team
     */
    async updatePlanOnlyTeamRaw(requestParameters: UpdatePlanOnlyTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['planId'] == null) {
            throw new runtime.RequiredError(
                'planId',
                'Required parameter "planId" was null or undefined when calling updatePlanOnlyTeam().'
            );
        }

        if (requestParameters['planOnlyTeamId'] == null) {
            throw new runtime.RequiredError(
                'planOnlyTeamId',
                'Required parameter "planOnlyTeamId" was null or undefined when calling updatePlanOnlyTeam().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling updatePlanOnlyTeam().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["write:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/plans/plan/{planId}/team/planonly/{planOnlyTeamId}`.replace(`{${"planId"}}`, encodeURIComponent(String(requestParameters['planId']))).replace(`{${"planOnlyTeamId"}}`, encodeURIComponent(String(requestParameters['planOnlyTeamId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Updates any of the following planning settings of a plan-only team using [JSON Patch](https://datatracker.ietf.org/doc/html/rfc6902).   *  name  *  planningStyle  *  issueSourceId  *  sprintLength  *  capacity  *  memberAccountIds  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *Note that \"add\" operations do not respect array indexes in target locations. Call the \"Get plan-only team\" endpoint to find out the order of array elements.*
     * Update plan-only team
     */
    async updatePlanOnlyTeam(requestParameters: UpdatePlanOnlyTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.updatePlanOnlyTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
