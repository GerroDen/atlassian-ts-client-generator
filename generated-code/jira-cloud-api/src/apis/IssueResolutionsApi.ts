/* tslint:disable */
/* eslint-disable */
/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-006326f44f7f2ca50c1f9c8c88f70b27eb18a140
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateResolutionDetails,
  ErrorCollection,
  PageBeanResolutionJsonBean,
  ReorderIssueResolutionsRequest,
  Resolution,
  ResolutionId,
  SetDefaultResolutionRequest,
  TaskProgressBeanObject,
  UpdateResolutionDetails,
} from '../models/index';

export interface CreateResolutionRequest {
    createResolutionDetails: CreateResolutionDetails;
}

export interface DeleteResolutionRequest {
    id: string;
    replaceWith: string;
}

export interface GetResolutionRequest {
    id: string;
}

export interface MoveResolutionsRequest {
    reorderIssueResolutionsRequest: ReorderIssueResolutionsRequest;
}

export interface SearchResolutionsRequest {
    startAt?: string;
    maxResults?: string;
    id?: Array<string>;
    onlyDefault?: boolean;
}

export interface SetDefaultResolutionOperationRequest {
    setDefaultResolutionRequest: SetDefaultResolutionRequest;
}

export interface UpdateResolutionRequest {
    id: string;
    updateResolutionDetails: UpdateResolutionDetails;
}

/**
 * 
 */
export class IssueResolutionsApi extends runtime.BaseAPI {

    /**
     * Creates an issue resolution.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Create resolution
     */
    async createResolutionRaw(requestParameters: CreateResolutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResolutionId>> {
        if (requestParameters['createResolutionDetails'] == null) {
            throw new runtime.RequiredError(
                'createResolutionDetails',
                'Required parameter "createResolutionDetails" was null or undefined when calling createResolution().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/resolution`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['createResolutionDetails'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates an issue resolution.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Create resolution
     */
    async createResolution(requestParameters: CreateResolutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResolutionId> {
        const response = await this.createResolutionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes an issue resolution.  This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Delete resolution
     */
    async deleteResolutionRaw(requestParameters: DeleteResolutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteResolution().'
            );
        }

        if (requestParameters['replaceWith'] == null) {
            throw new runtime.RequiredError(
                'replaceWith',
                'Required parameter "replaceWith" was null or undefined when calling deleteResolution().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['replaceWith'] != null) {
            queryParameters['replaceWith'] = requestParameters['replaceWith'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/resolution/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an issue resolution.  This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Delete resolution
     */
    async deleteResolution(requestParameters: DeleteResolutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteResolutionRaw(requestParameters, initOverrides);
    }

    /**
     * Returns an issue resolution value.  **[Permissions](#permissions) required:** Permission to access Jira.
     * Get resolution
     */
    async getResolutionRaw(requestParameters: GetResolutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Resolution>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getResolution().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/resolution/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns an issue resolution value.  **[Permissions](#permissions) required:** Permission to access Jira.
     * Get resolution
     */
    async getResolution(requestParameters: GetResolutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Resolution> {
        const response = await this.getResolutionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of all issue resolution values.  **[Permissions](#permissions) required:** Permission to access Jira.
     * Get resolutions
     * @deprecated
     */
    async getResolutionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Resolution>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/resolution`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a list of all issue resolution values.  **[Permissions](#permissions) required:** Permission to access Jira.
     * Get resolutions
     * @deprecated
     */
    async getResolutions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Resolution>> {
        const response = await this.getResolutionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Changes the order of issue resolutions.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Move resolutions
     */
    async moveResolutionsRaw(requestParameters: MoveResolutionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['reorderIssueResolutionsRequest'] == null) {
            throw new runtime.RequiredError(
                'reorderIssueResolutionsRequest',
                'Required parameter "reorderIssueResolutionsRequest" was null or undefined when calling moveResolutions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/resolution/move`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['reorderIssueResolutionsRequest'],
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Changes the order of issue resolutions.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Move resolutions
     */
    async moveResolutions(requestParameters: MoveResolutionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.moveResolutionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a [paginated](#pagination) list of resolutions. The list can contain all resolutions or a subset determined by any combination of these criteria:   *  a list of resolutions IDs.  *  whether the field configuration is a default. This returns resolutions from company-managed (classic) projects only, as there is no concept of default resolutions in team-managed projects.  **[Permissions](#permissions) required:** Permission to access Jira.
     * Search resolutions
     */
    async searchResolutionsRaw(requestParameters: SearchResolutionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageBeanResolutionJsonBean>> {
        const queryParameters: any = {};

        if (requestParameters['startAt'] != null) {
            queryParameters['startAt'] = requestParameters['startAt'];
        }

        if (requestParameters['maxResults'] != null) {
            queryParameters['maxResults'] = requestParameters['maxResults'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['onlyDefault'] != null) {
            queryParameters['onlyDefault'] = requestParameters['onlyDefault'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/resolution/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a [paginated](#pagination) list of resolutions. The list can contain all resolutions or a subset determined by any combination of these criteria:   *  a list of resolutions IDs.  *  whether the field configuration is a default. This returns resolutions from company-managed (classic) projects only, as there is no concept of default resolutions in team-managed projects.  **[Permissions](#permissions) required:** Permission to access Jira.
     * Search resolutions
     */
    async searchResolutions(requestParameters: SearchResolutionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageBeanResolutionJsonBean> {
        const response = await this.searchResolutionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sets default issue resolution.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Set default resolution
     */
    async setDefaultResolutionRaw(requestParameters: SetDefaultResolutionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['setDefaultResolutionRequest'] == null) {
            throw new runtime.RequiredError(
                'setDefaultResolutionRequest',
                'Required parameter "setDefaultResolutionRequest" was null or undefined when calling setDefaultResolution().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/resolution/default`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['setDefaultResolutionRequest'],
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Sets default issue resolution.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Set default resolution
     */
    async setDefaultResolution(requestParameters: SetDefaultResolutionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.setDefaultResolutionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an issue resolution.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Update resolution
     */
    async updateResolutionRaw(requestParameters: UpdateResolutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateResolution().'
            );
        }

        if (requestParameters['updateResolutionDetails'] == null) {
            throw new runtime.RequiredError(
                'updateResolutionDetails',
                'Required parameter "updateResolutionDetails" was null or undefined when calling updateResolution().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/resolution/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['updateResolutionDetails'],
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Updates an issue resolution.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Update resolution
     */
    async updateResolution(requestParameters: UpdateResolutionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.updateResolutionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
