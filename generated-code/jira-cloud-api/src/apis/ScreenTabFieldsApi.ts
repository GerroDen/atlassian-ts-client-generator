/* tslint:disable */
/* eslint-disable */
/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-006326f44f7f2ca50c1f9c8c88f70b27eb18a140
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddFieldBean,
  MoveFieldBean,
  ScreenableField,
} from '../models/index';

export interface AddScreenTabFieldRequest {
    screenId: number;
    tabId: number;
    addFieldBean: AddFieldBean;
}

export interface GetAllScreenTabFieldsRequest {
    screenId: number;
    tabId: number;
    projectKey?: string;
}

export interface MoveScreenTabFieldRequest {
    screenId: number;
    tabId: number;
    id: string;
    moveFieldBean: MoveFieldBean;
}

export interface RemoveScreenTabFieldRequest {
    screenId: number;
    tabId: number;
    id: string;
}

/**
 * 
 */
export class ScreenTabFieldsApi extends runtime.BaseAPI {

    /**
     * Adds a field to a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Add screen tab field
     */
    async addScreenTabFieldRaw(requestParameters: AddScreenTabFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScreenableField>> {
        if (requestParameters['screenId'] == null) {
            throw new runtime.RequiredError(
                'screenId',
                'Required parameter "screenId" was null or undefined when calling addScreenTabField().'
            );
        }

        if (requestParameters['tabId'] == null) {
            throw new runtime.RequiredError(
                'tabId',
                'Required parameter "tabId" was null or undefined when calling addScreenTabField().'
            );
        }

        if (requestParameters['addFieldBean'] == null) {
            throw new runtime.RequiredError(
                'addFieldBean',
                'Required parameter "addFieldBean" was null or undefined when calling addScreenTabField().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-project"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/screens/{screenId}/tabs/{tabId}/fields`.replace(`{${"screenId"}}`, encodeURIComponent(String(requestParameters['screenId']))).replace(`{${"tabId"}}`, encodeURIComponent(String(requestParameters['tabId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['addFieldBean'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Adds a field to a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Add screen tab field
     */
    async addScreenTabField(requestParameters: AddScreenTabFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScreenableField> {
        const response = await this.addScreenTabFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all fields for a screen tab.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme.
     * Get all screen tab fields
     */
    async getAllScreenTabFieldsRaw(requestParameters: GetAllScreenTabFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ScreenableField>>> {
        if (requestParameters['screenId'] == null) {
            throw new runtime.RequiredError(
                'screenId',
                'Required parameter "screenId" was null or undefined when calling getAllScreenTabFields().'
            );
        }

        if (requestParameters['tabId'] == null) {
            throw new runtime.RequiredError(
                'tabId',
                'Required parameter "tabId" was null or undefined when calling getAllScreenTabFields().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['projectKey'] != null) {
            queryParameters['projectKey'] = requestParameters['projectKey'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-project"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/screens/{screenId}/tabs/{tabId}/fields`.replace(`{${"screenId"}}`, encodeURIComponent(String(requestParameters['screenId']))).replace(`{${"tabId"}}`, encodeURIComponent(String(requestParameters['tabId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns all fields for a screen tab.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme.
     * Get all screen tab fields
     */
    async getAllScreenTabFields(requestParameters: GetAllScreenTabFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ScreenableField>> {
        const response = await this.getAllScreenTabFieldsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Moves a screen tab field.  If `after` and `position` are provided in the request, `position` is ignored.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Move screen tab field
     */
    async moveScreenTabFieldRaw(requestParameters: MoveScreenTabFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['screenId'] == null) {
            throw new runtime.RequiredError(
                'screenId',
                'Required parameter "screenId" was null or undefined when calling moveScreenTabField().'
            );
        }

        if (requestParameters['tabId'] == null) {
            throw new runtime.RequiredError(
                'tabId',
                'Required parameter "tabId" was null or undefined when calling moveScreenTabField().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling moveScreenTabField().'
            );
        }

        if (requestParameters['moveFieldBean'] == null) {
            throw new runtime.RequiredError(
                'moveFieldBean',
                'Required parameter "moveFieldBean" was null or undefined when calling moveScreenTabField().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-project"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}/move`.replace(`{${"screenId"}}`, encodeURIComponent(String(requestParameters['screenId']))).replace(`{${"tabId"}}`, encodeURIComponent(String(requestParameters['tabId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['moveFieldBean'],
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Moves a screen tab field.  If `after` and `position` are provided in the request, `position` is ignored.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Move screen tab field
     */
    async moveScreenTabField(requestParameters: MoveScreenTabFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.moveScreenTabFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a field from a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Remove screen tab field
     */
    async removeScreenTabFieldRaw(requestParameters: RemoveScreenTabFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['screenId'] == null) {
            throw new runtime.RequiredError(
                'screenId',
                'Required parameter "screenId" was null or undefined when calling removeScreenTabField().'
            );
        }

        if (requestParameters['tabId'] == null) {
            throw new runtime.RequiredError(
                'tabId',
                'Required parameter "tabId" was null or undefined when calling removeScreenTabField().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeScreenTabField().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-project"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}`.replace(`{${"screenId"}}`, encodeURIComponent(String(requestParameters['screenId']))).replace(`{${"tabId"}}`, encodeURIComponent(String(requestParameters['tabId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a field from a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Remove screen tab field
     */
    async removeScreenTabField(requestParameters: RemoveScreenTabFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeScreenTabFieldRaw(requestParameters, initOverrides);
    }

}
