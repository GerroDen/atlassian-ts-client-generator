/* tslint:disable */
/* eslint-disable */
/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-006326f44f7f2ca50c1f9c8c88f70b27eb18a140
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  IssueFieldOption,
  IssueFieldOptionCreateBean,
  PageBeanIssueFieldOption,
  TaskProgressBeanRemoveOptionFromIssuesResult,
} from '../models/index';

export interface CreateIssueFieldOptionRequest {
    fieldKey: string;
    issueFieldOptionCreateBean: IssueFieldOptionCreateBean;
}

export interface DeleteIssueFieldOptionRequest {
    fieldKey: string;
    optionId: number;
}

export interface GetAllIssueFieldOptionsRequest {
    fieldKey: string;
    startAt?: number;
    maxResults?: number;
}

export interface GetIssueFieldOptionRequest {
    fieldKey: string;
    optionId: number;
}

export interface GetSelectableIssueFieldOptionsRequest {
    fieldKey: string;
    startAt?: number;
    maxResults?: number;
    projectId?: number;
}

export interface GetVisibleIssueFieldOptionsRequest {
    fieldKey: string;
    startAt?: number;
    maxResults?: number;
    projectId?: number;
}

export interface ReplaceIssueFieldOptionRequest {
    fieldKey: string;
    optionId: number;
    replaceWith?: number;
    jql?: string;
    overrideScreenSecurity?: boolean;
    overrideEditableFlag?: boolean;
}

export interface UpdateIssueFieldOptionRequest {
    fieldKey: string;
    optionId: number;
    issueFieldOption: IssueFieldOption;
}

/**
 * 
 */
export class IssueCustomFieldOptionsAppsApi extends runtime.BaseAPI {

    /**
     * Creates an option for a select list issue field.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  Each field can have a maximum of 10000 options, and each option can have a maximum of 10000 scopes.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * Create issue field option
     */
    async createIssueFieldOptionRaw(requestParameters: CreateIssueFieldOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssueFieldOption>> {
        if (requestParameters['fieldKey'] == null) {
            throw new runtime.RequiredError(
                'fieldKey',
                'Required parameter "fieldKey" was null or undefined when calling createIssueFieldOption().'
            );
        }

        if (requestParameters['issueFieldOptionCreateBean'] == null) {
            throw new runtime.RequiredError(
                'issueFieldOptionCreateBean',
                'Required parameter "issueFieldOptionCreateBean" was null or undefined when calling createIssueFieldOption().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/field/{fieldKey}/option`.replace(`{${"fieldKey"}}`, encodeURIComponent(String(requestParameters['fieldKey']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['issueFieldOptionCreateBean'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates an option for a select list issue field.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  Each field can have a maximum of 10000 options, and each option can have a maximum of 10000 scopes.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * Create issue field option
     */
    async createIssueFieldOption(requestParameters: CreateIssueFieldOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssueFieldOption> {
        const response = await this.createIssueFieldOptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes an option from a select list issue field.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * Delete issue field option
     */
    async deleteIssueFieldOptionRaw(requestParameters: DeleteIssueFieldOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['fieldKey'] == null) {
            throw new runtime.RequiredError(
                'fieldKey',
                'Required parameter "fieldKey" was null or undefined when calling deleteIssueFieldOption().'
            );
        }

        if (requestParameters['optionId'] == null) {
            throw new runtime.RequiredError(
                'optionId',
                'Required parameter "optionId" was null or undefined when calling deleteIssueFieldOption().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/field/{fieldKey}/option/{optionId}`.replace(`{${"fieldKey"}}`, encodeURIComponent(String(requestParameters['fieldKey']))).replace(`{${"optionId"}}`, encodeURIComponent(String(requestParameters['optionId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Deletes an option from a select list issue field.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * Delete issue field option
     */
    async deleteIssueFieldOption(requestParameters: DeleteIssueFieldOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteIssueFieldOptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a [paginated](#pagination) list of all the options of a select list issue field. A select list issue field is a type of [issue field](https://developer.atlassian.com/cloud/jira/platform/modules/issue-field/) that enables a user to select a value from a list of options.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * Get all issue field options
     */
    async getAllIssueFieldOptionsRaw(requestParameters: GetAllIssueFieldOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageBeanIssueFieldOption>> {
        if (requestParameters['fieldKey'] == null) {
            throw new runtime.RequiredError(
                'fieldKey',
                'Required parameter "fieldKey" was null or undefined when calling getAllIssueFieldOptions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startAt'] != null) {
            queryParameters['startAt'] = requestParameters['startAt'];
        }

        if (requestParameters['maxResults'] != null) {
            queryParameters['maxResults'] = requestParameters['maxResults'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/field/{fieldKey}/option`.replace(`{${"fieldKey"}}`, encodeURIComponent(String(requestParameters['fieldKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a [paginated](#pagination) list of all the options of a select list issue field. A select list issue field is a type of [issue field](https://developer.atlassian.com/cloud/jira/platform/modules/issue-field/) that enables a user to select a value from a list of options.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * Get all issue field options
     */
    async getAllIssueFieldOptions(requestParameters: GetAllIssueFieldOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageBeanIssueFieldOption> {
        const response = await this.getAllIssueFieldOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns an option from a select list issue field.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * Get issue field option
     */
    async getIssueFieldOptionRaw(requestParameters: GetIssueFieldOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssueFieldOption>> {
        if (requestParameters['fieldKey'] == null) {
            throw new runtime.RequiredError(
                'fieldKey',
                'Required parameter "fieldKey" was null or undefined when calling getIssueFieldOption().'
            );
        }

        if (requestParameters['optionId'] == null) {
            throw new runtime.RequiredError(
                'optionId',
                'Required parameter "optionId" was null or undefined when calling getIssueFieldOption().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/field/{fieldKey}/option/{optionId}`.replace(`{${"fieldKey"}}`, encodeURIComponent(String(requestParameters['fieldKey']))).replace(`{${"optionId"}}`, encodeURIComponent(String(requestParameters['optionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns an option from a select list issue field.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * Get issue field option
     */
    async getIssueFieldOption(requestParameters: GetIssueFieldOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssueFieldOption> {
        const response = await this.getIssueFieldOptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a [paginated](#pagination) list of options for a select list issue field that can be viewed and selected by the user.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  **[Permissions](#permissions) required:** Permission to access Jira.
     * Get selectable issue field options
     */
    async getSelectableIssueFieldOptionsRaw(requestParameters: GetSelectableIssueFieldOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageBeanIssueFieldOption>> {
        if (requestParameters['fieldKey'] == null) {
            throw new runtime.RequiredError(
                'fieldKey',
                'Required parameter "fieldKey" was null or undefined when calling getSelectableIssueFieldOptions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startAt'] != null) {
            queryParameters['startAt'] = requestParameters['startAt'];
        }

        if (requestParameters['maxResults'] != null) {
            queryParameters['maxResults'] = requestParameters['maxResults'];
        }

        if (requestParameters['projectId'] != null) {
            queryParameters['projectId'] = requestParameters['projectId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/field/{fieldKey}/option/suggestions/edit`.replace(`{${"fieldKey"}}`, encodeURIComponent(String(requestParameters['fieldKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a [paginated](#pagination) list of options for a select list issue field that can be viewed and selected by the user.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  **[Permissions](#permissions) required:** Permission to access Jira.
     * Get selectable issue field options
     */
    async getSelectableIssueFieldOptions(requestParameters: GetSelectableIssueFieldOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageBeanIssueFieldOption> {
        const response = await this.getSelectableIssueFieldOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a [paginated](#pagination) list of options for a select list issue field that can be viewed by the user.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  **[Permissions](#permissions) required:** Permission to access Jira.
     * Get visible issue field options
     */
    async getVisibleIssueFieldOptionsRaw(requestParameters: GetVisibleIssueFieldOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageBeanIssueFieldOption>> {
        if (requestParameters['fieldKey'] == null) {
            throw new runtime.RequiredError(
                'fieldKey',
                'Required parameter "fieldKey" was null or undefined when calling getVisibleIssueFieldOptions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startAt'] != null) {
            queryParameters['startAt'] = requestParameters['startAt'];
        }

        if (requestParameters['maxResults'] != null) {
            queryParameters['maxResults'] = requestParameters['maxResults'];
        }

        if (requestParameters['projectId'] != null) {
            queryParameters['projectId'] = requestParameters['projectId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["read:jira-work"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/field/{fieldKey}/option/suggestions/search`.replace(`{${"fieldKey"}}`, encodeURIComponent(String(requestParameters['fieldKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a [paginated](#pagination) list of options for a select list issue field that can be viewed by the user.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  **[Permissions](#permissions) required:** Permission to access Jira.
     * Get visible issue field options
     */
    async getVisibleIssueFieldOptions(requestParameters: GetVisibleIssueFieldOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageBeanIssueFieldOption> {
        const response = await this.getVisibleIssueFieldOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deselects an issue-field select-list option from all issues where it is selected. A different option can be selected to replace the deselected option. The update can also be limited to a smaller set of issues by using a JQL query.  Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can override the screen security configuration using `overrideScreenSecurity` and `overrideEditableFlag`.  This is an [asynchronous operation](#async). The response object contains a link to the long-running task.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * Replace issue field option
     */
    async replaceIssueFieldOptionRaw(requestParameters: ReplaceIssueFieldOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['fieldKey'] == null) {
            throw new runtime.RequiredError(
                'fieldKey',
                'Required parameter "fieldKey" was null or undefined when calling replaceIssueFieldOption().'
            );
        }

        if (requestParameters['optionId'] == null) {
            throw new runtime.RequiredError(
                'optionId',
                'Required parameter "optionId" was null or undefined when calling replaceIssueFieldOption().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['replaceWith'] != null) {
            queryParameters['replaceWith'] = requestParameters['replaceWith'];
        }

        if (requestParameters['jql'] != null) {
            queryParameters['jql'] = requestParameters['jql'];
        }

        if (requestParameters['overrideScreenSecurity'] != null) {
            queryParameters['overrideScreenSecurity'] = requestParameters['overrideScreenSecurity'];
        }

        if (requestParameters['overrideEditableFlag'] != null) {
            queryParameters['overrideEditableFlag'] = requestParameters['overrideEditableFlag'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/field/{fieldKey}/option/{optionId}/issue`.replace(`{${"fieldKey"}}`, encodeURIComponent(String(requestParameters['fieldKey']))).replace(`{${"optionId"}}`, encodeURIComponent(String(requestParameters['optionId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deselects an issue-field select-list option from all issues where it is selected. A different option can be selected to replace the deselected option. The update can also be limited to a smaller set of issues by using a JQL query.  Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can override the screen security configuration using `overrideScreenSecurity` and `overrideEditableFlag`.  This is an [asynchronous operation](#async). The response object contains a link to the long-running task.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * Replace issue field option
     */
    async replaceIssueFieldOption(requestParameters: ReplaceIssueFieldOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.replaceIssueFieldOptionRaw(requestParameters, initOverrides);
    }

    /**
     * Updates or creates an option for a select list issue field. This operation requires that the option ID is provided when creating an option, therefore, the option ID needs to be specified as a path and body parameter. The option ID provided in the path and body must be identical.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * Update issue field option
     */
    async updateIssueFieldOptionRaw(requestParameters: UpdateIssueFieldOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IssueFieldOption>> {
        if (requestParameters['fieldKey'] == null) {
            throw new runtime.RequiredError(
                'fieldKey',
                'Required parameter "fieldKey" was null or undefined when calling updateIssueFieldOption().'
            );
        }

        if (requestParameters['optionId'] == null) {
            throw new runtime.RequiredError(
                'optionId',
                'Required parameter "optionId" was null or undefined when calling updateIssueFieldOption().'
            );
        }

        if (requestParameters['issueFieldOption'] == null) {
            throw new runtime.RequiredError(
                'issueFieldOption',
                'Required parameter "issueFieldOption" was null or undefined when calling updateIssueFieldOption().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/field/{fieldKey}/option/{optionId}`.replace(`{${"fieldKey"}}`, encodeURIComponent(String(requestParameters['fieldKey']))).replace(`{${"optionId"}}`, encodeURIComponent(String(requestParameters['optionId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['issueFieldOption'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Updates or creates an option for a select list issue field. This operation requires that the option ID is provided when creating an option, therefore, the option ID needs to be specified as a path and body parameter. The option ID provided in the path and body must be identical.  Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * Update issue field option
     */
    async updateIssueFieldOption(requestParameters: UpdateIssueFieldOptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IssueFieldOption> {
        const response = await this.updateIssueFieldOptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
