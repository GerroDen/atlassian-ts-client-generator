/* tslint:disable */
/* eslint-disable */
/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-006326f44f7f2ca50c1f9c8c88f70b27eb18a140
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AssociateFieldConfigurationsWithIssueTypesRequest,
  ErrorCollection,
  FieldConfiguration,
  FieldConfigurationDetails,
  FieldConfigurationItemsDetails,
  FieldConfigurationScheme,
  FieldConfigurationSchemeProjectAssociation,
  IssueTypeIdsToRemove,
  PageBeanFieldConfigurationDetails,
  PageBeanFieldConfigurationIssueTypeItem,
  PageBeanFieldConfigurationItem,
  PageBeanFieldConfigurationScheme,
  PageBeanFieldConfigurationSchemeProjects,
  UpdateFieldConfigurationSchemeDetails,
} from '../models/index';

export interface AssignFieldConfigurationSchemeToProjectRequest {
    fieldConfigurationSchemeProjectAssociation: FieldConfigurationSchemeProjectAssociation;
}

export interface CreateFieldConfigurationRequest {
    fieldConfigurationDetails: FieldConfigurationDetails;
}

export interface CreateFieldConfigurationSchemeRequest {
    updateFieldConfigurationSchemeDetails: UpdateFieldConfigurationSchemeDetails;
}

export interface DeleteFieldConfigurationRequest {
    id: number;
}

export interface DeleteFieldConfigurationSchemeRequest {
    id: number;
}

export interface GetAllFieldConfigurationSchemesRequest {
    startAt?: number;
    maxResults?: number;
    id?: Array<number>;
}

export interface GetAllFieldConfigurationsRequest {
    startAt?: number;
    maxResults?: number;
    id?: Array<number>;
    isDefault?: boolean;
    query?: string;
}

export interface GetFieldConfigurationItemsRequest {
    id: number;
    startAt?: number;
    maxResults?: number;
}

export interface GetFieldConfigurationSchemeMappingsRequest {
    startAt?: number;
    maxResults?: number;
    fieldConfigurationSchemeId?: Array<number>;
}

export interface GetFieldConfigurationSchemeProjectMappingRequest {
    projectId: Array<number>;
    startAt?: number;
    maxResults?: number;
}

export interface RemoveIssueTypesFromGlobalFieldConfigurationSchemeRequest {
    id: number;
    issueTypeIdsToRemove: IssueTypeIdsToRemove;
}

export interface SetFieldConfigurationSchemeMappingRequest {
    id: number;
    associateFieldConfigurationsWithIssueTypesRequest: AssociateFieldConfigurationsWithIssueTypesRequest;
}

export interface UpdateFieldConfigurationRequest {
    id: number;
    fieldConfigurationDetails: FieldConfigurationDetails;
}

export interface UpdateFieldConfigurationItemsRequest {
    id: number;
    fieldConfigurationItemsDetails: FieldConfigurationItemsDetails;
}

export interface UpdateFieldConfigurationSchemeRequest {
    id: number;
    updateFieldConfigurationSchemeDetails: UpdateFieldConfigurationSchemeDetails;
}

/**
 * 
 */
export class IssueFieldConfigurationsApi extends runtime.BaseAPI {

    /**
     * Assigns a field configuration scheme to a project. If the field configuration scheme ID is `null`, the operation assigns the default field configuration scheme.  Field configuration schemes can only be assigned to classic projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Assign field configuration scheme to project
     */
    async assignFieldConfigurationSchemeToProjectRaw(requestParameters: AssignFieldConfigurationSchemeToProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['fieldConfigurationSchemeProjectAssociation'] == null) {
            throw new runtime.RequiredError(
                'fieldConfigurationSchemeProjectAssociation',
                'Required parameter "fieldConfigurationSchemeProjectAssociation" was null or undefined when calling assignFieldConfigurationSchemeToProject().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/fieldconfigurationscheme/project`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['fieldConfigurationSchemeProjectAssociation'],
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Assigns a field configuration scheme to a project. If the field configuration scheme ID is `null`, the operation assigns the default field configuration scheme.  Field configuration schemes can only be assigned to classic projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Assign field configuration scheme to project
     */
    async assignFieldConfigurationSchemeToProject(requestParameters: AssignFieldConfigurationSchemeToProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.assignFieldConfigurationSchemeToProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a field configuration. The field configuration is created with the same field properties as the default configuration, with all the fields being optional.  This operation can only create configurations for use in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Create field configuration
     */
    async createFieldConfigurationRaw(requestParameters: CreateFieldConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FieldConfiguration>> {
        if (requestParameters['fieldConfigurationDetails'] == null) {
            throw new runtime.RequiredError(
                'fieldConfigurationDetails',
                'Required parameter "fieldConfigurationDetails" was null or undefined when calling createFieldConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/fieldconfiguration`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['fieldConfigurationDetails'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a field configuration. The field configuration is created with the same field properties as the default configuration, with all the fields being optional.  This operation can only create configurations for use in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Create field configuration
     */
    async createFieldConfiguration(requestParameters: CreateFieldConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FieldConfiguration> {
        const response = await this.createFieldConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a field configuration scheme.  This operation can only create field configuration schemes used in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Create field configuration scheme
     */
    async createFieldConfigurationSchemeRaw(requestParameters: CreateFieldConfigurationSchemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FieldConfigurationScheme>> {
        if (requestParameters['updateFieldConfigurationSchemeDetails'] == null) {
            throw new runtime.RequiredError(
                'updateFieldConfigurationSchemeDetails',
                'Required parameter "updateFieldConfigurationSchemeDetails" was null or undefined when calling createFieldConfigurationScheme().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/fieldconfigurationscheme`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['updateFieldConfigurationSchemeDetails'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a field configuration scheme.  This operation can only create field configuration schemes used in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Create field configuration scheme
     */
    async createFieldConfigurationScheme(requestParameters: CreateFieldConfigurationSchemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FieldConfigurationScheme> {
        const response = await this.createFieldConfigurationSchemeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a field configuration.  This operation can only delete configurations used in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Delete field configuration
     */
    async deleteFieldConfigurationRaw(requestParameters: DeleteFieldConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteFieldConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/fieldconfiguration/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Deletes a field configuration.  This operation can only delete configurations used in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Delete field configuration
     */
    async deleteFieldConfiguration(requestParameters: DeleteFieldConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteFieldConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a field configuration scheme.  This operation can only delete field configuration schemes used in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Delete field configuration scheme
     */
    async deleteFieldConfigurationSchemeRaw(requestParameters: DeleteFieldConfigurationSchemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteFieldConfigurationScheme().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/fieldconfigurationscheme/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Deletes a field configuration scheme.  This operation can only delete field configuration schemes used in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Delete field configuration scheme
     */
    async deleteFieldConfigurationScheme(requestParameters: DeleteFieldConfigurationSchemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteFieldConfigurationSchemeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a [paginated](#pagination) list of field configuration schemes.  Only field configuration schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get all field configuration schemes
     */
    async getAllFieldConfigurationSchemesRaw(requestParameters: GetAllFieldConfigurationSchemesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageBeanFieldConfigurationScheme>> {
        const queryParameters: any = {};

        if (requestParameters['startAt'] != null) {
            queryParameters['startAt'] = requestParameters['startAt'];
        }

        if (requestParameters['maxResults'] != null) {
            queryParameters['maxResults'] = requestParameters['maxResults'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/fieldconfigurationscheme`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a [paginated](#pagination) list of field configuration schemes.  Only field configuration schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get all field configuration schemes
     */
    async getAllFieldConfigurationSchemes(requestParameters: GetAllFieldConfigurationSchemesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageBeanFieldConfigurationScheme> {
        const response = await this.getAllFieldConfigurationSchemesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a [paginated](#pagination) list of field configurations. The list can be for all field configurations or a subset determined by any combination of these criteria:   *  a list of field configuration item IDs.  *  whether the field configuration is a default.  *  whether the field configuration name or description contains a query string.  Only field configurations used in company-managed (classic) projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get all field configurations
     */
    async getAllFieldConfigurationsRaw(requestParameters: GetAllFieldConfigurationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageBeanFieldConfigurationDetails>> {
        const queryParameters: any = {};

        if (requestParameters['startAt'] != null) {
            queryParameters['startAt'] = requestParameters['startAt'];
        }

        if (requestParameters['maxResults'] != null) {
            queryParameters['maxResults'] = requestParameters['maxResults'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['isDefault'] != null) {
            queryParameters['isDefault'] = requestParameters['isDefault'];
        }

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/fieldconfiguration`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a [paginated](#pagination) list of field configurations. The list can be for all field configurations or a subset determined by any combination of these criteria:   *  a list of field configuration item IDs.  *  whether the field configuration is a default.  *  whether the field configuration name or description contains a query string.  Only field configurations used in company-managed (classic) projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get all field configurations
     */
    async getAllFieldConfigurations(requestParameters: GetAllFieldConfigurationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageBeanFieldConfigurationDetails> {
        const response = await this.getAllFieldConfigurationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a [paginated](#pagination) list of all fields for a configuration.  Only the fields from configurations used in company-managed (classic) projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get field configuration items
     */
    async getFieldConfigurationItemsRaw(requestParameters: GetFieldConfigurationItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageBeanFieldConfigurationItem>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getFieldConfigurationItems().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startAt'] != null) {
            queryParameters['startAt'] = requestParameters['startAt'];
        }

        if (requestParameters['maxResults'] != null) {
            queryParameters['maxResults'] = requestParameters['maxResults'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/fieldconfiguration/{id}/fields`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a [paginated](#pagination) list of all fields for a configuration.  Only the fields from configurations used in company-managed (classic) projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get field configuration items
     */
    async getFieldConfigurationItems(requestParameters: GetFieldConfigurationItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageBeanFieldConfigurationItem> {
        const response = await this.getFieldConfigurationItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a [paginated](#pagination) list of field configuration issue type items.  Only items used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get field configuration issue type items
     */
    async getFieldConfigurationSchemeMappingsRaw(requestParameters: GetFieldConfigurationSchemeMappingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageBeanFieldConfigurationIssueTypeItem>> {
        const queryParameters: any = {};

        if (requestParameters['startAt'] != null) {
            queryParameters['startAt'] = requestParameters['startAt'];
        }

        if (requestParameters['maxResults'] != null) {
            queryParameters['maxResults'] = requestParameters['maxResults'];
        }

        if (requestParameters['fieldConfigurationSchemeId'] != null) {
            queryParameters['fieldConfigurationSchemeId'] = requestParameters['fieldConfigurationSchemeId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/fieldconfigurationscheme/mapping`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a [paginated](#pagination) list of field configuration issue type items.  Only items used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get field configuration issue type items
     */
    async getFieldConfigurationSchemeMappings(requestParameters: GetFieldConfigurationSchemeMappingsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageBeanFieldConfigurationIssueTypeItem> {
        const response = await this.getFieldConfigurationSchemeMappingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a [paginated](#pagination) list of field configuration schemes and, for each scheme, a list of the projects that use it.  The list is sorted by field configuration scheme ID. The first item contains the list of project IDs assigned to the default field configuration scheme.  Only field configuration schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get field configuration schemes for projects
     */
    async getFieldConfigurationSchemeProjectMappingRaw(requestParameters: GetFieldConfigurationSchemeProjectMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageBeanFieldConfigurationSchemeProjects>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getFieldConfigurationSchemeProjectMapping().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startAt'] != null) {
            queryParameters['startAt'] = requestParameters['startAt'];
        }

        if (requestParameters['maxResults'] != null) {
            queryParameters['maxResults'] = requestParameters['maxResults'];
        }

        if (requestParameters['projectId'] != null) {
            queryParameters['projectId'] = requestParameters['projectId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/fieldconfigurationscheme/project`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a [paginated](#pagination) list of field configuration schemes and, for each scheme, a list of the projects that use it.  The list is sorted by field configuration scheme ID. The first item contains the list of project IDs assigned to the default field configuration scheme.  Only field configuration schemes used in classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Get field configuration schemes for projects
     */
    async getFieldConfigurationSchemeProjectMapping(requestParameters: GetFieldConfigurationSchemeProjectMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageBeanFieldConfigurationSchemeProjects> {
        const response = await this.getFieldConfigurationSchemeProjectMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes issue types from the field configuration scheme.  This operation can only modify field configuration schemes used in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Remove issue types from field configuration scheme
     */
    async removeIssueTypesFromGlobalFieldConfigurationSchemeRaw(requestParameters: RemoveIssueTypesFromGlobalFieldConfigurationSchemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeIssueTypesFromGlobalFieldConfigurationScheme().'
            );
        }

        if (requestParameters['issueTypeIdsToRemove'] == null) {
            throw new runtime.RequiredError(
                'issueTypeIdsToRemove',
                'Required parameter "issueTypeIdsToRemove" was null or undefined when calling removeIssueTypesFromGlobalFieldConfigurationScheme().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/fieldconfigurationscheme/{id}/mapping/delete`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['issueTypeIdsToRemove'],
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Removes issue types from the field configuration scheme.  This operation can only modify field configuration schemes used in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Remove issue types from field configuration scheme
     */
    async removeIssueTypesFromGlobalFieldConfigurationScheme(requestParameters: RemoveIssueTypesFromGlobalFieldConfigurationSchemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.removeIssueTypesFromGlobalFieldConfigurationSchemeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assigns issue types to field configurations on field configuration scheme.  This operation can only modify field configuration schemes used in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Assign issue types to field configurations
     */
    async setFieldConfigurationSchemeMappingRaw(requestParameters: SetFieldConfigurationSchemeMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling setFieldConfigurationSchemeMapping().'
            );
        }

        if (requestParameters['associateFieldConfigurationsWithIssueTypesRequest'] == null) {
            throw new runtime.RequiredError(
                'associateFieldConfigurationsWithIssueTypesRequest',
                'Required parameter "associateFieldConfigurationsWithIssueTypesRequest" was null or undefined when calling setFieldConfigurationSchemeMapping().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/fieldconfigurationscheme/{id}/mapping`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['associateFieldConfigurationsWithIssueTypesRequest'],
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Assigns issue types to field configurations on field configuration scheme.  This operation can only modify field configuration schemes used in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Assign issue types to field configurations
     */
    async setFieldConfigurationSchemeMapping(requestParameters: SetFieldConfigurationSchemeMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.setFieldConfigurationSchemeMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a field configuration. The name and the description provided in the request override the existing values.  This operation can only update configurations used in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Update field configuration
     */
    async updateFieldConfigurationRaw(requestParameters: UpdateFieldConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateFieldConfiguration().'
            );
        }

        if (requestParameters['fieldConfigurationDetails'] == null) {
            throw new runtime.RequiredError(
                'fieldConfigurationDetails',
                'Required parameter "fieldConfigurationDetails" was null or undefined when calling updateFieldConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/fieldconfiguration/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['fieldConfigurationDetails'],
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Updates a field configuration. The name and the description provided in the request override the existing values.  This operation can only update configurations used in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Update field configuration
     */
    async updateFieldConfiguration(requestParameters: UpdateFieldConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.updateFieldConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates fields in a field configuration. The properties of the field configuration fields provided override the existing values.  This operation can only update field configurations used in company-managed (classic) projects.  The operation can set the renderer for text fields to the default text renderer (`text-renderer`) or wiki style renderer (`wiki-renderer`). However, the renderer cannot be updated for fields using the autocomplete renderer (`autocomplete-renderer`).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Update field configuration items
     */
    async updateFieldConfigurationItemsRaw(requestParameters: UpdateFieldConfigurationItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateFieldConfigurationItems().'
            );
        }

        if (requestParameters['fieldConfigurationItemsDetails'] == null) {
            throw new runtime.RequiredError(
                'fieldConfigurationItemsDetails',
                'Required parameter "fieldConfigurationItemsDetails" was null or undefined when calling updateFieldConfigurationItems().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/fieldconfiguration/{id}/fields`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['fieldConfigurationItemsDetails'],
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Updates fields in a field configuration. The properties of the field configuration fields provided override the existing values.  This operation can only update field configurations used in company-managed (classic) projects.  The operation can set the renderer for text fields to the default text renderer (`text-renderer`) or wiki style renderer (`wiki-renderer`). However, the renderer cannot be updated for fields using the autocomplete renderer (`autocomplete-renderer`).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Update field configuration items
     */
    async updateFieldConfigurationItems(requestParameters: UpdateFieldConfigurationItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.updateFieldConfigurationItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a field configuration scheme.  This operation can only update field configuration schemes used in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Update field configuration scheme
     */
    async updateFieldConfigurationSchemeRaw(requestParameters: UpdateFieldConfigurationSchemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateFieldConfigurationScheme().'
            );
        }

        if (requestParameters['updateFieldConfigurationSchemeDetails'] == null) {
            throw new runtime.RequiredError(
                'updateFieldConfigurationSchemeDetails',
                'Required parameter "updateFieldConfigurationSchemeDetails" was null or undefined when calling updateFieldConfigurationScheme().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", ["manage:jira-configuration"]);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/fieldconfigurationscheme/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['updateFieldConfigurationSchemeDetails'],
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Updates a field configuration scheme.  This operation can only update field configuration schemes used in company-managed (classic) projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * Update field configuration scheme
     */
    async updateFieldConfigurationScheme(requestParameters: UpdateFieldConfigurationSchemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.updateFieldConfigurationSchemeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
