/* tslint:disable */
/* eslint-disable */
/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT-006326f44f7f2ca50c1f9c8c88f70b27eb18a140
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CustomFieldValueUpdateDetails,
  MultipleCustomFieldValuesUpdateDetails,
} from '../models/index';

export interface UpdateCustomFieldValueRequest {
    fieldIdOrKey: string;
    customFieldValueUpdateDetails: CustomFieldValueUpdateDetails;
    generateChangelog?: boolean;
}

export interface UpdateMultipleCustomFieldValuesRequest {
    multipleCustomFieldValuesUpdateDetails: MultipleCustomFieldValuesUpdateDetails;
    generateChangelog?: boolean;
}

/**
 * 
 */
export class IssueCustomFieldValuesAppsApi extends runtime.BaseAPI {

    /**
     * Updates the value of a custom field on one or more issues.  Apps can only perform this operation on [custom fields](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/) and [custom field types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/) declared in their own manifests.  **[Permissions](#permissions) required:** Only the app that owns the custom field or custom field type can update its values with this operation.  The new `write:app-data:jira` OAuth scope is 100% optional now, and not using it won\'t break your app. However, we recommend adding it to your app\'s scope list because we will eventually make it mandatory.
     * Update custom field value
     */
    async updateCustomFieldValueRaw(requestParameters: UpdateCustomFieldValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['fieldIdOrKey'] == null) {
            throw new runtime.RequiredError(
                'fieldIdOrKey',
                'Required parameter "fieldIdOrKey" was null or undefined when calling updateCustomFieldValue().'
            );
        }

        if (requestParameters['customFieldValueUpdateDetails'] == null) {
            throw new runtime.RequiredError(
                'customFieldValueUpdateDetails',
                'Required parameter "customFieldValueUpdateDetails" was null or undefined when calling updateCustomFieldValue().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['generateChangelog'] != null) {
            queryParameters['generateChangelog'] = requestParameters['generateChangelog'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/app/field/{fieldIdOrKey}/value`.replace(`{${"fieldIdOrKey"}}`, encodeURIComponent(String(requestParameters['fieldIdOrKey']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['customFieldValueUpdateDetails'],
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Updates the value of a custom field on one or more issues.  Apps can only perform this operation on [custom fields](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/) and [custom field types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/) declared in their own manifests.  **[Permissions](#permissions) required:** Only the app that owns the custom field or custom field type can update its values with this operation.  The new `write:app-data:jira` OAuth scope is 100% optional now, and not using it won\'t break your app. However, we recommend adding it to your app\'s scope list because we will eventually make it mandatory.
     * Update custom field value
     */
    async updateCustomFieldValue(requestParameters: UpdateCustomFieldValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.updateCustomFieldValueRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the value of one or more custom fields on one or more issues. Combinations of custom field and issue should be unique within the request.  Apps can only perform this operation on [custom fields](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/) and [custom field types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/) declared in their own manifests.  **[Permissions](#permissions) required:** Only the app that owns the custom field or custom field type can update its values with this operation.  The new `write:app-data:jira` OAuth scope is 100% optional now, and not using it won\'t break your app. However, we recommend adding it to your app\'s scope list because we will eventually make it mandatory.
     * Update custom fields
     */
    async updateMultipleCustomFieldValuesRaw(requestParameters: UpdateMultipleCustomFieldValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['multipleCustomFieldValuesUpdateDetails'] == null) {
            throw new runtime.RequiredError(
                'multipleCustomFieldValuesUpdateDetails',
                'Required parameter "multipleCustomFieldValuesUpdateDetails" was null or undefined when calling updateMultipleCustomFieldValues().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['generateChangelog'] != null) {
            queryParameters['generateChangelog'] = requestParameters['generateChangelog'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/rest/api/3/app/field/value`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['multipleCustomFieldValuesUpdateDetails'],
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Updates the value of one or more custom fields on one or more issues. Combinations of custom field and issue should be unique within the request.  Apps can only perform this operation on [custom fields](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/) and [custom field types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/) declared in their own manifests.  **[Permissions](#permissions) required:** Only the app that owns the custom field or custom field type can update its values with this operation.  The new `write:app-data:jira` OAuth scope is 100% optional now, and not using it won\'t break your app. However, we recommend adding it to your app\'s scope list because we will eventually make it mandatory.
     * Update custom fields
     */
    async updateMultipleCustomFieldValues(requestParameters: UpdateMultipleCustomFieldValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.updateMultipleCustomFieldValuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
