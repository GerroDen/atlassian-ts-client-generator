/* tslint:disable */
/* eslint-disable */
/**
 * Bitbucket Data Center
 * This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetAllAccessTokens401Response,
  GetCommitsByIssueKey200Response,
  RestCommentJiraIssue,
  RestEnhancedEntityLink,
  RestJiraIssue,
} from '../models/index';

interface CreateIssueRequest {
    commentId: string;
    applicationId?: string;
    body?: string;
}

interface GetCommitsByIssueKeyRequest {
    issueKey: string;
    maxChanges?: string;
    start?: number;
    limit?: number;
}

interface GetEnhancedEntityLinkForProjectRequest {
    projectKey: string;
}

interface GetIssueKeysForPullRequestRequest {
    projectKey: string;
    pullRequestId: string;
    repositorySlug: string;
}

/**
 * 
 */
export class JiraIntegrationApi extends runtime.BaseAPI {

    /**
     * Create a Jira issue and associate it with a comment on a pull request.  This resource can only be used with comments on a pull request. Attempting to call this resource with a different type of comment (for example, a comment on a commit) will result in an error.    The authenticated user must have <strong>REPO_READ</strong> permission for the repository containing the comment to call this resource.  The JSON structure for the create issue format is specified by Jira\'s REST v2 API.
     * Create Jira Issue
     */
    async createIssueRaw(requestParameters: CreateIssueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestCommentJiraIssue>> {
        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling createIssue().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['applicationId'] != null) {
            queryParameters['applicationId'] = requestParameters['applicationId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/jira/latest/comments/{commentId}/issues`.replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters['commentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create a Jira issue and associate it with a comment on a pull request.  This resource can only be used with comments on a pull request. Attempting to call this resource with a different type of comment (for example, a comment on a commit) will result in an error.    The authenticated user must have <strong>REPO_READ</strong> permission for the repository containing the comment to call this resource.  The JSON structure for the create issue format is specified by Jira\'s REST v2 API.
     * Create Jira Issue
     */
    async createIssue(requestParameters: CreateIssueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestCommentJiraIssue> {
        const response = await this.createIssueRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a page of changesets associated with the given issue key.
     * Get changesets for issue key
     */
    async getCommitsByIssueKeyRaw(requestParameters: GetCommitsByIssueKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCommitsByIssueKey200Response>> {
        if (requestParameters['issueKey'] == null) {
            throw new runtime.RequiredError(
                'issueKey',
                'Required parameter "issueKey" was null or undefined when calling getCommitsByIssueKey().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['maxChanges'] != null) {
            queryParameters['maxChanges'] = requestParameters['maxChanges'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/jira/latest/issues/{issueKey}/commits`.replace(`{${"issueKey"}}`, encodeURIComponent(String(requestParameters['issueKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieve a page of changesets associated with the given issue key.
     * Get changesets for issue key
     */
    async getCommitsByIssueKey(requestParameters: GetCommitsByIssueKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCommitsByIssueKey200Response> {
        const response = await this.getCommitsByIssueKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the enchanced primary entitylink   The authenticated user must have <strong>PROJECT_READ</strong> permission for the project having the primary enhanced entitylink.   
     * Get entity link
     */
    async getEnhancedEntityLinkForProjectRaw(requestParameters: GetEnhancedEntityLinkForProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestEnhancedEntityLink>> {
        if (requestParameters['projectKey'] == null) {
            throw new runtime.RequiredError(
                'projectKey',
                'Required parameter "projectKey" was null or undefined when calling getEnhancedEntityLinkForProject().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/jira/latest/projects/{projectKey}/primary-enhanced-entitylink`.replace(`{${"projectKey"}}`, encodeURIComponent(String(requestParameters['projectKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves the enchanced primary entitylink   The authenticated user must have <strong>PROJECT_READ</strong> permission for the project having the primary enhanced entitylink.   
     * Get entity link
     */
    async getEnhancedEntityLinkForProject(requestParameters: GetEnhancedEntityLinkForProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestEnhancedEntityLink> {
        const response = await this.getEnhancedEntityLinkForProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves Jira issue keys that are associated with the commits in the specified pull request. The number of commits checked for issues is limited to a default of 100.
     * Get issues for a pull request
     */
    async getIssueKeysForPullRequestRaw(requestParameters: GetIssueKeysForPullRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RestJiraIssue>>> {
        if (requestParameters['projectKey'] == null) {
            throw new runtime.RequiredError(
                'projectKey',
                'Required parameter "projectKey" was null or undefined when calling getIssueKeysForPullRequest().'
            );
        }

        if (requestParameters['pullRequestId'] == null) {
            throw new runtime.RequiredError(
                'pullRequestId',
                'Required parameter "pullRequestId" was null or undefined when calling getIssueKeysForPullRequest().'
            );
        }

        if (requestParameters['repositorySlug'] == null) {
            throw new runtime.RequiredError(
                'repositorySlug',
                'Required parameter "repositorySlug" was null or undefined when calling getIssueKeysForPullRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/jira/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/issues`.replace(`{${"projectKey"}}`, encodeURIComponent(String(requestParameters['projectKey']))).replace(`{${"pullRequestId"}}`, encodeURIComponent(String(requestParameters['pullRequestId']))).replace(`{${"repositorySlug"}}`, encodeURIComponent(String(requestParameters['repositorySlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves Jira issue keys that are associated with the commits in the specified pull request. The number of commits checked for issues is limited to a default of 100.
     * Get issues for a pull request
     */
    async getIssueKeysForPullRequest(requestParameters: GetIssueKeysForPullRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RestJiraIssue>> {
        const response = await this.getIssueKeysForPullRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
