/* tslint:disable */
/* eslint-disable */
/**
 * Bitbucket Data Center
 * This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).
 *
 * The version of the OpenAPI document: 9.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetAllAccessTokens401Response,
  GetPullRequestSuggestions200Response,
  GetPullRequests1200Response,
} from '../models/index';

interface GetPullRequestSuggestionsRequest {
    changesSince?: string;
    limit?: string;
}

interface GetPullRequests1Request {
    closedSince?: string;
    role?: string;
    participantStatus?: string;
    state?: string;
    user?: string;
    order?: string;
    start?: number;
    limit?: number;
}

/**
 * 
 */
export class DashboardApi extends runtime.BaseAPI {

    /**
     * Retrieves a page of suggestions for pull requests that the currently authenticated user may wish to raise. Such suggestions are based on ref changes occurring and so contain the ref change that prompted the suggestion plus the time the change event occurred. Changes will be returned in descending order based on the time the change that prompted the suggestion occurred.   Note that although the response is a page object, the interface does not support paging, however a limit can be applied to the size of the returned page.
     * Get pull request suggestions
     */
    async getPullRequestSuggestionsRaw(requestParameters: GetPullRequestSuggestionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPullRequestSuggestions200Response>> {
        const queryParameters: any = {};

        if (requestParameters['changesSince'] != null) {
            queryParameters['changesSince'] = requestParameters['changesSince'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/dashboard/pull-request-suggestions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a page of suggestions for pull requests that the currently authenticated user may wish to raise. Such suggestions are based on ref changes occurring and so contain the ref change that prompted the suggestion plus the time the change event occurred. Changes will be returned in descending order based on the time the change that prompted the suggestion occurred.   Note that although the response is a page object, the interface does not support paging, however a limit can be applied to the size of the returned page.
     * Get pull request suggestions
     */
    async getPullRequestSuggestions(requestParameters: GetPullRequestSuggestionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPullRequestSuggestions200Response> {
        const response = await this.getPullRequestSuggestionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a page of pull requests where a user is involved as either a reviewer, author or a participant. The request may be filtered by pull request state, role or participant status.
     * Get pull requests for a user
     */
    async getPullRequests1Raw(requestParameters: GetPullRequests1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPullRequests1200Response>> {
        const queryParameters: any = {};

        if (requestParameters['closedSince'] != null) {
            queryParameters['closedSince'] = requestParameters['closedSince'];
        }

        if (requestParameters['role'] != null) {
            queryParameters['role'] = requestParameters['role'];
        }

        if (requestParameters['participantStatus'] != null) {
            queryParameters['participantStatus'] = requestParameters['participantStatus'];
        }

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }

        if (requestParameters['user'] != null) {
            queryParameters['user'] = requestParameters['user'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/dashboard/pull-requests`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieve a page of pull requests where a user is involved as either a reviewer, author or a participant. The request may be filtered by pull request state, role or participant status.
     * Get pull requests for a user
     */
    async getPullRequests1(requestParameters: GetPullRequests1Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPullRequests1200Response> {
        const response = await this.getPullRequests1Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
