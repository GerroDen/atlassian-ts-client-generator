/* tslint:disable */
/* eslint-disable */
/**
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 11.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  NextBuildNumber,
} from '../models/index';

export interface BumpBuildNumberRequest {
    projectKey: string;
    buildKey: string;
    nextBuildNumber: NextBuildNumber;
}

export interface GetNextBuildNumberRequest {
    projectKey: string;
    buildKey: string;
}

/**
 * 
 */
export class BuildNumberApi extends runtime.BaseAPI {

    /**
     * Bump the next build number for a given plan or plan branch to the specified value.
     */
    async bumpBuildNumberRaw(requestParameters: BumpBuildNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectKey'] == null) {
            throw new runtime.RequiredError(
                'projectKey',
                'Required parameter "projectKey" was null or undefined when calling bumpBuildNumber().'
            );
        }

        if (requestParameters['buildKey'] == null) {
            throw new runtime.RequiredError(
                'buildKey',
                'Required parameter "buildKey" was null or undefined when calling bumpBuildNumber().'
            );
        }

        if (requestParameters['nextBuildNumber'] == null) {
            throw new runtime.RequiredError(
                'nextBuildNumber',
                'Required parameter "nextBuildNumber" was null or undefined when calling bumpBuildNumber().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/buildNumber/{projectKey}-{buildKey}/bump`.replace(`{${"projectKey"}}`, encodeURIComponent(String(requestParameters['projectKey']))).replace(`{${"buildKey"}}`, encodeURIComponent(String(requestParameters['buildKey']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['nextBuildNumber'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Bump the next build number for a given plan or plan branch to the specified value.
     */
    async bumpBuildNumber(requestParameters: BumpBuildNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.bumpBuildNumberRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve the next build number for a given plan or plan branch.
     */
    async getNextBuildNumberRaw(requestParameters: GetNextBuildNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NextBuildNumber>> {
        if (requestParameters['projectKey'] == null) {
            throw new runtime.RequiredError(
                'projectKey',
                'Required parameter "projectKey" was null or undefined when calling getNextBuildNumber().'
            );
        }

        if (requestParameters['buildKey'] == null) {
            throw new runtime.RequiredError(
                'buildKey',
                'Required parameter "buildKey" was null or undefined when calling getNextBuildNumber().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/buildNumber/{projectKey}-{buildKey}`.replace(`{${"projectKey"}}`, encodeURIComponent(String(requestParameters['projectKey']))).replace(`{${"buildKey"}}`, encodeURIComponent(String(requestParameters['buildKey']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieve the next build number for a given plan or plan branch.
     */
    async getNextBuildNumber(requestParameters: GetNextBuildNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NextBuildNumber> {
        const response = await this.getNextBuildNumberRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
