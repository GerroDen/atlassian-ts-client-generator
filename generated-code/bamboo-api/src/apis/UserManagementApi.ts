/* tslint:disable */
/* eslint-disable */
/**
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 11.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FindUsersInGroup200Response,
  GetGroups200Response,
  GetUserRepositoryAliases200Response,
  GetUserTokens200Response,
  RestErrorCollection,
  RestGroup,
  RestNewUser,
  RestUserAlias,
  RestUserPasswordUpdate,
  RestUserRenameRequest,
} from '../models/index';

export interface AddUsersToGroupRequest {
    name: string;
    requestBody?: Array<string>;
}

export interface AssignGroupsRequest {
    name: string;
    requestBody: Array<string>;
}

export interface ChangeUserPasswordRequest {
    restUserPasswordUpdate: RestUserPasswordUpdate;
}

export interface CreateGroup1Request {
    restGroup: Omit<RestGroup, 'editable'|'self'>;
}

export interface CreateUserRequest {
    restNewUser: Omit<RestNewUser, 'self'>;
}

export interface CreateUserRepositoryAliasRequest {
    name: string;
    requestBody: Array<string>;
}

export interface DeleteGroupRequest {
    name: string;
}

export interface DeleteUserRequest {
    name: string;
}

export interface FindAssignedGroupsRequest {
    name: string;
    filter?: string;
    limit?: number;
    start?: number;
}

export interface FindUnassignedGroupsRequest {
    name: string;
    filter?: string;
    limit?: number;
    start?: number;
}

export interface FindUnassignedUserRepositoryAliasesRequest {
    name: string;
    filter?: string;
    limit?: number;
    start?: number;
}

export interface FindUsersInGroupRequest {
    name: string;
    filter?: string;
    limit?: number;
    start?: number;
}

export interface FindUsersNotInGroupRequest {
    name: string;
    filter?: string;
    limit?: number;
    start?: number;
}

export interface GetGroupsRequest {
    filter?: string;
    limit?: number;
    start?: number;
}

export interface GetUserAccessTokensRequest {
    name: string;
    limit?: number;
    start?: number;
}

export interface GetUserRepositoryAliasesRequest {
    name: string;
    limit?: number;
    start?: number;
}

export interface GetUsersRequest {
    filter?: string;
    limit?: number;
    start?: number;
}

export interface RemoveUsersFromGroupRequest {
    name: string;
    requestBody?: Array<string>;
}

export interface RenameUserRequest {
    restUserRenameRequest: RestUserRenameRequest;
}

export interface RenameUserPostRequest {
    restUserRenameRequest: RestUserRenameRequest;
    externalRename?: string;
}

export interface RenameUserPutRequest {
    newUserName: string;
    restUserRenameRequest: RestUserRenameRequest;
    externalRename?: string;
}

export interface RevokeUserTokenRequest {
    tokenId: string;
    name: string;
}

export interface UnassignGroupsRequest {
    name: string;
    requestBody: Array<string>;
}

export interface UnlinkUserRepositoryAliasRequest {
    name: string;
    restUserAlias: Omit<RestUserAlias, 'self'>;
}

/**
 * 
 */
export class UserManagementApi extends runtime.BaseAPI {

    /**
     * Add multiple users to a group. The list of usernames should be passed as request body. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async addUsersToGroupRaw(requestParameters: AddUsersToGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling addUsersToGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/admin/groups/{name}/add-users`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add multiple users to a group. The list of usernames should be passed as request body. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async addUsersToGroup(requestParameters: AddUsersToGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addUsersToGroupRaw(requestParameters, initOverrides);
    }

    /**
     * Add a user to multiple groups. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async assignGroupsRaw(requestParameters: AssignGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling assignGroups().'
            );
        }

        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling assignGroups().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/admin/users/{name}/groups`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add a user to multiple groups. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async assignGroups(requestParameters: AssignGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.assignGroupsRaw(requestParameters, initOverrides);
    }

    /**
     * Change password of specified user. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async changeUserPasswordRaw(requestParameters: ChangeUserPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['restUserPasswordUpdate'] == null) {
            throw new runtime.RequiredError(
                'restUserPasswordUpdate',
                'Required parameter "restUserPasswordUpdate" was null or undefined when calling changeUserPassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/admin/users/credentials`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['restUserPasswordUpdate'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Change password of specified user. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async changeUserPassword(requestParameters: ChangeUserPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.changeUserPasswordRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new group. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async createGroup1Raw(requestParameters: CreateGroup1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['restGroup'] == null) {
            throw new runtime.RequiredError(
                'restGroup',
                'Required parameter "restGroup" was null or undefined when calling createGroup1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/admin/groups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['restGroup'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new group. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async createGroup1(requestParameters: CreateGroup1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createGroup1Raw(requestParameters, initOverrides);
    }

    /**
     * Create a new user. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async createUserRaw(requestParameters: CreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['restNewUser'] == null) {
            throw new runtime.RequiredError(
                'restNewUser',
                'Required parameter "restNewUser" was null or undefined when calling createUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/admin/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['restNewUser'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new user. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async createUser(requestParameters: CreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createUserRaw(requestParameters, initOverrides);
    }

    /**
     * Link existing unlined alias or create the new one. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async createUserRepositoryAliasRaw(requestParameters: CreateUserRepositoryAliasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling createUserRepositoryAlias().'
            );
        }

        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling createUserRepositoryAlias().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/admin/users/{name}/alias`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Link existing unlined alias or create the new one. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async createUserRepositoryAlias(requestParameters: CreateUserRepositoryAliasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createUserRepositoryAliasRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes the specified group, removing it from the system. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async deleteGroupRaw(requestParameters: DeleteGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deleteGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/admin/groups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the specified group, removing it from the system. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async deleteGroup(requestParameters: DeleteGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteGroupRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes the specified user, removing them from the system. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling deleteUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/admin/users/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the specified user, removing them from the system. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async deleteUser(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a list of groups to which the user belongs. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async findAssignedGroupsRaw(requestParameters: FindAssignedGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGroups200Response>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling findAssignedGroups().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/admin/users/{name}/assigned-groups`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of groups to which the user belongs. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async findAssignedGroups(requestParameters: FindAssignedGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGroups200Response> {
        const response = await this.findAssignedGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of groups to which the user does not belong. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async findUnassignedGroupsRaw(requestParameters: FindUnassignedGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGroups200Response>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling findUnassignedGroups().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/admin/users/{name}/unassigned-groups`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of groups to which the user does not belong. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async findUnassignedGroups(requestParameters: FindUnassignedGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGroups200Response> {
        const response = await this.findUnassignedGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of unlinked aliases to which the user does not belong. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async findUnassignedUserRepositoryAliasesRaw(requestParameters: FindUnassignedUserRepositoryAliasesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserRepositoryAliases200Response>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling findUnassignedUserRepositoryAliases().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/admin/users/{name}/unassigned-aliases`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of unlinked aliases to which the user does not belong. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async findUnassignedUserRepositoryAliases(requestParameters: FindUnassignedUserRepositoryAliasesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserRepositoryAliases200Response> {
        const response = await this.findUnassignedUserRepositoryAliasesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of users that are members of a specified group. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async findUsersInGroupRaw(requestParameters: FindUsersInGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FindUsersInGroup200Response>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling findUsersInGroup().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/admin/groups/{name}/more-members`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of users that are members of a specified group. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async findUsersInGroup(requestParameters: FindUsersInGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FindUsersInGroup200Response> {
        const response = await this.findUsersInGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a list of users that are not members of a specified group. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async findUsersNotInGroupRaw(requestParameters: FindUsersNotInGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FindUsersInGroup200Response>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling findUsersNotInGroup().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/admin/groups/{name}/more-non-members`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves a list of users that are not members of a specified group. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async findUsersNotInGroup(requestParameters: FindUsersNotInGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FindUsersInGroup200Response> {
        const response = await this.findUsersNotInGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a paginated list of groups. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async getGroupsRaw(requestParameters: GetGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGroups200Response>> {
        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/admin/groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieve a paginated list of groups. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async getGroups(requestParameters: GetGroupsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGroups200Response> {
        const response = await this.getGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a page of user\'s access tokens. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async getUserAccessTokensRaw(requestParameters: GetUserAccessTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserTokens200Response>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getUserAccessTokens().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/admin/users/{name}/access-token`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieve a page of user\'s access tokens. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async getUserAccessTokens(requestParameters: GetUserAccessTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserTokens200Response> {
        const response = await this.getUserAccessTokensRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a page of aliases. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async getUserRepositoryAliasesRaw(requestParameters: GetUserRepositoryAliasesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserRepositoryAliases200Response>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getUserRepositoryAliases().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/admin/users/{name}/alias`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieve a page of aliases. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async getUserRepositoryAliases(requestParameters: GetUserRepositoryAliasesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserRepositoryAliases200Response> {
        const response = await this.getUserRepositoryAliasesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a page of users. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async getUsersRaw(requestParameters: GetUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FindUsersInGroup200Response>> {
        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/admin/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieve a page of users. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async getUsers(requestParameters: GetUsersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FindUsersInGroup200Response> {
        const response = await this.getUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove multiple users from a group. The list of usernames should be passed as request body. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async removeUsersFromGroupRaw(requestParameters: RemoveUsersFromGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling removeUsersFromGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/admin/groups/{name}/remove-users`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove multiple users from a group. The list of usernames should be passed as request body. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async removeUsersFromGroup(requestParameters: RemoveUsersFromGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeUsersFromGroupRaw(requestParameters, initOverrides);
    }

    /**
     * Renames specified user. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async renameUserRaw(requestParameters: RenameUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['restUserRenameRequest'] == null) {
            throw new runtime.RequiredError(
                'restUserRenameRequest',
                'Required parameter "restUserRenameRequest" was null or undefined when calling renameUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/admin/users/rename`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['restUserRenameRequest'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Renames specified user. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async renameUser(requestParameters: RenameUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.renameUserRaw(requestParameters, initOverrides);
    }

    /**
     * Renames specified user.
     */
    async renameUserPostRaw(requestParameters: RenameUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['restUserRenameRequest'] == null) {
            throw new runtime.RequiredError(
                'restUserRenameRequest',
                'Required parameter "restUserRenameRequest" was null or undefined when calling renameUserPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['externalRename'] != null) {
            queryParameters['externalRename'] = requestParameters['externalRename'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/latest/user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['restUserRenameRequest'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Renames specified user.
     */
    async renameUserPost(requestParameters: RenameUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.renameUserPostRaw(requestParameters, initOverrides);
    }

    /**
     * Renames specified user.
     */
    async renameUserPutRaw(requestParameters: RenameUserPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['newUserName'] == null) {
            throw new runtime.RequiredError(
                'newUserName',
                'Required parameter "newUserName" was null or undefined when calling renameUserPut().'
            );
        }

        if (requestParameters['restUserRenameRequest'] == null) {
            throw new runtime.RequiredError(
                'restUserRenameRequest',
                'Required parameter "restUserRenameRequest" was null or undefined when calling renameUserPut().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['externalRename'] != null) {
            queryParameters['externalRename'] = requestParameters['externalRename'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/latest/user/{newUserName}`.replace(`{${"newUserName"}}`, encodeURIComponent(String(requestParameters['newUserName']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['restUserRenameRequest'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Renames specified user.
     */
    async renameUserPut(requestParameters: RenameUserPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.renameUserPutRaw(requestParameters, initOverrides);
    }

    /**
     * Revoke user\'s access token. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async revokeUserTokenRaw(requestParameters: RevokeUserTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tokenId'] == null) {
            throw new runtime.RequiredError(
                'tokenId',
                'Required parameter "tokenId" was null or undefined when calling revokeUserToken().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling revokeUserToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/admin/users/{name}/access-token/{tokenId}`.replace(`{${"tokenId"}}`, encodeURIComponent(String(requestParameters['tokenId']))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revoke user\'s access token. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async revokeUserToken(requestParameters: RevokeUserTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.revokeUserTokenRaw(requestParameters, initOverrides);
    }

    /**
     * Remove a user from multiple groups.  The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async unassignGroupsRaw(requestParameters: UnassignGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling unassignGroups().'
            );
        }

        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling unassignGroups().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/admin/users/{name}/groups`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a user from multiple groups.  The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async unassignGroups(requestParameters: UnassignGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.unassignGroupsRaw(requestParameters, initOverrides);
    }

    /**
     * Unlink the specified alias from user, removing them from the system. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async unlinkUserRepositoryAliasRaw(requestParameters: UnlinkUserRepositoryAliasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling unlinkUserRepositoryAlias().'
            );
        }

        if (requestParameters['restUserAlias'] == null) {
            throw new runtime.RequiredError(
                'restUserAlias',
                'Required parameter "restUserAlias" was null or undefined when calling unlinkUserRepositoryAlias().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/admin/users/{name}/alias`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['restUserAlias'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Unlink the specified alias from user, removing them from the system. The authenticated user must have restricted administrative permission or higher to use this resource.
     */
    async unlinkUserRepositoryAlias(requestParameters: UnlinkUserRepositoryAliasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.unlinkUserRepositoryAliasRaw(requestParameters, initOverrides);
    }

}
