/* tslint:disable */
/* eslint-disable */
/**
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 11.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetAvailableUsers200Response,
  GetGroups200Response,
  ListGroupPermissions200Response,
  ListRolePermissions200Response,
  ListUserPermissions200Response,
  RestErrorCollection,
} from '../models/index';

export interface AddPermissionsForGroupRequest {
    name: string;
    id: string;
    requestBody?: Array<string>;
}

export interface AddPermissionsForGroup1Request {
    name: string;
    id: string;
    requestBody?: Array<string>;
}

export interface AddPermissionsForGroup2Request {
    name: string;
    ignore?: string;
    requestBody?: Array<string>;
}

export interface AddPermissionsForGroup3Request {
    name: string;
    key: string;
    requestBody?: Array<string>;
}

export interface AddPermissionsForGroup4Request {
    name: string;
    key: string;
    requestBody?: Array<string>;
}

export interface AddPermissionsForGroup5Request {
    name: string;
    key: string;
    requestBody?: Array<string>;
}

export interface AddPermissionsForGroup6Request {
    name: string;
    id: string;
    requestBody?: Array<string>;
}

export interface AddPermissionsForRoleRequest {
    name: string;
    id: string;
    requestBody?: Array<string>;
}

export interface AddPermissionsForRole1Request {
    name: string;
    id: string;
    requestBody?: Array<string>;
}

export interface AddPermissionsForRole2Request {
    name: string;
    ignore?: string;
    requestBody?: Array<string>;
}

export interface AddPermissionsForRole3Request {
    name: string;
    key: string;
    requestBody?: Array<string>;
}

export interface AddPermissionsForRole4Request {
    name: string;
    key: string;
    requestBody?: Array<string>;
}

export interface AddPermissionsForRole5Request {
    name: string;
    key: string;
    requestBody?: Array<string>;
}

export interface AddPermissionsForRole6Request {
    name: string;
    id: string;
    requestBody?: Array<string>;
}

export interface AddPermissionsForUserRequest {
    name: string;
    id: string;
    requestBody?: Array<string>;
}

export interface AddPermissionsForUser1Request {
    name: string;
    id: string;
    requestBody?: Array<string>;
}

export interface AddPermissionsForUser2Request {
    name: string;
    ignore?: string;
    requestBody?: Array<string>;
}

export interface AddPermissionsForUser3Request {
    name: string;
    key: string;
    requestBody?: Array<string>;
}

export interface AddPermissionsForUser4Request {
    name: string;
    key: string;
    requestBody?: Array<string>;
}

export interface AddPermissionsForUser5Request {
    name: string;
    key: string;
    requestBody?: Array<string>;
}

export interface AddPermissionsForUser6Request {
    name: string;
    id: string;
    requestBody?: Array<string>;
}

export interface GetAvailableGroupsRequest {
    id: string;
    limit?: number;
    start?: number;
    name?: string;
}

export interface GetAvailableGroups1Request {
    id: string;
    limit?: number;
    start?: number;
    name?: string;
}

export interface GetAvailableGroups2Request {
    limit?: number;
    start?: number;
    name?: string;
    ignore?: string;
}

export interface GetAvailableGroups3Request {
    key: string;
    limit?: number;
    start?: number;
    name?: string;
}

export interface GetAvailableGroups4Request {
    key: string;
    limit?: number;
    start?: number;
    name?: string;
}

export interface GetAvailableGroups5Request {
    key: string;
    limit?: number;
    start?: number;
    name?: string;
}

export interface GetAvailableGroups6Request {
    id: string;
    limit?: number;
    start?: number;
    name?: string;
}

export interface GetAvailableUsersRequest {
    id: string;
    limit?: number;
    start?: number;
    name?: string;
}

export interface GetAvailableUsers1Request {
    id: string;
    limit?: number;
    start?: number;
    name?: string;
}

export interface GetAvailableUsers2Request {
    limit?: number;
    start?: number;
    name?: string;
    ignore?: string;
}

export interface GetAvailableUsers3Request {
    key: string;
    limit?: number;
    start?: number;
    name?: string;
}

export interface GetAvailableUsers4Request {
    key: string;
    limit?: number;
    start?: number;
    name?: string;
}

export interface GetAvailableUsers5Request {
    key: string;
    limit?: number;
    start?: number;
    name?: string;
}

export interface GetAvailableUsers6Request {
    id: string;
    limit?: number;
    start?: number;
    name?: string;
}

export interface ListGroupPermissionsRequest {
    id: string;
    limit?: number;
    start?: number;
    name?: string;
}

export interface ListGroupPermissions1Request {
    id: string;
    limit?: number;
    start?: number;
    name?: string;
}

export interface ListGroupPermissions2Request {
    limit?: number;
    start?: number;
    name?: string;
    ignore?: string;
}

export interface ListGroupPermissions3Request {
    key: string;
    limit?: number;
    start?: number;
    name?: string;
}

export interface ListGroupPermissions4Request {
    key: string;
    limit?: number;
    start?: number;
    name?: string;
}

export interface ListGroupPermissions5Request {
    key: string;
    limit?: number;
    start?: number;
    name?: string;
}

export interface ListGroupPermissions6Request {
    id: string;
    limit?: number;
    start?: number;
    name?: string;
}

export interface ListRolePermissionsRequest {
    id: string;
    limit?: number;
    start?: number;
}

export interface ListRolePermissions1Request {
    id: string;
    limit?: number;
    start?: number;
}

export interface ListRolePermissions2Request {
    limit?: number;
    start?: number;
    ignore?: string;
}

export interface ListRolePermissions3Request {
    key: string;
    limit?: number;
    start?: number;
}

export interface ListRolePermissions4Request {
    key: string;
    limit?: number;
    start?: number;
}

export interface ListRolePermissions5Request {
    key: string;
    limit?: number;
    start?: number;
}

export interface ListRolePermissions6Request {
    id: string;
    limit?: number;
    start?: number;
}

export interface ListUserPermissionsRequest {
    id: string;
    limit?: number;
    start?: number;
    name?: string;
}

export interface ListUserPermissions1Request {
    id: string;
    limit?: number;
    start?: number;
    name?: string;
}

export interface ListUserPermissions2Request {
    limit?: number;
    start?: number;
    name?: string;
    ignore?: string;
}

export interface ListUserPermissions3Request {
    key: string;
    limit?: number;
    start?: number;
    name?: string;
}

export interface ListUserPermissions4Request {
    key: string;
    limit?: number;
    start?: number;
    name?: string;
}

export interface ListUserPermissions5Request {
    key: string;
    limit?: number;
    start?: number;
    name?: string;
}

export interface ListUserPermissions6Request {
    id: string;
    limit?: number;
    start?: number;
    name?: string;
}

export interface RemovePermissionsForGroupRequest {
    name: string;
    id: string;
    requestBody?: Array<string>;
}

export interface RemovePermissionsForGroup1Request {
    name: string;
    id: string;
    requestBody?: Array<string>;
}

export interface RemovePermissionsForGroup2Request {
    name: string;
    ignore?: string;
    requestBody?: Array<string>;
}

export interface RemovePermissionsForGroup3Request {
    name: string;
    key: string;
    requestBody?: Array<string>;
}

export interface RemovePermissionsForGroup4Request {
    name: string;
    key: string;
    requestBody?: Array<string>;
}

export interface RemovePermissionsForGroup5Request {
    name: string;
    key: string;
    requestBody?: Array<string>;
}

export interface RemovePermissionsForGroup6Request {
    name: string;
    id: string;
    requestBody?: Array<string>;
}

export interface RemovePermissionsForRoleRequest {
    name: string;
    id: string;
    requestBody?: Array<string>;
}

export interface RemovePermissionsForRole1Request {
    name: string;
    id: string;
    requestBody?: Array<string>;
}

export interface RemovePermissionsForRole2Request {
    name: string;
    ignore?: string;
    requestBody?: Array<string>;
}

export interface RemovePermissionsForRole3Request {
    name: string;
    key: string;
    requestBody?: Array<string>;
}

export interface RemovePermissionsForRole4Request {
    name: string;
    key: string;
    requestBody?: Array<string>;
}

export interface RemovePermissionsForRole5Request {
    name: string;
    key: string;
    requestBody?: Array<string>;
}

export interface RemovePermissionsForRole6Request {
    name: string;
    id: string;
    requestBody?: Array<string>;
}

export interface RemovePermissionsForUserRequest {
    name: string;
    id: string;
    requestBody?: Array<string>;
}

export interface RemovePermissionsForUser1Request {
    name: string;
    id: string;
    requestBody?: Array<string>;
}

export interface RemovePermissionsForUser2Request {
    name: string;
    ignore?: string;
    requestBody?: Array<string>;
}

export interface RemovePermissionsForUser3Request {
    name: string;
    key: string;
    requestBody?: Array<string>;
}

export interface RemovePermissionsForUser4Request {
    name: string;
    key: string;
    requestBody?: Array<string>;
}

export interface RemovePermissionsForUser5Request {
    name: string;
    key: string;
    requestBody?: Array<string>;
}

export interface RemovePermissionsForUser6Request {
    name: string;
    id: string;
    requestBody?: Array<string>;
}

/**
 * 
 */
export class PermissionsApi extends runtime.BaseAPI {

    /**
     * Grants deployment project permissions to a given group.
     */
    async addPermissionsForGroupRaw(requestParameters: AddPermissionsForGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling addPermissionsForGroup().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling addPermissionsForGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/deployment/{id}/groups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Grants deployment project permissions to a given group.
     */
    async addPermissionsForGroup(requestParameters: AddPermissionsForGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addPermissionsForGroupRaw(requestParameters, initOverrides);
    }

    /**
     * Grants deployment environment permissions to a given group.
     */
    async addPermissionsForGroup1Raw(requestParameters: AddPermissionsForGroup1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling addPermissionsForGroup1().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling addPermissionsForGroup1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/environment/{id}/groups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Grants deployment environment permissions to a given group.
     */
    async addPermissionsForGroup1(requestParameters: AddPermissionsForGroup1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addPermissionsForGroup1Raw(requestParameters, initOverrides);
    }

    /**
     * Grants global permissions to a given group.
     */
    async addPermissionsForGroup2Raw(requestParameters: AddPermissionsForGroup2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling addPermissionsForGroup2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ignore'] != null) {
            queryParameters['ignore'] = requestParameters['ignore'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/global/groups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Grants global permissions to a given group.
     */
    async addPermissionsForGroup2(requestParameters: AddPermissionsForGroup2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addPermissionsForGroup2Raw(requestParameters, initOverrides);
    }

    /**
     * Grants plan permissions to a given group.
     */
    async addPermissionsForGroup3Raw(requestParameters: AddPermissionsForGroup3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling addPermissionsForGroup3().'
            );
        }

        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling addPermissionsForGroup3().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/plan/{key}/groups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Grants plan permissions to a given group.
     */
    async addPermissionsForGroup3(requestParameters: AddPermissionsForGroup3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addPermissionsForGroup3Raw(requestParameters, initOverrides);
    }

    /**
     * Grants project permissions to a given group.
     */
    async addPermissionsForGroup4Raw(requestParameters: AddPermissionsForGroup4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling addPermissionsForGroup4().'
            );
        }

        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling addPermissionsForGroup4().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/project/{key}/groups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Grants project permissions to a given group.
     */
    async addPermissionsForGroup4(requestParameters: AddPermissionsForGroup4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addPermissionsForGroup4Raw(requestParameters, initOverrides);
    }

    /**
     * Grants project plan permissions to a given group.
     */
    async addPermissionsForGroup5Raw(requestParameters: AddPermissionsForGroup5Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling addPermissionsForGroup5().'
            );
        }

        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling addPermissionsForGroup5().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/projectplan/{key}/groups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Grants project plan permissions to a given group.
     */
    async addPermissionsForGroup5(requestParameters: AddPermissionsForGroup5Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addPermissionsForGroup5Raw(requestParameters, initOverrides);
    }

    /**
     * Grants repository permissions to a given group.
     */
    async addPermissionsForGroup6Raw(requestParameters: AddPermissionsForGroup6Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling addPermissionsForGroup6().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling addPermissionsForGroup6().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/repository/{id}/groups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Grants repository permissions to a given group.
     */
    async addPermissionsForGroup6(requestParameters: AddPermissionsForGroup6Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addPermissionsForGroup6Raw(requestParameters, initOverrides);
    }

    /**
     * Grants deployment project permissions to a given role.
     */
    async addPermissionsForRoleRaw(requestParameters: AddPermissionsForRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling addPermissionsForRole().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling addPermissionsForRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/deployment/{id}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Grants deployment project permissions to a given role.
     */
    async addPermissionsForRole(requestParameters: AddPermissionsForRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addPermissionsForRoleRaw(requestParameters, initOverrides);
    }

    /**
     * Grants deployment environment permissions to a given role.
     */
    async addPermissionsForRole1Raw(requestParameters: AddPermissionsForRole1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling addPermissionsForRole1().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling addPermissionsForRole1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/environment/{id}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Grants deployment environment permissions to a given role.
     */
    async addPermissionsForRole1(requestParameters: AddPermissionsForRole1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addPermissionsForRole1Raw(requestParameters, initOverrides);
    }

    /**
     * Grants global permissions to a given role.
     */
    async addPermissionsForRole2Raw(requestParameters: AddPermissionsForRole2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling addPermissionsForRole2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ignore'] != null) {
            queryParameters['ignore'] = requestParameters['ignore'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/global/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Grants global permissions to a given role.
     */
    async addPermissionsForRole2(requestParameters: AddPermissionsForRole2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addPermissionsForRole2Raw(requestParameters, initOverrides);
    }

    /**
     * Grants plan permissions to a given role.
     */
    async addPermissionsForRole3Raw(requestParameters: AddPermissionsForRole3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling addPermissionsForRole3().'
            );
        }

        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling addPermissionsForRole3().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/plan/{key}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Grants plan permissions to a given role.
     */
    async addPermissionsForRole3(requestParameters: AddPermissionsForRole3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addPermissionsForRole3Raw(requestParameters, initOverrides);
    }

    /**
     * Grants project permissions to a given role.
     */
    async addPermissionsForRole4Raw(requestParameters: AddPermissionsForRole4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling addPermissionsForRole4().'
            );
        }

        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling addPermissionsForRole4().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/project/{key}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Grants project permissions to a given role.
     */
    async addPermissionsForRole4(requestParameters: AddPermissionsForRole4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addPermissionsForRole4Raw(requestParameters, initOverrides);
    }

    /**
     * Grants project plan permissions to a given role.
     */
    async addPermissionsForRole5Raw(requestParameters: AddPermissionsForRole5Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling addPermissionsForRole5().'
            );
        }

        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling addPermissionsForRole5().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/projectplan/{key}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Grants project plan permissions to a given role.
     */
    async addPermissionsForRole5(requestParameters: AddPermissionsForRole5Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addPermissionsForRole5Raw(requestParameters, initOverrides);
    }

    /**
     * Grants repository permissions to a given role.
     */
    async addPermissionsForRole6Raw(requestParameters: AddPermissionsForRole6Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling addPermissionsForRole6().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling addPermissionsForRole6().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/repository/{id}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Grants repository permissions to a given role.
     */
    async addPermissionsForRole6(requestParameters: AddPermissionsForRole6Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addPermissionsForRole6Raw(requestParameters, initOverrides);
    }

    /**
     * Grants deployment project permissions to a given user.
     */
    async addPermissionsForUserRaw(requestParameters: AddPermissionsForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling addPermissionsForUser().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling addPermissionsForUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/deployment/{id}/users/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Grants deployment project permissions to a given user.
     */
    async addPermissionsForUser(requestParameters: AddPermissionsForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addPermissionsForUserRaw(requestParameters, initOverrides);
    }

    /**
     * Grants deployment environment permissions to a given user.
     */
    async addPermissionsForUser1Raw(requestParameters: AddPermissionsForUser1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling addPermissionsForUser1().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling addPermissionsForUser1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/environment/{id}/users/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Grants deployment environment permissions to a given user.
     */
    async addPermissionsForUser1(requestParameters: AddPermissionsForUser1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addPermissionsForUser1Raw(requestParameters, initOverrides);
    }

    /**
     * Grants global permissions to a given user.
     */
    async addPermissionsForUser2Raw(requestParameters: AddPermissionsForUser2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling addPermissionsForUser2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ignore'] != null) {
            queryParameters['ignore'] = requestParameters['ignore'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/global/users/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Grants global permissions to a given user.
     */
    async addPermissionsForUser2(requestParameters: AddPermissionsForUser2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addPermissionsForUser2Raw(requestParameters, initOverrides);
    }

    /**
     * Grants plan permissions to a given user.
     */
    async addPermissionsForUser3Raw(requestParameters: AddPermissionsForUser3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling addPermissionsForUser3().'
            );
        }

        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling addPermissionsForUser3().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/plan/{key}/users/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Grants plan permissions to a given user.
     */
    async addPermissionsForUser3(requestParameters: AddPermissionsForUser3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addPermissionsForUser3Raw(requestParameters, initOverrides);
    }

    /**
     * Grants project permissions to a given user.
     */
    async addPermissionsForUser4Raw(requestParameters: AddPermissionsForUser4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling addPermissionsForUser4().'
            );
        }

        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling addPermissionsForUser4().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/project/{key}/users/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Grants project permissions to a given user.
     */
    async addPermissionsForUser4(requestParameters: AddPermissionsForUser4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addPermissionsForUser4Raw(requestParameters, initOverrides);
    }

    /**
     * Grants project plan permissions to a given user.
     */
    async addPermissionsForUser5Raw(requestParameters: AddPermissionsForUser5Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling addPermissionsForUser5().'
            );
        }

        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling addPermissionsForUser5().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/projectplan/{key}/users/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Grants project plan permissions to a given user.
     */
    async addPermissionsForUser5(requestParameters: AddPermissionsForUser5Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addPermissionsForUser5Raw(requestParameters, initOverrides);
    }

    /**
     * Grants repository permissions to a given user.
     */
    async addPermissionsForUser6Raw(requestParameters: AddPermissionsForUser6Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling addPermissionsForUser6().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling addPermissionsForUser6().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/repository/{id}/users/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Grants repository permissions to a given user.
     */
    async addPermissionsForUser6(requestParameters: AddPermissionsForUser6Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addPermissionsForUser6Raw(requestParameters, initOverrides);
    }

    /**
     * Returns list of groups which weren\'t granted explicitly any deployment project permissions. Resource is paged, returns single page of resources.
     */
    async getAvailableGroupsRaw(requestParameters: GetAvailableGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGroups200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getAvailableGroups().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/permissions/deployment/{id}/available-groups`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns list of groups which weren\'t granted explicitly any deployment project permissions. Resource is paged, returns single page of resources.
     */
    async getAvailableGroups(requestParameters: GetAvailableGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGroups200Response> {
        const response = await this.getAvailableGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns list of groups which weren\'t granted explicitly any deployment environment permissions. Resource is paged, returns single page of resources.
     */
    async getAvailableGroups1Raw(requestParameters: GetAvailableGroups1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGroups200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getAvailableGroups1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/permissions/environment/{id}/available-groups`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns list of groups which weren\'t granted explicitly any deployment environment permissions. Resource is paged, returns single page of resources.
     */
    async getAvailableGroups1(requestParameters: GetAvailableGroups1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGroups200Response> {
        const response = await this.getAvailableGroups1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns list of groups which weren\'t granted explicitly any permissions. Resource is paged, returns single page of resources.
     */
    async getAvailableGroups2Raw(requestParameters: GetAvailableGroups2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGroups200Response>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['ignore'] != null) {
            queryParameters['ignore'] = requestParameters['ignore'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/permissions/global/available-groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns list of groups which weren\'t granted explicitly any permissions. Resource is paged, returns single page of resources.
     */
    async getAvailableGroups2(requestParameters: GetAvailableGroups2Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGroups200Response> {
        const response = await this.getAvailableGroups2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns list of groups which weren\'t granted explicitly any plan permissions. Resource is paged, returns single page of resources.
     */
    async getAvailableGroups3Raw(requestParameters: GetAvailableGroups3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGroups200Response>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling getAvailableGroups3().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/permissions/plan/{key}/available-groups`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns list of groups which weren\'t granted explicitly any plan permissions. Resource is paged, returns single page of resources.
     */
    async getAvailableGroups3(requestParameters: GetAvailableGroups3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGroups200Response> {
        const response = await this.getAvailableGroups3Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns list of groups which weren\'t granted explicitly any project permissions. Resource is paged, returns single page of resources.
     */
    async getAvailableGroups4Raw(requestParameters: GetAvailableGroups4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGroups200Response>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling getAvailableGroups4().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/permissions/project/{key}/available-groups`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns list of groups which weren\'t granted explicitly any project permissions. Resource is paged, returns single page of resources.
     */
    async getAvailableGroups4(requestParameters: GetAvailableGroups4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGroups200Response> {
        const response = await this.getAvailableGroups4Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns list of groups which weren\'t granted explicitly any project plan permissions. Resource is paged, returns single page of resources.
     */
    async getAvailableGroups5Raw(requestParameters: GetAvailableGroups5Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGroups200Response>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling getAvailableGroups5().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/permissions/projectplan/{key}/available-groups`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns list of groups which weren\'t granted explicitly any project plan permissions. Resource is paged, returns single page of resources.
     */
    async getAvailableGroups5(requestParameters: GetAvailableGroups5Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGroups200Response> {
        const response = await this.getAvailableGroups5Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns list of groups which weren\'t granted explicitly any repository permissions. Resource is paged, returns single page of resources.
     */
    async getAvailableGroups6Raw(requestParameters: GetAvailableGroups6Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGroups200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getAvailableGroups6().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/permissions/repository/{id}/available-groups`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns list of groups which weren\'t granted explicitly any repository permissions. Resource is paged, returns single page of resources.
     */
    async getAvailableGroups6(requestParameters: GetAvailableGroups6Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGroups200Response> {
        const response = await this.getAvailableGroups6Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns list of users which weren\'t granted explicitly any deployment project permissions. Resource is paged, returns single page of resources.
     */
    async getAvailableUsersRaw(requestParameters: GetAvailableUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAvailableUsers200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getAvailableUsers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/permissions/deployment/{id}/available-users`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns list of users which weren\'t granted explicitly any deployment project permissions. Resource is paged, returns single page of resources.
     */
    async getAvailableUsers(requestParameters: GetAvailableUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAvailableUsers200Response> {
        const response = await this.getAvailableUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns list of users which weren\'t granted explicitly any deployment environment permissions. Resource is paged, returns single page of resources.
     */
    async getAvailableUsers1Raw(requestParameters: GetAvailableUsers1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAvailableUsers200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getAvailableUsers1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/permissions/environment/{id}/available-users`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns list of users which weren\'t granted explicitly any deployment environment permissions. Resource is paged, returns single page of resources.
     */
    async getAvailableUsers1(requestParameters: GetAvailableUsers1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAvailableUsers200Response> {
        const response = await this.getAvailableUsers1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns list of users which weren\'t granted explicitly any permissions. Resource is paged, returns single page of resources.
     */
    async getAvailableUsers2Raw(requestParameters: GetAvailableUsers2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAvailableUsers200Response>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['ignore'] != null) {
            queryParameters['ignore'] = requestParameters['ignore'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/permissions/global/available-users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns list of users which weren\'t granted explicitly any permissions. Resource is paged, returns single page of resources.
     */
    async getAvailableUsers2(requestParameters: GetAvailableUsers2Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAvailableUsers200Response> {
        const response = await this.getAvailableUsers2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns list of users which weren\'t granted explicitly any plan permissions. Resource is paged, returns single page of resources.
     */
    async getAvailableUsers3Raw(requestParameters: GetAvailableUsers3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAvailableUsers200Response>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling getAvailableUsers3().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/permissions/plan/{key}/available-users`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns list of users which weren\'t granted explicitly any plan permissions. Resource is paged, returns single page of resources.
     */
    async getAvailableUsers3(requestParameters: GetAvailableUsers3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAvailableUsers200Response> {
        const response = await this.getAvailableUsers3Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns list of users which weren\'t granted explicitly any project permissions. Resource is paged, returns single page of resources.
     */
    async getAvailableUsers4Raw(requestParameters: GetAvailableUsers4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAvailableUsers200Response>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling getAvailableUsers4().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/permissions/project/{key}/available-users`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns list of users which weren\'t granted explicitly any project permissions. Resource is paged, returns single page of resources.
     */
    async getAvailableUsers4(requestParameters: GetAvailableUsers4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAvailableUsers200Response> {
        const response = await this.getAvailableUsers4Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns list of users which weren\'t granted explicitly any project plan permissions. Resource is paged, returns single page of resources.
     */
    async getAvailableUsers5Raw(requestParameters: GetAvailableUsers5Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAvailableUsers200Response>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling getAvailableUsers5().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/permissions/projectplan/{key}/available-users`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns list of users which weren\'t granted explicitly any project plan permissions. Resource is paged, returns single page of resources.
     */
    async getAvailableUsers5(requestParameters: GetAvailableUsers5Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAvailableUsers200Response> {
        const response = await this.getAvailableUsers5Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns list of users which weren\'t granted explicitly any repository permissions. Resource is paged, returns single page of resources.
     */
    async getAvailableUsers6Raw(requestParameters: GetAvailableUsers6Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAvailableUsers200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getAvailableUsers6().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/permissions/repository/{id}/available-users`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns list of users which weren\'t granted explicitly any repository permissions. Resource is paged, returns single page of resources.
     */
    async getAvailableUsers6(requestParameters: GetAvailableUsers6Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAvailableUsers200Response> {
        const response = await this.getAvailableUsers6Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of groups with their deployment project permissions. The list can be filtered by some attributes. This resource is paged returns a single page of results.
     */
    async listGroupPermissionsRaw(requestParameters: ListGroupPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListGroupPermissions200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling listGroupPermissions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/permissions/deployment/{id}/groups`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieve a list of groups with their deployment project permissions. The list can be filtered by some attributes. This resource is paged returns a single page of results.
     */
    async listGroupPermissions(requestParameters: ListGroupPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListGroupPermissions200Response> {
        const response = await this.listGroupPermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of groups with their deployment environment permissions. The list can be filtered by some attributes. This resource is paged returns a single page of results.
     */
    async listGroupPermissions1Raw(requestParameters: ListGroupPermissions1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListGroupPermissions200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling listGroupPermissions1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/permissions/environment/{id}/groups`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieve a list of groups with their deployment environment permissions. The list can be filtered by some attributes. This resource is paged returns a single page of results.
     */
    async listGroupPermissions1(requestParameters: ListGroupPermissions1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListGroupPermissions200Response> {
        const response = await this.listGroupPermissions1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of groups with their global permissions. The list can be filtered by some attributes. This resource is paged returns a single page of results.
     */
    async listGroupPermissions2Raw(requestParameters: ListGroupPermissions2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListGroupPermissions200Response>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['ignore'] != null) {
            queryParameters['ignore'] = requestParameters['ignore'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/permissions/global/groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieve a list of groups with their global permissions. The list can be filtered by some attributes. This resource is paged returns a single page of results.
     */
    async listGroupPermissions2(requestParameters: ListGroupPermissions2Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListGroupPermissions200Response> {
        const response = await this.listGroupPermissions2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of groups with their plan permissions. The list can be filtered by some attributes. This resource is paged returns a single page of results.
     */
    async listGroupPermissions3Raw(requestParameters: ListGroupPermissions3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListGroupPermissions200Response>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling listGroupPermissions3().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/permissions/plan/{key}/groups`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieve a list of groups with their plan permissions. The list can be filtered by some attributes. This resource is paged returns a single page of results.
     */
    async listGroupPermissions3(requestParameters: ListGroupPermissions3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListGroupPermissions200Response> {
        const response = await this.listGroupPermissions3Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of groups with their project permissions. The list can be filtered by some attributes. This resource is paged returns a single page of results.
     */
    async listGroupPermissions4Raw(requestParameters: ListGroupPermissions4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListGroupPermissions200Response>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling listGroupPermissions4().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/permissions/project/{key}/groups`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieve a list of groups with their project permissions. The list can be filtered by some attributes. This resource is paged returns a single page of results.
     */
    async listGroupPermissions4(requestParameters: ListGroupPermissions4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListGroupPermissions200Response> {
        const response = await this.listGroupPermissions4Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of groups with their project plan permissions. The list can be filtered by some attributes. This resource is paged returns a single page of results.
     */
    async listGroupPermissions5Raw(requestParameters: ListGroupPermissions5Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListGroupPermissions200Response>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling listGroupPermissions5().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/permissions/projectplan/{key}/groups`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieve a list of groups with their project plan permissions. The list can be filtered by some attributes. This resource is paged returns a single page of results.
     */
    async listGroupPermissions5(requestParameters: ListGroupPermissions5Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListGroupPermissions200Response> {
        const response = await this.listGroupPermissions5Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of groups with their repository permissions. The list can be filtered by some attributes. This resource is paged returns a single page of results.
     */
    async listGroupPermissions6Raw(requestParameters: ListGroupPermissions6Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListGroupPermissions200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling listGroupPermissions6().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/permissions/repository/{id}/groups`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieve a list of groups with their repository permissions. The list can be filtered by some attributes. This resource is paged returns a single page of results.
     */
    async listGroupPermissions6(requestParameters: ListGroupPermissions6Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListGroupPermissions200Response> {
        const response = await this.listGroupPermissions6Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of roles with their deployment project permissions. This resource is paged returns a single page of results, although only 2 roles are supported: LOGGED IN users, ANONYMOUS users.
     */
    async listRolePermissionsRaw(requestParameters: ListRolePermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListRolePermissions200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling listRolePermissions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/permissions/deployment/{id}/roles`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieve a list of roles with their deployment project permissions. This resource is paged returns a single page of results, although only 2 roles are supported: LOGGED IN users, ANONYMOUS users.
     */
    async listRolePermissions(requestParameters: ListRolePermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListRolePermissions200Response> {
        const response = await this.listRolePermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of roles with their deployment environment permissions. This resource is paged returns a single page of results, although only 2 roles are supported: LOGGED IN users, ANONYMOUS users
     */
    async listRolePermissions1Raw(requestParameters: ListRolePermissions1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListRolePermissions200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling listRolePermissions1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/permissions/environment/{id}/roles`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieve a list of roles with their deployment environment permissions. This resource is paged returns a single page of results, although only 2 roles are supported: LOGGED IN users, ANONYMOUS users
     */
    async listRolePermissions1(requestParameters: ListRolePermissions1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListRolePermissions200Response> {
        const response = await this.listRolePermissions1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of roles with their global permissions. This resource is paged returns a single page of results, although only 2 roles are supported: LOGGED IN users, ANONYMOUS users
     */
    async listRolePermissions2Raw(requestParameters: ListRolePermissions2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListRolePermissions200Response>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['ignore'] != null) {
            queryParameters['ignore'] = requestParameters['ignore'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/permissions/global/roles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieve a list of roles with their global permissions. This resource is paged returns a single page of results, although only 2 roles are supported: LOGGED IN users, ANONYMOUS users
     */
    async listRolePermissions2(requestParameters: ListRolePermissions2Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListRolePermissions200Response> {
        const response = await this.listRolePermissions2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of roles with their plan permissions. This resource is paged returns a single page of results, although only 2 roles are supported: LOGGED IN users, ANONYMOUS users.
     */
    async listRolePermissions3Raw(requestParameters: ListRolePermissions3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListRolePermissions200Response>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling listRolePermissions3().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/permissions/plan/{key}/roles`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieve a list of roles with their plan permissions. This resource is paged returns a single page of results, although only 2 roles are supported: LOGGED IN users, ANONYMOUS users.
     */
    async listRolePermissions3(requestParameters: ListRolePermissions3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListRolePermissions200Response> {
        const response = await this.listRolePermissions3Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of roles with their project permissions. This resource is paged returns a single page of results, although only LOGGED IN users role is supported
     */
    async listRolePermissions4Raw(requestParameters: ListRolePermissions4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListRolePermissions200Response>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling listRolePermissions4().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/permissions/project/{key}/roles`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieve a list of roles with their project permissions. This resource is paged returns a single page of results, although only LOGGED IN users role is supported
     */
    async listRolePermissions4(requestParameters: ListRolePermissions4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListRolePermissions200Response> {
        const response = await this.listRolePermissions4Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of roles with their project plan permissions. This resource is paged returns a single page of results, although only 2 roles are supported: LOGGED IN users, ANONYMOUS users.
     */
    async listRolePermissions5Raw(requestParameters: ListRolePermissions5Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListRolePermissions200Response>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling listRolePermissions5().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/permissions/projectplan/{key}/roles`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieve a list of roles with their project plan permissions. This resource is paged returns a single page of results, although only 2 roles are supported: LOGGED IN users, ANONYMOUS users.
     */
    async listRolePermissions5(requestParameters: ListRolePermissions5Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListRolePermissions200Response> {
        const response = await this.listRolePermissions5Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of roles with their repository permissions. This resource is paged returns a single page of results, although only LOGGED IN users role is supported.
     */
    async listRolePermissions6Raw(requestParameters: ListRolePermissions6Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListRolePermissions200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling listRolePermissions6().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/permissions/repository/{id}/roles`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieve a list of roles with their repository permissions. This resource is paged returns a single page of results, although only LOGGED IN users role is supported.
     */
    async listRolePermissions6(requestParameters: ListRolePermissions6Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListRolePermissions200Response> {
        const response = await this.listRolePermissions6Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of users with their explicit permissions to given resource. The list can be filtered by some attributes. This resource is paged and returns a single page of results.
     */
    async listUserPermissionsRaw(requestParameters: ListUserPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListUserPermissions200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling listUserPermissions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/permissions/deployment/{id}/users`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieve a list of users with their explicit permissions to given resource. The list can be filtered by some attributes. This resource is paged and returns a single page of results.
     */
    async listUserPermissions(requestParameters: ListUserPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListUserPermissions200Response> {
        const response = await this.listUserPermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of users with their explicit permissions to given resource. The list can be filtered by some attributes. This resource is paged and returns a single page of results.
     */
    async listUserPermissions1Raw(requestParameters: ListUserPermissions1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListUserPermissions200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling listUserPermissions1().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/permissions/environment/{id}/users`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieve a list of users with their explicit permissions to given resource. The list can be filtered by some attributes. This resource is paged and returns a single page of results.
     */
    async listUserPermissions1(requestParameters: ListUserPermissions1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListUserPermissions200Response> {
        const response = await this.listUserPermissions1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of users with their global permissions. The list can be filtered by some attributes. This resource is paged and returns a single page of results.
     */
    async listUserPermissions2Raw(requestParameters: ListUserPermissions2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListUserPermissions200Response>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['ignore'] != null) {
            queryParameters['ignore'] = requestParameters['ignore'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/permissions/global/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieve a list of users with their global permissions. The list can be filtered by some attributes. This resource is paged and returns a single page of results.
     */
    async listUserPermissions2(requestParameters: ListUserPermissions2Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListUserPermissions200Response> {
        const response = await this.listUserPermissions2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of users with their explicit permissions to given resource. The list can be filtered by some attributes. This resource is paged and returns a single page of results.
     */
    async listUserPermissions3Raw(requestParameters: ListUserPermissions3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListUserPermissions200Response>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling listUserPermissions3().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/permissions/plan/{key}/users`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieve a list of users with their explicit permissions to given resource. The list can be filtered by some attributes. This resource is paged and returns a single page of results.
     */
    async listUserPermissions3(requestParameters: ListUserPermissions3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListUserPermissions200Response> {
        const response = await this.listUserPermissions3Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of users with their explicit permissions to given resource. The list can be filtered by some attributes. This resource is paged and returns a single page of results.
     */
    async listUserPermissions4Raw(requestParameters: ListUserPermissions4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListUserPermissions200Response>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling listUserPermissions4().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/permissions/project/{key}/users`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieve a list of users with their explicit permissions to given resource. The list can be filtered by some attributes. This resource is paged and returns a single page of results.
     */
    async listUserPermissions4(requestParameters: ListUserPermissions4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListUserPermissions200Response> {
        const response = await this.listUserPermissions4Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of users with their explicit permissions to given resource. The list can be filtered by some attributes. This resource is paged and returns a single page of results.
     */
    async listUserPermissions5Raw(requestParameters: ListUserPermissions5Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListUserPermissions200Response>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling listUserPermissions5().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/permissions/projectplan/{key}/users`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieve a list of users with their explicit permissions to given resource. The list can be filtered by some attributes. This resource is paged and returns a single page of results.
     */
    async listUserPermissions5(requestParameters: ListUserPermissions5Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListUserPermissions200Response> {
        const response = await this.listUserPermissions5Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of users with their explicit permissions to given resource. The list can be filtered by some attributes. This resource is paged and returns a single page of results.
     */
    async listUserPermissions6Raw(requestParameters: ListUserPermissions6Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListUserPermissions200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling listUserPermissions6().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/permissions/repository/{id}/users`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieve a list of users with their explicit permissions to given resource. The list can be filtered by some attributes. This resource is paged and returns a single page of results.
     */
    async listUserPermissions6(requestParameters: ListUserPermissions6Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListUserPermissions200Response> {
        const response = await this.listUserPermissions6Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Revokes deployment project permissions from a given group.
     */
    async removePermissionsForGroupRaw(requestParameters: RemovePermissionsForGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling removePermissionsForGroup().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removePermissionsForGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/deployment/{id}/groups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revokes deployment project permissions from a given group.
     */
    async removePermissionsForGroup(requestParameters: RemovePermissionsForGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removePermissionsForGroupRaw(requestParameters, initOverrides);
    }

    /**
     * Revokes deployment environment permissions from a given group.
     */
    async removePermissionsForGroup1Raw(requestParameters: RemovePermissionsForGroup1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling removePermissionsForGroup1().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removePermissionsForGroup1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/environment/{id}/groups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revokes deployment environment permissions from a given group.
     */
    async removePermissionsForGroup1(requestParameters: RemovePermissionsForGroup1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removePermissionsForGroup1Raw(requestParameters, initOverrides);
    }

    /**
     * Revokes global permissions from a given group.
     */
    async removePermissionsForGroup2Raw(requestParameters: RemovePermissionsForGroup2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling removePermissionsForGroup2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ignore'] != null) {
            queryParameters['ignore'] = requestParameters['ignore'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/global/groups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revokes global permissions from a given group.
     */
    async removePermissionsForGroup2(requestParameters: RemovePermissionsForGroup2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removePermissionsForGroup2Raw(requestParameters, initOverrides);
    }

    /**
     * Revokes plan permissions from a given group.
     */
    async removePermissionsForGroup3Raw(requestParameters: RemovePermissionsForGroup3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling removePermissionsForGroup3().'
            );
        }

        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling removePermissionsForGroup3().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/plan/{key}/groups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revokes plan permissions from a given group.
     */
    async removePermissionsForGroup3(requestParameters: RemovePermissionsForGroup3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removePermissionsForGroup3Raw(requestParameters, initOverrides);
    }

    /**
     * Revokes project permissions from a given group.
     */
    async removePermissionsForGroup4Raw(requestParameters: RemovePermissionsForGroup4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling removePermissionsForGroup4().'
            );
        }

        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling removePermissionsForGroup4().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/project/{key}/groups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revokes project permissions from a given group.
     */
    async removePermissionsForGroup4(requestParameters: RemovePermissionsForGroup4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removePermissionsForGroup4Raw(requestParameters, initOverrides);
    }

    /**
     * Revokes project plan permissions from a given group.
     */
    async removePermissionsForGroup5Raw(requestParameters: RemovePermissionsForGroup5Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling removePermissionsForGroup5().'
            );
        }

        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling removePermissionsForGroup5().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/projectplan/{key}/groups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revokes project plan permissions from a given group.
     */
    async removePermissionsForGroup5(requestParameters: RemovePermissionsForGroup5Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removePermissionsForGroup5Raw(requestParameters, initOverrides);
    }

    /**
     * Revokes repository permissions from a given group.
     */
    async removePermissionsForGroup6Raw(requestParameters: RemovePermissionsForGroup6Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling removePermissionsForGroup6().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removePermissionsForGroup6().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/repository/{id}/groups/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revokes repository permissions from a given group.
     */
    async removePermissionsForGroup6(requestParameters: RemovePermissionsForGroup6Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removePermissionsForGroup6Raw(requestParameters, initOverrides);
    }

    /**
     * Revokes deployment project permissions from a given role.
     */
    async removePermissionsForRoleRaw(requestParameters: RemovePermissionsForRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling removePermissionsForRole().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removePermissionsForRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/deployment/{id}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revokes deployment project permissions from a given role.
     */
    async removePermissionsForRole(requestParameters: RemovePermissionsForRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removePermissionsForRoleRaw(requestParameters, initOverrides);
    }

    /**
     * Revokes deployment environment permissions from a given role.
     */
    async removePermissionsForRole1Raw(requestParameters: RemovePermissionsForRole1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling removePermissionsForRole1().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removePermissionsForRole1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/environment/{id}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revokes deployment environment permissions from a given role.
     */
    async removePermissionsForRole1(requestParameters: RemovePermissionsForRole1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removePermissionsForRole1Raw(requestParameters, initOverrides);
    }

    /**
     * Revokes global permissions from a given role.
     */
    async removePermissionsForRole2Raw(requestParameters: RemovePermissionsForRole2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling removePermissionsForRole2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ignore'] != null) {
            queryParameters['ignore'] = requestParameters['ignore'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/global/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revokes global permissions from a given role.
     */
    async removePermissionsForRole2(requestParameters: RemovePermissionsForRole2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removePermissionsForRole2Raw(requestParameters, initOverrides);
    }

    /**
     * Revokes plan permissions from a given role.
     */
    async removePermissionsForRole3Raw(requestParameters: RemovePermissionsForRole3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling removePermissionsForRole3().'
            );
        }

        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling removePermissionsForRole3().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/plan/{key}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revokes plan permissions from a given role.
     */
    async removePermissionsForRole3(requestParameters: RemovePermissionsForRole3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removePermissionsForRole3Raw(requestParameters, initOverrides);
    }

    /**
     * Revokes project permissions from a given role.
     */
    async removePermissionsForRole4Raw(requestParameters: RemovePermissionsForRole4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling removePermissionsForRole4().'
            );
        }

        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling removePermissionsForRole4().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/project/{key}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revokes project permissions from a given role.
     */
    async removePermissionsForRole4(requestParameters: RemovePermissionsForRole4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removePermissionsForRole4Raw(requestParameters, initOverrides);
    }

    /**
     * Revokes project plan permissions from a given role.
     */
    async removePermissionsForRole5Raw(requestParameters: RemovePermissionsForRole5Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling removePermissionsForRole5().'
            );
        }

        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling removePermissionsForRole5().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/projectplan/{key}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revokes project plan permissions from a given role.
     */
    async removePermissionsForRole5(requestParameters: RemovePermissionsForRole5Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removePermissionsForRole5Raw(requestParameters, initOverrides);
    }

    /**
     * Revokes repository permissions from a given role.
     */
    async removePermissionsForRole6Raw(requestParameters: RemovePermissionsForRole6Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling removePermissionsForRole6().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removePermissionsForRole6().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/repository/{id}/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revokes repository permissions from a given role.
     */
    async removePermissionsForRole6(requestParameters: RemovePermissionsForRole6Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removePermissionsForRole6Raw(requestParameters, initOverrides);
    }

    /**
     * Revokes deployment project permissions from a given user.
     */
    async removePermissionsForUserRaw(requestParameters: RemovePermissionsForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling removePermissionsForUser().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removePermissionsForUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/deployment/{id}/users/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revokes deployment project permissions from a given user.
     */
    async removePermissionsForUser(requestParameters: RemovePermissionsForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removePermissionsForUserRaw(requestParameters, initOverrides);
    }

    /**
     * Revokes deployment environment permissions from a given user.
     */
    async removePermissionsForUser1Raw(requestParameters: RemovePermissionsForUser1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling removePermissionsForUser1().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removePermissionsForUser1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/environment/{id}/users/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revokes deployment environment permissions from a given user.
     */
    async removePermissionsForUser1(requestParameters: RemovePermissionsForUser1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removePermissionsForUser1Raw(requestParameters, initOverrides);
    }

    /**
     * Revokes global permissions from a given user.
     */
    async removePermissionsForUser2Raw(requestParameters: RemovePermissionsForUser2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling removePermissionsForUser2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ignore'] != null) {
            queryParameters['ignore'] = requestParameters['ignore'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/global/users/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revokes global permissions from a given user.
     */
    async removePermissionsForUser2(requestParameters: RemovePermissionsForUser2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removePermissionsForUser2Raw(requestParameters, initOverrides);
    }

    /**
     * Revokes plan permissions from a given user.
     */
    async removePermissionsForUser3Raw(requestParameters: RemovePermissionsForUser3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling removePermissionsForUser3().'
            );
        }

        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling removePermissionsForUser3().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/plan/{key}/users/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revokes plan permissions from a given user.
     */
    async removePermissionsForUser3(requestParameters: RemovePermissionsForUser3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removePermissionsForUser3Raw(requestParameters, initOverrides);
    }

    /**
     * Revokes project permissions from a given user.
     */
    async removePermissionsForUser4Raw(requestParameters: RemovePermissionsForUser4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling removePermissionsForUser4().'
            );
        }

        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling removePermissionsForUser4().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/project/{key}/users/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revokes project permissions from a given user.
     */
    async removePermissionsForUser4(requestParameters: RemovePermissionsForUser4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removePermissionsForUser4Raw(requestParameters, initOverrides);
    }

    /**
     * Revokes project plan permissions from a given user.
     */
    async removePermissionsForUser5Raw(requestParameters: RemovePermissionsForUser5Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling removePermissionsForUser5().'
            );
        }

        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling removePermissionsForUser5().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/projectplan/{key}/users/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revokes project plan permissions from a given user.
     */
    async removePermissionsForUser5(requestParameters: RemovePermissionsForUser5Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removePermissionsForUser5Raw(requestParameters, initOverrides);
    }

    /**
     * Revokes repository permissions from a given user.
     */
    async removePermissionsForUser6Raw(requestParameters: RemovePermissionsForUser6Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling removePermissionsForUser6().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removePermissionsForUser6().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/permissions/repository/{id}/users/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revokes repository permissions from a given user.
     */
    async removePermissionsForUser6(requestParameters: RemovePermissionsForUser6Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removePermissionsForUser6Raw(requestParameters, initOverrides);
    }

}
