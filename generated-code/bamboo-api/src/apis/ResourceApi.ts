/* tslint:disable */
/* eslint-disable */
/**
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 11.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateAccessTokenRequest,
  GetUserTokens200Response,
  RestAccessToken,
  RestDedicatedAgent,
  RestErrorCollection,
  SearchResultsList,
} from '../models/index';

export interface AddAgentAssignmentRequest {
    executorType?: AddAgentAssignmentExecutorTypeEnum;
    executorId?: number;
    entityId?: number;
    assignmentType?: string;
}

export interface CreateAccessTokenOperationRequest {
    createAccessTokenRequest: CreateAccessTokenRequest;
}

export interface GetAgentAssignmentsRequest {
    executorType?: GetAgentAssignmentsExecutorTypeEnum;
    executorId?: number;
}

export interface GetUserTokensRequest {
    limit?: number;
    start?: number;
}

export interface RemoveAssignmentRequest {
    executorType?: RemoveAssignmentExecutorTypeEnum;
    executorId?: number;
    entityId?: number;
    assignmentType?: string;
}

export interface RevokeTokenRequest {
    tokenId: string;
}

export interface SearchEntityForAgentRequest {
    maxResult?: number;
    executorType?: SearchEntityForAgentExecutorTypeEnum;
    searchTerm?: string;
    executorId?: number;
    entityType?: string;
    startIndex?: number;
    assignmentType?: string;
}

/**
 * 
 */
export class ResourceApi extends runtime.BaseAPI {

    /**
     * Dedicate agent, elastic image or ephemeral template.
     */
    async addAgentAssignmentRaw(requestParameters: AddAgentAssignmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestDedicatedAgent>> {
        const queryParameters: any = {};

        if (requestParameters['executorType'] != null) {
            queryParameters['executorType'] = requestParameters['executorType'];
        }

        if (requestParameters['executorId'] != null) {
            queryParameters['executorId'] = requestParameters['executorId'];
        }

        if (requestParameters['entityId'] != null) {
            queryParameters['entityId'] = requestParameters['entityId'];
        }

        if (requestParameters['assignmentType'] != null) {
            queryParameters['assignmentType'] = requestParameters['assignmentType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/agent/assignment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Dedicate agent, elastic image or ephemeral template.
     */
    async addAgentAssignment(requestParameters: AddAgentAssignmentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestDedicatedAgent> {
        const response = await this.addAgentAssignmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new access token for the current user.
     */
    async createAccessTokenRaw(requestParameters: CreateAccessTokenOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestAccessToken>> {
        if (requestParameters['createAccessTokenRequest'] == null) {
            throw new runtime.RequiredError(
                'createAccessTokenRequest',
                'Required parameter "createAccessTokenRequest" was null or undefined when calling createAccessToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/latest/access-token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['createAccessTokenRequest'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Create a new access token for the current user.
     */
    async createAccessToken(requestParameters: CreateAccessTokenOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestAccessToken> {
        const response = await this.createAccessTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get agent\'s assignment.
     */
    async getAgentAssignmentsRaw(requestParameters: GetAgentAssignmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RestDedicatedAgent>>> {
        const queryParameters: any = {};

        if (requestParameters['executorType'] != null) {
            queryParameters['executorType'] = requestParameters['executorType'];
        }

        if (requestParameters['executorId'] != null) {
            queryParameters['executorId'] = requestParameters['executorId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/agent/assignment`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Get agent\'s assignment.
     */
    async getAgentAssignments(requestParameters: GetAgentAssignmentsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RestDedicatedAgent>> {
        const response = await this.getAgentAssignmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a page of user\'s access tokens.
     */
    async getUserTokensRaw(requestParameters: GetUserTokensRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserTokens200Response>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/access-token`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieve a page of user\'s access tokens.
     */
    async getUserTokens(requestParameters: GetUserTokensRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserTokens200Response> {
        const response = await this.getUserTokensRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove agent\'s assignment.
     */
    async removeAssignmentRaw(requestParameters: RemoveAssignmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['executorType'] != null) {
            queryParameters['executorType'] = requestParameters['executorType'];
        }

        if (requestParameters['executorId'] != null) {
            queryParameters['executorId'] = requestParameters['executorId'];
        }

        if (requestParameters['entityId'] != null) {
            queryParameters['entityId'] = requestParameters['entityId'];
        }

        if (requestParameters['assignmentType'] != null) {
            queryParameters['assignmentType'] = requestParameters['assignmentType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/agent/assignment`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove agent\'s assignment.
     */
    async removeAssignment(requestParameters: RemoveAssignmentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeAssignmentRaw(requestParameters, initOverrides);
    }

    /**
     * Revoke current user\'s access token.
     */
    async revokeTokenRaw(requestParameters: RevokeTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tokenId'] == null) {
            throw new runtime.RequiredError(
                'tokenId',
                'Required parameter "tokenId" was null or undefined when calling revokeToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/access-token/{tokenId}`.replace(`{${"tokenId"}}`, encodeURIComponent(String(requestParameters['tokenId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revoke current user\'s access token.
     */
    async revokeToken(requestParameters: RevokeTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.revokeTokenRaw(requestParameters, initOverrides);
    }

    /**
     * Search for assignments in specified entity\'s agents
     */
    async searchEntityForAgentRaw(requestParameters: SearchEntityForAgentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchResultsList>> {
        const queryParameters: any = {};

        if (requestParameters['maxResult'] != null) {
            queryParameters['max-result'] = requestParameters['maxResult'];
        }

        if (requestParameters['executorType'] != null) {
            queryParameters['executorType'] = requestParameters['executorType'];
        }

        if (requestParameters['searchTerm'] != null) {
            queryParameters['searchTerm'] = requestParameters['searchTerm'];
        }

        if (requestParameters['executorId'] != null) {
            queryParameters['executorId'] = requestParameters['executorId'];
        }

        if (requestParameters['entityType'] != null) {
            queryParameters['entityType'] = requestParameters['entityType'];
        }

        if (requestParameters['startIndex'] != null) {
            queryParameters['start-index'] = requestParameters['startIndex'];
        }

        if (requestParameters['assignmentType'] != null) {
            queryParameters['assignmentType'] = requestParameters['assignmentType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/latest/agent/assignment/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Search for assignments in specified entity\'s agents
     */
    async searchEntityForAgent(requestParameters: SearchEntityForAgentRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchResultsList> {
        const response = await this.searchEntityForAgentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AddAgentAssignmentExecutorTypeEnum = {
    Agent: 'AGENT',
    Image: 'IMAGE',
    Ephemeral: 'EPHEMERAL'
} as const;
export type AddAgentAssignmentExecutorTypeEnum = typeof AddAgentAssignmentExecutorTypeEnum[keyof typeof AddAgentAssignmentExecutorTypeEnum];
/**
 * @export
 */
export const GetAgentAssignmentsExecutorTypeEnum = {
    Agent: 'AGENT',
    Image: 'IMAGE',
    Ephemeral: 'EPHEMERAL'
} as const;
export type GetAgentAssignmentsExecutorTypeEnum = typeof GetAgentAssignmentsExecutorTypeEnum[keyof typeof GetAgentAssignmentsExecutorTypeEnum];
/**
 * @export
 */
export const RemoveAssignmentExecutorTypeEnum = {
    Agent: 'AGENT',
    Image: 'IMAGE',
    Ephemeral: 'EPHEMERAL'
} as const;
export type RemoveAssignmentExecutorTypeEnum = typeof RemoveAssignmentExecutorTypeEnum[keyof typeof RemoveAssignmentExecutorTypeEnum];
/**
 * @export
 */
export const SearchEntityForAgentExecutorTypeEnum = {
    Agent: 'AGENT',
    Image: 'IMAGE',
    Ephemeral: 'EPHEMERAL'
} as const;
export type SearchEntityForAgentExecutorTypeEnum = typeof SearchEntityForAgentExecutorTypeEnum[keyof typeof SearchEntityForAgentExecutorTypeEnum];
