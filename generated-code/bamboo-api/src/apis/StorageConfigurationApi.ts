/* tslint:disable */
/* eslint-disable */
/**
 * Bamboo
 * This is the reference document for the Atlassian Bamboo REST API. The REST API is for developers who want to:    - integrate Bamboo with other applications;   - create scripts that interact with Bamboo; or   - develop plugins that enhance the Bamboo UI, using REST to interact with the backend.    You can read more about developing Bamboo plugins in the [Bamboo Developer Documentation](https://developer.atlassian.com/bamboo/server/docs/latest/).
 *
 * The version of the OpenAPI document: 11.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RestErrorCollection,
  RestStorageConfiguration,
} from '../models/index';

export interface SaveStorageConfigurationRequest {
    restStorageConfiguration: RestStorageConfiguration;
}

/**
 * 
 */
export class StorageConfigurationApi extends runtime.BaseAPI {

    /**
     * Read storage configuration limits.
     */
    async getStorageConfigurationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestStorageConfiguration>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/latest/storageSettings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Read storage configuration limits.
     */
    async getStorageConfiguration(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestStorageConfiguration> {
        const response = await this.getStorageConfigurationRaw(initOverrides);
        return await response.value();
    }

    /**
     * Set storage configuration limits.
     */
    async saveStorageConfigurationRaw(requestParameters: SaveStorageConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestStorageConfiguration>> {
        if (requestParameters['restStorageConfiguration'] == null) {
            throw new runtime.RequiredError(
                'restStorageConfiguration',
                'Required parameter "restStorageConfiguration" was null or undefined when calling saveStorageConfiguration().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/latest/storageSettings`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['restStorageConfiguration'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Set storage configuration limits.
     */
    async saveStorageConfiguration(requestParameters: SaveStorageConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestStorageConfiguration> {
        const response = await this.saveStorageConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
